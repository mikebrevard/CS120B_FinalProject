
bop_it_user_input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000e76  00000f0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080011e  0080011e  00000f28  2**0
                  ALLOC
  3 .stab         00001bfc  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000075e  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00003282  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003b8  00000000  00000000  000032c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007f9  00000000  00000000  0000367a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001a1  00000000  00000000  00003e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008f7  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  0000490c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000401  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000049  00000000  00000000  00004edd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_13>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 bc 03 	call	0x778	; 0x778 <main>
  c6:	0c 94 39 07 	jmp	0xe72	; 0xe72 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initUSART>:
//Functionality - Initializes TX and RX on PORT D
//Parameter: usartNum specifies which USART is being initialized
//			 If usartNum != 1, default to USART0
//Returns: None
void initUSART(unsigned char usartNum)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	0f 92       	push	r0
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	e1 f0       	breq	.+56     	; 0x118 <initUSART+0x4a>
		// Turn on the reception circuitry of USART0
		// Turn on receiver and transmitter
		// Use 8-bit character sizes 
		UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
  e0:	81 ec       	ldi	r24, 0xC1	; 193
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	21 ec       	ldi	r18, 0xC1	; 193
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	28 61       	ori	r18, 0x18	; 24
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
		UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
  f2:	82 ec       	ldi	r24, 0xC2	; 194
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	22 ec       	ldi	r18, 0xC2	; 194
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	20 81       	ld	r18, Z
  fe:	26 60       	ori	r18, 0x06	; 6
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR0 register
		UBRR0L = BAUD_PRESCALE;
 104:	84 ec       	ldi	r24, 0xC4	; 196
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	23 e3       	ldi	r18, 0x33	; 51
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR0 register
		UBRR0H = (BAUD_PRESCALE >> 8);
 10e:	85 ec       	ldi	r24, 0xC5	; 197
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	10 82       	st	Z, r1
 116:	1b c0       	rjmp	.+54     	; 0x14e <initUSART+0x80>
	}
	else {
		// Turn on the reception circuitry for USART1
		// Turn on receiver and transmitter
		// Use 8-bit character sizes
		UCSR1B |= (1 << RXEN1)  | (1 << TXEN1);
 118:	89 ec       	ldi	r24, 0xC9	; 201
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	29 ec       	ldi	r18, 0xC9	; 201
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	28 61       	ori	r18, 0x18	; 24
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
		UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
 12a:	8a ec       	ldi	r24, 0xCA	; 202
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	2a ec       	ldi	r18, 0xCA	; 202
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	26 60       	ori	r18, 0x06	; 6
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR1 register
		UBRR1L = BAUD_PRESCALE;
 13c:	8c ec       	ldi	r24, 0xCC	; 204
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	23 e3       	ldi	r18, 0x33	; 51
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR1 register
		UBRR1H = (BAUD_PRESCALE >> 8);
 146:	8d ec       	ldi	r24, 0xCD	; 205
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	10 82       	st	Z, r1
	}
}
 14e:	0f 90       	pop	r0
 150:	cf 91       	pop	r28
 152:	df 91       	pop	r29
 154:	08 95       	ret

00000156 <USART_IsSendReady>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
 156:	df 93       	push	r29
 158:	cf 93       	push	r28
 15a:	0f 92       	push	r0
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	31 f0       	breq	.+12     	; 0x174 <USART_IsSendReady+0x1e>
 168:	80 ec       	ldi	r24, 0xC0	; 192
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	80 72       	andi	r24, 0x20	; 32
 172:	05 c0       	rjmp	.+10     	; 0x17e <USART_IsSendReady+0x28>
 174:	88 ec       	ldi	r24, 0xC8	; 200
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	80 72       	andi	r24, 0x20	; 32
}
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <USART_HasTransmitted>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	0f 92       	push	r0
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	31 f0       	breq	.+12     	; 0x1a4 <USART_HasTransmitted+0x1e>
 198:	80 ec       	ldi	r24, 0xC0	; 192
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
 1a0:	80 74       	andi	r24, 0x40	; 64
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <USART_HasTransmitted+0x28>
 1a4:	88 ec       	ldi	r24, 0xC8	; 200
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	80 74       	andi	r24, 0x40	; 64
}
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <USART_HasReceived>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	0f 92       	push	r0
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <USART_HasReceived+0x1e>
 1c8:	80 ec       	ldi	r24, 0xC0	; 192
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	80 78       	andi	r24, 0x80	; 128
 1d2:	05 c0       	rjmp	.+10     	; 0x1de <USART_HasReceived+0x28>
 1d4:	88 ec       	ldi	r24, 0xC8	; 200
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	80 78       	andi	r24, 0x80	; 128
}
 1de:	0f 90       	pop	r0
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <USART_Flush>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Flushes the data register
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	0f 92       	push	r0
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	89 83       	std	Y+1, r24	; 0x01
	static unsigned char dummy;
	if (usartNum != 1) {
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	a9 f0       	breq	.+42     	; 0x222 <USART_Flush+0x3c>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <USART_Flush+0x20>
 1fa:	86 ec       	ldi	r24, 0xC6	; 198
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	80 81       	ld	r24, Z
 202:	80 93 27 01 	sts	0x0127, r24
 206:	80 ec       	ldi	r24, 0xC0	; 192
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	a4 f3       	brlt	.-24     	; 0x1fa <USART_Flush+0x14>
 212:	0e c0       	rjmp	.+28     	; 0x230 <USART_Flush+0x4a>
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 214:	8e ec       	ldi	r24, 0xCE	; 206
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	80 81       	ld	r24, Z
 21c:	80 93 27 01 	sts	0x0127, r24
 220:	01 c0       	rjmp	.+2      	; 0x224 <USART_Flush+0x3e>
 222:	00 00       	nop
 224:	88 ec       	ldi	r24, 0xC8	; 200
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	88 23       	and	r24, r24
 22e:	94 f3       	brlt	.-28     	; 0x214 <USART_Flush+0x2e>
	}
}
 230:	0f 90       	pop	r0
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <USART_Send>:
//Functionality - Sends an 8-bit char value
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	00 d0       	rcall	.+0      	; 0x23e <USART_Send+0x6>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	6a 83       	std	Y+2, r22	; 0x02
	if (usartNum != 1) {
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	89 f0       	breq	.+34     	; 0x26e <USART_Send+0x36>
		while( !(UCSR0A & (1 << UDRE0)) );
 24c:	00 00       	nop
 24e:	80 ec       	ldi	r24, 0xC0	; 192
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	80 81       	ld	r24, Z
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	80 72       	andi	r24, 0x20	; 32
 25c:	90 70       	andi	r25, 0x00	; 0
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	b1 f3       	breq	.-20     	; 0x24e <USART_Send+0x16>
		UDR0 = sendMe;
 262:	86 ec       	ldi	r24, 0xC6	; 198
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	29 81       	ldd	r18, Y+1	; 0x01
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
 26c:	10 c0       	rjmp	.+32     	; 0x28e <USART_Send+0x56>
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 26e:	00 00       	nop
 270:	88 ec       	ldi	r24, 0xC8	; 200
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	80 72       	andi	r24, 0x20	; 32
 27e:	90 70       	andi	r25, 0x00	; 0
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	b1 f3       	breq	.-20     	; 0x270 <USART_Send+0x38>
		UDR1 = sendMe;
 284:	8e ec       	ldi	r24, 0xCE	; 206
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	}
}
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <USART_Receive>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	0f 92       	push	r0
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	61 f0       	breq	.+24     	; 0x2c2 <USART_Receive+0x2a>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 2aa:	00 00       	nop
 2ac:	80 ec       	ldi	r24, 0xC0	; 192
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	d4 f7       	brge	.-12     	; 0x2ac <USART_Receive+0x14>
		return UDR0; // Get and return received data from buffer
 2b8:	86 ec       	ldi	r24, 0xC6	; 198
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	80 81       	ld	r24, Z
 2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <USART_Receive+0x40>
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 2c2:	00 00       	nop
 2c4:	88 ec       	ldi	r24, 0xC8	; 200
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	80 81       	ld	r24, Z
 2cc:	88 23       	and	r24, r24
 2ce:	d4 f7       	brge	.-12     	; 0x2c4 <USART_Receive+0x2c>
		return UDR1;
 2d0:	8e ec       	ldi	r24, 0xCE	; 206
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	80 81       	ld	r24, Z
	}
}
 2d8:	0f 90       	pop	r0
 2da:	cf 91       	pop	r28
 2dc:	df 91       	pop	r29
 2de:	08 95       	ret

000002e0 <findGCD>:
#include <avr/io.h>
#include <avr/interrupt.h>

//--------Find GCD function -------------------------------
unsigned long int findGCD (unsigned long int a, unsigned long int b)
{
 2e0:	df 93       	push	r29
 2e2:	cf 93       	push	r28
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	2c 97       	sbiw	r28, 0x0c	; 12
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	6d 83       	std	Y+5, r22	; 0x05
 2f6:	7e 83       	std	Y+6, r23	; 0x06
 2f8:	8f 83       	std	Y+7, r24	; 0x07
 2fa:	98 87       	std	Y+8, r25	; 0x08
 2fc:	29 87       	std	Y+9, r18	; 0x09
 2fe:	3a 87       	std	Y+10, r19	; 0x0a
 300:	4b 87       	std	Y+11, r20	; 0x0b
 302:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int c;
	while(1){
	c = a%b;
 304:	8d 81       	ldd	r24, Y+5	; 0x05
 306:	9e 81       	ldd	r25, Y+6	; 0x06
 308:	af 81       	ldd	r26, Y+7	; 0x07
 30a:	b8 85       	ldd	r27, Y+8	; 0x08
 30c:	29 85       	ldd	r18, Y+9	; 0x09
 30e:	3a 85       	ldd	r19, Y+10	; 0x0a
 310:	4b 85       	ldd	r20, Y+11	; 0x0b
 312:	5c 85       	ldd	r21, Y+12	; 0x0c
 314:	bc 01       	movw	r22, r24
 316:	cd 01       	movw	r24, r26
 318:	0e 94 17 07 	call	0xe2e	; 0xe2e <__udivmodsi4>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	ab 83       	std	Y+3, r26	; 0x03
 326:	bc 83       	std	Y+4, r27	; 0x04
	if(c==0){return b;}
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	9a 81       	ldd	r25, Y+2	; 0x02
 32c:	ab 81       	ldd	r26, Y+3	; 0x03
 32e:	bc 81       	ldd	r27, Y+4	; 0x04
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	a1 05       	cpc	r26, r1
 334:	b1 05       	cpc	r27, r1
 336:	79 f4       	brne	.+30     	; 0x356 <findGCD+0x76>
 338:	89 85       	ldd	r24, Y+9	; 0x09
 33a:	9a 85       	ldd	r25, Y+10	; 0x0a
 33c:	ab 85       	ldd	r26, Y+11	; 0x0b
 33e:	bc 85       	ldd	r27, Y+12	; 0x0c
	a = b;
	b = c;
	}
	return 0;
}
 340:	bc 01       	movw	r22, r24
 342:	cd 01       	movw	r24, r26
 344:	2c 96       	adiw	r28, 0x0c	; 12
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	08 95       	ret
{
	unsigned long int c;
	while(1){
	c = a%b;
	if(c==0){return b;}
	a = b;
 356:	89 85       	ldd	r24, Y+9	; 0x09
 358:	9a 85       	ldd	r25, Y+10	; 0x0a
 35a:	ab 85       	ldd	r26, Y+11	; 0x0b
 35c:	bc 85       	ldd	r27, Y+12	; 0x0c
 35e:	8d 83       	std	Y+5, r24	; 0x05
 360:	9e 83       	std	Y+6, r25	; 0x06
 362:	af 83       	std	Y+7, r26	; 0x07
 364:	b8 87       	std	Y+8, r27	; 0x08
	b = c;
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	9a 81       	ldd	r25, Y+2	; 0x02
 36a:	ab 81       	ldd	r26, Y+3	; 0x03
 36c:	bc 81       	ldd	r27, Y+4	; 0x04
 36e:	89 87       	std	Y+9, r24	; 0x09
 370:	9a 87       	std	Y+10, r25	; 0x0a
 372:	ab 87       	std	Y+11, r26	; 0x0b
 374:	bc 87       	std	Y+12, r27	; 0x0c
	}
 376:	c6 cf       	rjmp	.-116    	; 0x304 <findGCD+0x24>

00000378 <ADC_init>:
	return 0;
}

void ADC_init() {
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 380:	8a e7       	ldi	r24, 0x7A	; 122
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	2a e7       	ldi	r18, 0x7A	; 122
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	f9 01       	movw	r30, r18
 38a:	20 81       	ld	r18, Z
 38c:	20 6e       	ori	r18, 0xE0	; 224
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	// in Free Running Mode, a new conversion will trigger
	// whenever the previous conversion completes.
}
 392:	cf 91       	pop	r28
 394:	df 91       	pop	r29
 396:	08 95       	ret

00000398 <set_PWM>:
	
void set_PWM(double frequency) {
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	df 93       	push	r29
 39e:	cf 93       	push	r28
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <set_PWM+0xa>
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <set_PWM+0xc>
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	69 83       	std	Y+1, r22	; 0x01
 3aa:	7a 83       	std	Y+2, r23	; 0x02
 3ac:	8b 83       	std	Y+3, r24	; 0x03
 3ae:	9c 83       	std	Y+4, r25	; 0x04
	
	// Keeps track of the currently set frequency
  // Will only update the registers when the frequency
  // changes, plays music uninterrupted.
	static double current_frequency;
	if (frequency != current_frequency) {
 3b0:	20 91 23 01 	lds	r18, 0x0123
 3b4:	30 91 24 01 	lds	r19, 0x0124
 3b8:	40 91 25 01 	lds	r20, 0x0125
 3bc:	50 91 26 01 	lds	r21, 0x0126
 3c0:	69 81       	ldd	r22, Y+1	; 0x01
 3c2:	7a 81       	ldd	r23, Y+2	; 0x02
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	9c 81       	ldd	r25, Y+4	; 0x04
 3c8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__cmpsf2>
 3cc:	88 23       	and	r24, r24
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <set_PWM+0x3a>
 3d0:	85 c0       	rjmp	.+266    	; 0x4dc <set_PWM+0x144>

		if (!frequency) TCCR3B &= 0x08; //stops timer/counter
 3d2:	11 e0       	ldi	r17, 0x01	; 1
 3d4:	69 81       	ldd	r22, Y+1	; 0x01
 3d6:	7a 81       	ldd	r23, Y+2	; 0x02
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	9c 81       	ldd	r25, Y+4	; 0x04
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	a9 01       	movw	r20, r18
 3e2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__cmpsf2>
 3e6:	88 23       	and	r24, r24
 3e8:	09 f4       	brne	.+2      	; 0x3ec <set_PWM+0x54>
 3ea:	10 e0       	ldi	r17, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	81 27       	eor	r24, r17
 3f0:	88 23       	and	r24, r24
 3f2:	51 f0       	breq	.+20     	; 0x408 <set_PWM+0x70>
 3f4:	81 e9       	ldi	r24, 0x91	; 145
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	21 e9       	ldi	r18, 0x91	; 145
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	f9 01       	movw	r30, r18
 3fe:	20 81       	ld	r18, Z
 400:	28 70       	andi	r18, 0x08	; 8
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	09 c0       	rjmp	.+18     	; 0x41a <set_PWM+0x82>
		else TCCR3B |= 0x03; // resumes/continues timer/counter
 408:	81 e9       	ldi	r24, 0x91	; 145
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	21 e9       	ldi	r18, 0x91	; 145
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	f9 01       	movw	r30, r18
 412:	20 81       	ld	r18, Z
 414:	23 60       	ori	r18, 0x03	; 3
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
	
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) OCR3A = 0xFFFF;
 41a:	11 e0       	ldi	r17, 0x01	; 1
 41c:	69 81       	ldd	r22, Y+1	; 0x01
 41e:	7a 81       	ldd	r23, Y+2	; 0x02
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	9c 81       	ldd	r25, Y+4	; 0x04
 424:	28 e5       	ldi	r18, 0x58	; 88
 426:	39 e3       	ldi	r19, 0x39	; 57
 428:	44 e7       	ldi	r20, 0x74	; 116
 42a:	5f e3       	ldi	r21, 0x3F	; 63
 42c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__cmpsf2>
 430:	88 23       	and	r24, r24
 432:	0c f0       	brlt	.+2      	; 0x436 <set_PWM+0x9e>
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	11 23       	and	r17, r17
 438:	41 f0       	breq	.+16     	; 0x44a <set_PWM+0xb2>
 43a:	88 e9       	ldi	r24, 0x98	; 152
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	3f ef       	ldi	r19, 0xFF	; 255
 442:	fc 01       	movw	r30, r24
 444:	31 83       	std	Z+1, r19	; 0x01
 446:	20 83       	st	Z, r18
 448:	38 c0       	rjmp	.+112    	; 0x4ba <set_PWM+0x122>
	
		// prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) OCR3A = 0x0000;
 44a:	11 e0       	ldi	r17, 0x01	; 1
 44c:	69 81       	ldd	r22, Y+1	; 0x01
 44e:	7a 81       	ldd	r23, Y+2	; 0x02
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	9c 81       	ldd	r25, Y+4	; 0x04
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	34 e2       	ldi	r19, 0x24	; 36
 458:	44 ef       	ldi	r20, 0xF4	; 244
 45a:	56 e4       	ldi	r21, 0x46	; 70
 45c:	0e 94 b0 06 	call	0xd60	; 0xd60 <__gesf2>
 460:	18 16       	cp	r1, r24
 462:	0c f0       	brlt	.+2      	; 0x466 <set_PWM+0xce>
 464:	10 e0       	ldi	r17, 0x00	; 0
 466:	11 23       	and	r17, r17
 468:	31 f0       	breq	.+12     	; 0x476 <set_PWM+0xde>
 46a:	88 e9       	ldi	r24, 0x98	; 152
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	fc 01       	movw	r30, r24
 470:	11 82       	std	Z+1, r1	; 0x01
 472:	10 82       	st	Z, r1
 474:	22 c0       	rjmp	.+68     	; 0x4ba <set_PWM+0x122>
	
		// set OCR3A based on desired frequency
		else OCR3A = (short)(8000000 / (128 * frequency)) - 1;
 476:	08 e9       	ldi	r16, 0x98	; 152
 478:	10 e0       	ldi	r17, 0x00	; 0
 47a:	69 81       	ldd	r22, Y+1	; 0x01
 47c:	7a 81       	ldd	r23, Y+2	; 0x02
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	9c 81       	ldd	r25, Y+4	; 0x04
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	53 e4       	ldi	r21, 0x43	; 67
 48a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
 48e:	dc 01       	movw	r26, r24
 490:	cb 01       	movw	r24, r22
 492:	9c 01       	movw	r18, r24
 494:	ad 01       	movw	r20, r26
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	74 e2       	ldi	r23, 0x24	; 36
 49a:	84 ef       	ldi	r24, 0xF4	; 244
 49c:	9a e4       	ldi	r25, 0x4A	; 74
 49e:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divsf3>
 4a2:	dc 01       	movw	r26, r24
 4a4:	cb 01       	movw	r24, r22
 4a6:	bc 01       	movw	r22, r24
 4a8:	cd 01       	movw	r24, r26
 4aa:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fixsfsi>
 4ae:	dc 01       	movw	r26, r24
 4b0:	cb 01       	movw	r24, r22
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f8 01       	movw	r30, r16
 4b6:	91 83       	std	Z+1, r25	; 0x01
 4b8:	80 83       	st	Z, r24

		TCNT3 = 0; // resets counter
 4ba:	84 e9       	ldi	r24, 0x94	; 148
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	fc 01       	movw	r30, r24
 4c0:	11 82       	std	Z+1, r1	; 0x01
 4c2:	10 82       	st	Z, r1
		current_frequency = frequency;
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	9a 81       	ldd	r25, Y+2	; 0x02
 4c8:	ab 81       	ldd	r26, Y+3	; 0x03
 4ca:	bc 81       	ldd	r27, Y+4	; 0x04
 4cc:	80 93 23 01 	sts	0x0123, r24
 4d0:	90 93 24 01 	sts	0x0124, r25
 4d4:	a0 93 25 01 	sts	0x0125, r26
 4d8:	b0 93 26 01 	sts	0x0126, r27
		}
}
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	08 95       	ret

000004ee <PWM_on>:

void PWM_on() {
 4ee:	df 93       	push	r29
 4f0:	cf 93       	push	r28
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = (1 << COM3A0);
 4f6:	80 e9       	ldi	r24, 0x90	; 144
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	20 e4       	ldi	r18, 0x40	; 64
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 500:	81 e9       	ldi	r24, 0x91	; 145
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	2b e0       	ldi	r18, 0x0B	; 11
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	cb 01       	movw	r24, r22
 510:	0e 94 cc 01 	call	0x398	; 0x398 <set_PWM>
}
 514:	cf 91       	pop	r28
 516:	df 91       	pop	r29
 518:	08 95       	ret

0000051a <PWM_off>:

void PWM_off() {
 51a:	df 93       	push	r29
 51c:	cf 93       	push	r28
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0x00;
 522:	80 e9       	ldi	r24, 0x90	; 144
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	fc 01       	movw	r30, r24
 528:	10 82       	st	Z, r1
	TCCR3B = 0x00;
 52a:	81 e9       	ldi	r24, 0x91	; 145
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	10 82       	st	Z, r1
}
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	08 95       	ret

00000538 <SetBit>:

// Bit-access functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
 538:	df 93       	push	r29
 53a:	cf 93       	push	r28
 53c:	00 d0       	rcall	.+0      	; 0x53e <SetBit+0x6>
 53e:	0f 92       	push	r0
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	89 83       	std	Y+1, r24	; 0x01
 546:	6a 83       	std	Y+2, r22	; 0x02
 548:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	88 23       	and	r24, r24
 54e:	79 f0       	breq	.+30     	; 0x56e <SetBit+0x36>
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <SetBit+0x2a>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <SetBit+0x26>
 566:	98 2f       	mov	r25, r24
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	89 2b       	or	r24, r25
 56c:	0f c0       	rjmp	.+30     	; 0x58c <SetBit+0x54>
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 2e       	mov	r0, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <SetBit+0x48>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <SetBit+0x44>
 584:	98 2f       	mov	r25, r24
 586:	90 95       	com	r25
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	89 23       	and	r24, r25
}
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	08 95       	ret

00000598 <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
 598:	df 93       	push	r29
 59a:	cf 93       	push	r28
 59c:	00 d0       	rcall	.+0      	; 0x59e <GetBit+0x6>
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	2a 81       	ldd	r18, Y+2	; 0x02
 5ae:	22 2f       	mov	r18, r18
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	02 2e       	mov	r0, r18
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <GetBit+0x22>
 5b6:	95 95       	asr	r25
 5b8:	87 95       	ror	r24
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <GetBit+0x1e>
 5be:	81 70       	andi	r24, 0x01	; 1
}
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	08 95       	ret

000005ca <TimerOn>:
volatile unsigned char TimerFlag = 0;
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
 5ca:	df 93       	push	r29
 5cc:	cf 93       	push	r28
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
	// bit3 = 0: CTC mode (clear timer on compare)
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s
	TCCR1B = 0x0B;
 5d2:	81 e8       	ldi	r24, 0x81	; 129
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	2b e0       	ldi	r18, 0x0B	; 11
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
	// AVR output compare register OCR1A.
	// Timer interrupt will be generated when TCNT1==OCR1A
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	OCR1A = 125;// AVR timer interrupt mask register
 5dc:	88 e8       	ldi	r24, 0x88	; 136
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	2d e7       	ldi	r18, 0x7D	; 125
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	fc 01       	movw	r30, r24
 5e6:	31 83       	std	Z+1, r19	; 0x01
 5e8:	20 83       	st	Z, r18
	// bit1: OCIE1A -- enables compare match interrupt
	TIMSK1 = 0x02;
 5ea:	8f e6       	ldi	r24, 0x6F	; 111
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	22 e0       	ldi	r18, 0x02	; 2
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 83       	st	Z, r18
	//Initialize avr counter
	TCNT1=0;
 5f4:	84 e8       	ldi	r24, 0x84	; 132
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	fc 01       	movw	r30, r24
 5fa:	11 82       	std	Z+1, r1	; 0x01
 5fc:	10 82       	st	Z, r1
	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
 5fe:	80 91 00 01 	lds	r24, 0x0100
 602:	90 91 01 01 	lds	r25, 0x0101
 606:	a0 91 02 01 	lds	r26, 0x0102
 60a:	b0 91 03 01 	lds	r27, 0x0103
 60e:	80 93 1f 01 	sts	0x011F, r24
 612:	90 93 20 01 	sts	0x0120, r25
 616:	a0 93 21 01 	sts	0x0121, r26
 61a:	b0 93 22 01 	sts	0x0122, r27
	//Enable global interrupts: 0x80: 1000000
	SREG |= 0x80;
 61e:	8f e5       	ldi	r24, 0x5F	; 95
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	2f e5       	ldi	r18, 0x5F	; 95
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	f9 01       	movw	r30, r18
 628:	20 81       	ld	r18, Z
 62a:	20 68       	ori	r18, 0x80	; 128
 62c:	fc 01       	movw	r30, r24
 62e:	20 83       	st	Z, r18
}
 630:	cf 91       	pop	r28
 632:	df 91       	pop	r29
 634:	08 95       	ret

00000636 <TimerOff>:

void TimerOff() {
 636:	df 93       	push	r29
 638:	cf 93       	push	r28
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
	// bit3bit1bit0=000: timer off
	TCCR1B = 0x00;
 63e:	81 e8       	ldi	r24, 0x81	; 129
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	fc 01       	movw	r30, r24
 644:	10 82       	st	Z, r1
}
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	08 95       	ret

0000064c <TimerISR>:

void TimerISR() {
 64c:	df 93       	push	r29
 64e:	cf 93       	push	r28
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	80 93 1e 01 	sts	0x011E, r24
}
 65a:	cf 91       	pop	r28
 65c:	df 91       	pop	r29
 65e:	08 95       	ret

00000660 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	00 90 5b 00 	lds	r0, 0x005B
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	6f 93       	push	r22
 67a:	7f 93       	push	r23
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
 680:	af 93       	push	r26
 682:	bf 93       	push	r27
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1 ms per TimerOn settings)
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
 690:	80 91 1f 01 	lds	r24, 0x011F
 694:	90 91 20 01 	lds	r25, 0x0120
 698:	a0 91 21 01 	lds	r26, 0x0121
 69c:	b0 91 22 01 	lds	r27, 0x0122
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	a1 09       	sbc	r26, r1
 6a4:	b1 09       	sbc	r27, r1
 6a6:	80 93 1f 01 	sts	0x011F, r24
 6aa:	90 93 20 01 	sts	0x0120, r25
 6ae:	a0 93 21 01 	sts	0x0121, r26
 6b2:	b0 93 22 01 	sts	0x0122, r27
	if (_avr_timer_cntcurr == 0) {
 6b6:	80 91 1f 01 	lds	r24, 0x011F
 6ba:	90 91 20 01 	lds	r25, 0x0120
 6be:	a0 91 21 01 	lds	r26, 0x0121
 6c2:	b0 91 22 01 	lds	r27, 0x0122
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	a1 05       	cpc	r26, r1
 6ca:	b1 05       	cpc	r27, r1
 6cc:	91 f4       	brne	.+36     	; 0x6f2 <__vector_13+0x92>
		// Call the ISR that the user uses
		TimerISR();
 6ce:	0e 94 26 03 	call	0x64c	; 0x64c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 6d2:	80 91 00 01 	lds	r24, 0x0100
 6d6:	90 91 01 01 	lds	r25, 0x0101
 6da:	a0 91 02 01 	lds	r26, 0x0102
 6de:	b0 91 03 01 	lds	r27, 0x0103
 6e2:	80 93 1f 01 	sts	0x011F, r24
 6e6:	90 93 20 01 	sts	0x0120, r25
 6ea:	a0 93 21 01 	sts	0x0121, r26
 6ee:	b0 93 22 01 	sts	0x0122, r27
	}
}
 6f2:	cf 91       	pop	r28
 6f4:	df 91       	pop	r29
 6f6:	ff 91       	pop	r31
 6f8:	ef 91       	pop	r30
 6fa:	bf 91       	pop	r27
 6fc:	af 91       	pop	r26
 6fe:	9f 91       	pop	r25
 700:	8f 91       	pop	r24
 702:	7f 91       	pop	r23
 704:	6f 91       	pop	r22
 706:	5f 91       	pop	r21
 708:	4f 91       	pop	r20
 70a:	3f 91       	pop	r19
 70c:	2f 91       	pop	r18
 70e:	0f 90       	pop	r0
 710:	00 92 5b 00 	sts	0x005B, r0
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	00 d0       	rcall	.+0      	; 0x724 <TimerSet+0x6>
 724:	00 d0       	rcall	.+0      	; 0x726 <TimerSet+0x8>
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	69 83       	std	Y+1, r22	; 0x01
 72c:	7a 83       	std	Y+2, r23	; 0x02
 72e:	8b 83       	std	Y+3, r24	; 0x03
 730:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	9a 81       	ldd	r25, Y+2	; 0x02
 736:	ab 81       	ldd	r26, Y+3	; 0x03
 738:	bc 81       	ldd	r27, Y+4	; 0x04
 73a:	80 93 00 01 	sts	0x0100, r24
 73e:	90 93 01 01 	sts	0x0101, r25
 742:	a0 93 02 01 	sts	0x0102, r26
 746:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 74a:	80 91 00 01 	lds	r24, 0x0100
 74e:	90 91 01 01 	lds	r25, 0x0101
 752:	a0 91 02 01 	lds	r26, 0x0102
 756:	b0 91 03 01 	lds	r27, 0x0103
 75a:	80 93 1f 01 	sts	0x011F, r24
 75e:	90 93 20 01 	sts	0x0120, r25
 762:	a0 93 21 01 	sts	0x0121, r26
 766:	b0 93 22 01 	sts	0x0122, r27
}
 76a:	0f 90       	pop	r0
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	08 95       	ret

00000778 <main>:
#include "usart_ATmega1284.h"
#include "Utilities.h"
#include "Codes.h"
#include "io.h"

int main(void) {
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	00 d0       	rcall	.+0      	; 0x77e <main+0x6>
 77e:	00 d0       	rcall	.+0      	; 0x780 <main+0x8>
 780:	00 d0       	rcall	.+0      	; 0x782 <main+0xa>
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0x00; PORTA = 0xFF;
 786:	81 e2       	ldi	r24, 0x21	; 33
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	fc 01       	movw	r30, r24
 78c:	10 82       	st	Z, r1
 78e:	82 e2       	ldi	r24, 0x22	; 34
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	2f ef       	ldi	r18, 0xFF	; 255
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF;
 798:	84 e2       	ldi	r24, 0x24	; 36
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	fc 01       	movw	r30, r24
 79e:	10 82       	st	Z, r1
 7a0:	85 e2       	ldi	r24, 0x25	; 37
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	2f ef       	ldi	r18, 0xFF	; 255
 7a6:	fc 01       	movw	r30, r24
 7a8:	20 83       	st	Z, r18
	//DDRC = 0xFF; PORTC = 0x00; 
	DDRD = 0xFF; PORTD = 0x00; 
 7aa:	8a e2       	ldi	r24, 0x2A	; 42
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	2f ef       	ldi	r18, 0xFF	; 255
 7b0:	fc 01       	movw	r30, r24
 7b2:	20 83       	st	Z, r18
 7b4:	8b e2       	ldi	r24, 0x2B	; 43
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	fc 01       	movw	r30, r24
 7ba:	10 82       	st	Z, r1
	
	unsigned char button1 = 0x00;
 7bc:	19 82       	std	Y+1, r1	; 0x01
	unsigned char button2 = 0x00;
 7be:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char button3 = 0x00;
 7c0:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char button4 = 0x00;
 7c2:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char button5 = 0x00;
 7c4:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char spin_knob = 0x00;
 7c6:	1e 82       	std	Y+6, r1	; 0x06
	initUSART(0);
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	0e 94 67 00 	call	0xce	; 0xce <initUSART>
	USART_Flush(0);
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <USART_Flush>
 7d4:	03 c0       	rjmp	.+6      	; 0x7dc <main+0x64>
		} else if (USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
				USART_Send(CODE_NOTHING, 0);
			}
		}			
    }
 7d6:	00 00       	nop
 7d8:	01 c0       	rjmp	.+2      	; 0x7dc <main+0x64>
 7da:	00 00       	nop
	initUSART(0);
	USART_Flush(0);
	
    while(1)
    {
		button1 = GetBit(~PINB, 0);
 7dc:	83 e2       	ldi	r24, 0x23	; 35
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	fc 01       	movw	r30, r24
 7e2:	80 81       	ld	r24, Z
 7e4:	80 95       	com	r24
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	0e 94 cc 02 	call	0x598	; 0x598 <GetBit>
 7ec:	89 83       	std	Y+1, r24	; 0x01
		button2 = GetBit(~PINB, 1);
 7ee:	83 e2       	ldi	r24, 0x23	; 35
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	fc 01       	movw	r30, r24
 7f4:	80 81       	ld	r24, Z
 7f6:	80 95       	com	r24
 7f8:	61 e0       	ldi	r22, 0x01	; 1
 7fa:	0e 94 cc 02 	call	0x598	; 0x598 <GetBit>
 7fe:	8a 83       	std	Y+2, r24	; 0x02
		button3 = GetBit(~PINB, 2);
 800:	83 e2       	ldi	r24, 0x23	; 35
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	fc 01       	movw	r30, r24
 806:	80 81       	ld	r24, Z
 808:	80 95       	com	r24
 80a:	62 e0       	ldi	r22, 0x02	; 2
 80c:	0e 94 cc 02 	call	0x598	; 0x598 <GetBit>
 810:	8b 83       	std	Y+3, r24	; 0x03
		button4 = GetBit(~PINB, 3);
 812:	83 e2       	ldi	r24, 0x23	; 35
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	fc 01       	movw	r30, r24
 818:	80 81       	ld	r24, Z
 81a:	80 95       	com	r24
 81c:	63 e0       	ldi	r22, 0x03	; 3
 81e:	0e 94 cc 02 	call	0x598	; 0x598 <GetBit>
 822:	8c 83       	std	Y+4, r24	; 0x04
		button5 = GetBit(~PINB, 4);
 824:	83 e2       	ldi	r24, 0x23	; 35
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	fc 01       	movw	r30, r24
 82a:	80 81       	ld	r24, Z
 82c:	80 95       	com	r24
 82e:	64 e0       	ldi	r22, 0x04	; 4
 830:	0e 94 cc 02 	call	0x598	; 0x598 <GetBit>
 834:	8d 83       	std	Y+5, r24	; 0x05
		spin_knob = GetBit(PINA, 2);
 836:	80 e2       	ldi	r24, 0x20	; 32
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	fc 01       	movw	r30, r24
 83c:	80 81       	ld	r24, Z
 83e:	62 e0       	ldi	r22, 0x02	; 2
 840:	0e 94 cc 02 	call	0x598	; 0x598 <GetBit>
 844:	8e 83       	std	Y+6, r24	; 0x06

		if (button1 && USART_IsSendReady(0)) {
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	88 23       	and	r24, r24
 84a:	81 f0       	breq	.+32     	; 0x86c <main+0xf4>
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 852:	88 23       	and	r24, r24
 854:	59 f0       	breq	.+22     	; 0x86c <main+0xf4>
			if (USART_IsSendReady(0)) {
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 85c:	88 23       	and	r24, r24
 85e:	29 f0       	breq	.+10     	; 0x86a <main+0xf2>
				USART_Send(CODE_BUTTON1, 0);
 860:	80 91 05 01 	lds	r24, 0x0105
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Send>
		button4 = GetBit(~PINB, 3);
		button5 = GetBit(~PINB, 4);
		spin_knob = GetBit(PINA, 2);

		if (button1 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
 86a:	71 c0       	rjmp	.+226    	; 0x94e <main+0x1d6>
				USART_Send(CODE_BUTTON1, 0);
			}
		} else if (button2 && USART_IsSendReady(0)) {
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	88 23       	and	r24, r24
 870:	81 f0       	breq	.+32     	; 0x892 <main+0x11a>
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 878:	88 23       	and	r24, r24
 87a:	59 f0       	breq	.+22     	; 0x892 <main+0x11a>
			if (USART_IsSendReady(0)) {
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 882:	88 23       	and	r24, r24
 884:	29 f0       	breq	.+10     	; 0x890 <main+0x118>
				USART_Send(CODE_BUTTON2, 0);
 886:	80 91 06 01 	lds	r24, 0x0106
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Send>
		if (button1 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
				USART_Send(CODE_BUTTON1, 0);
			}
		} else if (button2 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
 890:	5e c0       	rjmp	.+188    	; 0x94e <main+0x1d6>
				USART_Send(CODE_BUTTON2, 0);
			}
		} else if (button3 && USART_IsSendReady(0)) {
 892:	8b 81       	ldd	r24, Y+3	; 0x03
 894:	88 23       	and	r24, r24
 896:	81 f0       	breq	.+32     	; 0x8b8 <main+0x140>
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 89e:	88 23       	and	r24, r24
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <main+0x140>
			if (USART_IsSendReady(0)) {
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 8a8:	88 23       	and	r24, r24
 8aa:	29 f0       	breq	.+10     	; 0x8b6 <main+0x13e>
				USART_Send(CODE_BUTTON3, 0);
 8ac:	80 91 07 01 	lds	r24, 0x0107
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Send>
		} else if (button2 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
				USART_Send(CODE_BUTTON2, 0);
			}
		} else if (button3 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
 8b6:	4b c0       	rjmp	.+150    	; 0x94e <main+0x1d6>
				USART_Send(CODE_BUTTON3, 0);
			}
		} else if (button4 && USART_IsSendReady(0)) {
 8b8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ba:	88 23       	and	r24, r24
 8bc:	81 f0       	breq	.+32     	; 0x8de <main+0x166>
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 8c4:	88 23       	and	r24, r24
 8c6:	59 f0       	breq	.+22     	; 0x8de <main+0x166>
			if (USART_IsSendReady(0)) {
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 8ce:	88 23       	and	r24, r24
 8d0:	29 f0       	breq	.+10     	; 0x8dc <main+0x164>
				USART_Send(CODE_BUTTON4, 0);
 8d2:	80 91 08 01 	lds	r24, 0x0108
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Send>
		} else if (button3 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
				USART_Send(CODE_BUTTON3, 0);
			}
		} else if (button4 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
 8dc:	38 c0       	rjmp	.+112    	; 0x94e <main+0x1d6>
				USART_Send(CODE_BUTTON4, 0);
			}
		} else if (button5 && USART_IsSendReady(0)) {
 8de:	8d 81       	ldd	r24, Y+5	; 0x05
 8e0:	88 23       	and	r24, r24
 8e2:	81 f0       	breq	.+32     	; 0x904 <main+0x18c>
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 8ea:	88 23       	and	r24, r24
 8ec:	59 f0       	breq	.+22     	; 0x904 <main+0x18c>
			if (USART_IsSendReady(0)) {
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 8f4:	88 23       	and	r24, r24
 8f6:	29 f0       	breq	.+10     	; 0x902 <main+0x18a>
				USART_Send(CODE_BUTTON5, 0);
 8f8:	80 91 09 01 	lds	r24, 0x0109
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Send>
		} else if (button4 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
				USART_Send(CODE_BUTTON4, 0);
			}
		} else if (button5 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
 902:	25 c0       	rjmp	.+74     	; 0x94e <main+0x1d6>
				USART_Send(CODE_BUTTON5, 0);
			}
		} else if (spin_knob && USART_IsSendReady(0)) {
 904:	8e 81       	ldd	r24, Y+6	; 0x06
 906:	88 23       	and	r24, r24
 908:	81 f0       	breq	.+32     	; 0x92a <main+0x1b2>
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 910:	88 23       	and	r24, r24
 912:	59 f0       	breq	.+22     	; 0x92a <main+0x1b2>
			if (USART_IsSendReady(0)) {
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 91a:	88 23       	and	r24, r24
 91c:	29 f0       	breq	.+10     	; 0x928 <main+0x1b0>
				USART_Send(CODE_SPINKNOB, 0);
 91e:	80 91 0a 01 	lds	r24, 0x010A
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Send>
		} else if (button5 && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
				USART_Send(CODE_BUTTON5, 0);
			}
		} else if (spin_knob && USART_IsSendReady(0)) {
			if (USART_IsSendReady(0)) {
 928:	12 c0       	rjmp	.+36     	; 0x94e <main+0x1d6>
				USART_Send(CODE_SPINKNOB, 0);
			}
		} else if (USART_IsSendReady(0)) {
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 930:	88 23       	and	r24, r24
 932:	09 f4       	brne	.+2      	; 0x936 <main+0x1be>
 934:	50 cf       	rjmp	.-352    	; 0x7d6 <main+0x5e>
			if (USART_IsSendReady(0)) {
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	0e 94 ab 00 	call	0x156	; 0x156 <USART_IsSendReady>
 93c:	88 23       	and	r24, r24
 93e:	09 f4       	brne	.+2      	; 0x942 <main+0x1ca>
 940:	4c cf       	rjmp	.-360    	; 0x7da <main+0x62>
				USART_Send(CODE_NOTHING, 0);
 942:	80 91 04 01 	lds	r24, 0x0104
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	0e 94 1c 01 	call	0x238	; 0x238 <USART_Send>
			}
		}			
    }
 94c:	47 cf       	rjmp	.-370    	; 0x7dc <main+0x64>
 94e:	46 cf       	rjmp	.-372    	; 0x7dc <main+0x64>

00000950 <LCD_ClearScreen>:
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
 950:	df 93       	push	r29
 952:	cf 93       	push	r28
 954:	cd b7       	in	r28, 0x3d	; 61
 956:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_WriteCommand>
}
 95e:	cf 91       	pop	r28
 960:	df 91       	pop	r29
 962:	08 95       	ret

00000964 <LCD_init>:

void LCD_init(void) {
 964:	df 93       	push	r29
 966:	cf 93       	push	r28
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
 96c:	84 e6       	ldi	r24, 0x64	; 100
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 6e 05 	call	0xadc	; 0xadc <delay_ms>
	LCD_WriteCommand(0x38);
 974:	88 e3       	ldi	r24, 0x38	; 56
 976:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 97a:	86 e0       	ldi	r24, 0x06	; 6
 97c:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 980:	8f e0       	ldi	r24, 0x0F	; 15
 982:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_WriteCommand>
	delay_ms(10);						 
 98c:	8a e0       	ldi	r24, 0x0A	; 10
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 6e 05 	call	0xadc	; 0xadc <delay_ms>
}
 994:	cf 91       	pop	r28
 996:	df 91       	pop	r29
 998:	08 95       	ret

0000099a <LCD_WriteCommand>:

void LCD_WriteCommand (unsigned char Command) {
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	0f 92       	push	r0
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
 9a6:	8b e2       	ldi	r24, 0x2B	; 43
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	2b e2       	ldi	r18, 0x2B	; 43
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	f9 01       	movw	r30, r18
 9b0:	20 81       	ld	r18, Z
 9b2:	2f 7b       	andi	r18, 0xBF	; 191
 9b4:	fc 01       	movw	r30, r24
 9b6:	20 83       	st	Z, r18
   DATA_BUS = Command;
 9b8:	88 e2       	ldi	r24, 0x28	; 40
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	29 81       	ldd	r18, Y+1	; 0x01
 9be:	fc 01       	movw	r30, r24
 9c0:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
 9c2:	8b e2       	ldi	r24, 0x2B	; 43
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	2b e2       	ldi	r18, 0x2B	; 43
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	f9 01       	movw	r30, r18
 9cc:	20 81       	ld	r18, Z
 9ce:	20 68       	ori	r18, 0x80	; 128
 9d0:	fc 01       	movw	r30, r24
 9d2:	20 83       	st	Z, r18
   asm("nop");
 9d4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 9d6:	8b e2       	ldi	r24, 0x2B	; 43
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	2b e2       	ldi	r18, 0x2B	; 43
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	f9 01       	movw	r30, r18
 9e0:	20 81       	ld	r18, Z
 9e2:	2f 77       	andi	r18, 0x7F	; 127
 9e4:	fc 01       	movw	r30, r24
 9e6:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 9e8:	82 e0       	ldi	r24, 0x02	; 2
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 6e 05 	call	0xadc	; 0xadc <delay_ms>
}
 9f0:	0f 90       	pop	r0
 9f2:	cf 91       	pop	r28
 9f4:	df 91       	pop	r29
 9f6:	08 95       	ret

000009f8 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
 9f8:	df 93       	push	r29
 9fa:	cf 93       	push	r28
 9fc:	0f 92       	push	r0
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
 a02:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
 a04:	8b e2       	ldi	r24, 0x2B	; 43
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	2b e2       	ldi	r18, 0x2B	; 43
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	f9 01       	movw	r30, r18
 a0e:	20 81       	ld	r18, Z
 a10:	20 64       	ori	r18, 0x40	; 64
 a12:	fc 01       	movw	r30, r24
 a14:	20 83       	st	Z, r18
   DATA_BUS = Data;
 a16:	88 e2       	ldi	r24, 0x28	; 40
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	29 81       	ldd	r18, Y+1	; 0x01
 a1c:	fc 01       	movw	r30, r24
 a1e:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
 a20:	8b e2       	ldi	r24, 0x2B	; 43
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	2b e2       	ldi	r18, 0x2B	; 43
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	f9 01       	movw	r30, r18
 a2a:	20 81       	ld	r18, Z
 a2c:	20 68       	ori	r18, 0x80	; 128
 a2e:	fc 01       	movw	r30, r24
 a30:	20 83       	st	Z, r18
   asm("nop");
 a32:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 a34:	8b e2       	ldi	r24, 0x2B	; 43
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	2b e2       	ldi	r18, 0x2B	; 43
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	f9 01       	movw	r30, r18
 a3e:	20 81       	ld	r18, Z
 a40:	2f 77       	andi	r18, 0x7F	; 127
 a42:	fc 01       	movw	r30, r24
 a44:	20 83       	st	Z, r18
   delay_ms(1);
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 6e 05 	call	0xadc	; 0xadc <delay_ms>
}
 a4e:	0f 90       	pop	r0
 a50:	cf 91       	pop	r28
 a52:	df 91       	pop	r29
 a54:	08 95       	ret

00000a56 <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 a56:	df 93       	push	r29
 a58:	cf 93       	push	r28
 a5a:	00 d0       	rcall	.+0      	; 0xa5c <LCD_DisplayString+0x6>
 a5c:	00 d0       	rcall	.+0      	; 0xa5e <LCD_DisplayString+0x8>
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
 a62:	8a 83       	std	Y+2, r24	; 0x02
 a64:	7c 83       	std	Y+4, r23	; 0x04
 a66:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
 a68:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_ClearScreen>
   unsigned char c = column;
 a6c:	8a 81       	ldd	r24, Y+2	; 0x02
 a6e:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
 a70:	12 c0       	rjmp	.+36     	; 0xa96 <LCD_DisplayString+0x40>
      LCD_Cursor(c++);
 a72:	89 81       	ldd	r24, Y+1	; 0x01
 a74:	99 81       	ldd	r25, Y+1	; 0x01
 a76:	9f 5f       	subi	r25, 0xFF	; 255
 a78:	99 83       	std	Y+1, r25	; 0x01
 a7a:	0e 94 58 05 	call	0xab0	; 0xab0 <LCD_Cursor>
      LCD_WriteData(*string++);
 a7e:	8b 81       	ldd	r24, Y+3	; 0x03
 a80:	9c 81       	ldd	r25, Y+4	; 0x04
 a82:	fc 01       	movw	r30, r24
 a84:	20 81       	ld	r18, Z
 a86:	8b 81       	ldd	r24, Y+3	; 0x03
 a88:	9c 81       	ldd	r25, Y+4	; 0x04
 a8a:	01 96       	adiw	r24, 0x01	; 1
 a8c:	9c 83       	std	Y+4, r25	; 0x04
 a8e:	8b 83       	std	Y+3, r24	; 0x03
 a90:	82 2f       	mov	r24, r18
 a92:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 a96:	8b 81       	ldd	r24, Y+3	; 0x03
 a98:	9c 81       	ldd	r25, Y+4	; 0x04
 a9a:	fc 01       	movw	r30, r24
 a9c:	80 81       	ld	r24, Z
 a9e:	88 23       	and	r24, r24
 aa0:	41 f7       	brne	.-48     	; 0xa72 <LCD_DisplayString+0x1c>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 aa2:	0f 90       	pop	r0
 aa4:	0f 90       	pop	r0
 aa6:	0f 90       	pop	r0
 aa8:	0f 90       	pop	r0
 aaa:	cf 91       	pop	r28
 aac:	df 91       	pop	r29
 aae:	08 95       	ret

00000ab0 <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
 ab0:	df 93       	push	r29
 ab2:	cf 93       	push	r28
 ab4:	0f 92       	push	r0
 ab6:	cd b7       	in	r28, 0x3d	; 61
 ab8:	de b7       	in	r29, 0x3e	; 62
 aba:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	81 31       	cpi	r24, 0x11	; 17
 ac0:	28 f4       	brcc	.+10     	; 0xacc <LCD_Cursor+0x1c>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 ac2:	89 81       	ldd	r24, Y+1	; 0x01
 ac4:	81 58       	subi	r24, 0x81	; 129
 ac6:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_WriteCommand>
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <LCD_Cursor+0x24>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	81 55       	subi	r24, 0x51	; 81
 ad0:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
 ad4:	0f 90       	pop	r0
 ad6:	cf 91       	pop	r28
 ad8:	df 91       	pop	r29
 ada:	08 95       	ret

00000adc <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 adc:	df 93       	push	r29
 ade:	cf 93       	push	r28
 ae0:	00 d0       	rcall	.+0      	; 0xae2 <delay_ms+0x6>
 ae2:	00 d0       	rcall	.+0      	; 0xae4 <delay_ms+0x8>
 ae4:	00 d0       	rcall	.+0      	; 0xae6 <delay_ms+0xa>
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
 aea:	9e 83       	std	Y+6, r25	; 0x06
 aec:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
 aee:	1a 82       	std	Y+2, r1	; 0x02
 af0:	19 82       	std	Y+1, r1	; 0x01
 af2:	14 c0       	rjmp	.+40     	; 0xb1c <delay_ms+0x40>
    for(j=0;j<775;j++)
 af4:	1c 82       	std	Y+4, r1	; 0x04
 af6:	1b 82       	std	Y+3, r1	; 0x03
 af8:	06 c0       	rjmp	.+12     	; 0xb06 <delay_ms+0x2a>
  {
   asm("nop");
 afa:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 afc:	8b 81       	ldd	r24, Y+3	; 0x03
 afe:	9c 81       	ldd	r25, Y+4	; 0x04
 b00:	01 96       	adiw	r24, 0x01	; 1
 b02:	9c 83       	std	Y+4, r25	; 0x04
 b04:	8b 83       	std	Y+3, r24	; 0x03
 b06:	8b 81       	ldd	r24, Y+3	; 0x03
 b08:	9c 81       	ldd	r25, Y+4	; 0x04
 b0a:	23 e0       	ldi	r18, 0x03	; 3
 b0c:	87 30       	cpi	r24, 0x07	; 7
 b0e:	92 07       	cpc	r25, r18
 b10:	a4 f3       	brlt	.-24     	; 0xafa <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 b12:	89 81       	ldd	r24, Y+1	; 0x01
 b14:	9a 81       	ldd	r25, Y+2	; 0x02
 b16:	01 96       	adiw	r24, 0x01	; 1
 b18:	9a 83       	std	Y+2, r25	; 0x02
 b1a:	89 83       	std	Y+1, r24	; 0x01
 b1c:	29 81       	ldd	r18, Y+1	; 0x01
 b1e:	3a 81       	ldd	r19, Y+2	; 0x02
 b20:	8d 81       	ldd	r24, Y+5	; 0x05
 b22:	9e 81       	ldd	r25, Y+6	; 0x06
 b24:	28 17       	cp	r18, r24
 b26:	39 07       	cpc	r19, r25
 b28:	2c f3       	brlt	.-54     	; 0xaf4 <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
 b2a:	26 96       	adiw	r28, 0x06	; 6
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	cd bf       	out	0x3d, r28	; 61
 b36:	cf 91       	pop	r28
 b38:	df 91       	pop	r29
 b3a:	08 95       	ret

00000b3c <__cmpsf2>:
 b3c:	9c d0       	rcall	.+312    	; 0xc76 <__fp_cmp>
 b3e:	08 f4       	brcc	.+2      	; 0xb42 <__cmpsf2+0x6>
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	08 95       	ret

00000b44 <__divsf3>:
 b44:	0c d0       	rcall	.+24     	; 0xb5e <__divsf3x>
 b46:	d2 c0       	rjmp	.+420    	; 0xcec <__fp_round>
 b48:	ca d0       	rcall	.+404    	; 0xcde <__fp_pscB>
 b4a:	40 f0       	brcs	.+16     	; 0xb5c <__divsf3+0x18>
 b4c:	c1 d0       	rcall	.+386    	; 0xcd0 <__fp_pscA>
 b4e:	30 f0       	brcs	.+12     	; 0xb5c <__divsf3+0x18>
 b50:	21 f4       	brne	.+8      	; 0xb5a <__divsf3+0x16>
 b52:	5f 3f       	cpi	r21, 0xFF	; 255
 b54:	19 f0       	breq	.+6      	; 0xb5c <__divsf3+0x18>
 b56:	b3 c0       	rjmp	.+358    	; 0xcbe <__fp_inf>
 b58:	51 11       	cpse	r21, r1
 b5a:	fc c0       	rjmp	.+504    	; 0xd54 <__fp_szero>
 b5c:	b6 c0       	rjmp	.+364    	; 0xcca <__fp_nan>

00000b5e <__divsf3x>:
 b5e:	d7 d0       	rcall	.+430    	; 0xd0e <__fp_split3>
 b60:	98 f3       	brcs	.-26     	; 0xb48 <__divsf3+0x4>

00000b62 <__divsf3_pse>:
 b62:	99 23       	and	r25, r25
 b64:	c9 f3       	breq	.-14     	; 0xb58 <__divsf3+0x14>
 b66:	55 23       	and	r21, r21
 b68:	b1 f3       	breq	.-20     	; 0xb56 <__divsf3+0x12>
 b6a:	95 1b       	sub	r25, r21
 b6c:	55 0b       	sbc	r21, r21
 b6e:	bb 27       	eor	r27, r27
 b70:	aa 27       	eor	r26, r26
 b72:	62 17       	cp	r22, r18
 b74:	73 07       	cpc	r23, r19
 b76:	84 07       	cpc	r24, r20
 b78:	38 f0       	brcs	.+14     	; 0xb88 <__divsf3_pse+0x26>
 b7a:	9f 5f       	subi	r25, 0xFF	; 255
 b7c:	5f 4f       	sbci	r21, 0xFF	; 255
 b7e:	22 0f       	add	r18, r18
 b80:	33 1f       	adc	r19, r19
 b82:	44 1f       	adc	r20, r20
 b84:	aa 1f       	adc	r26, r26
 b86:	a9 f3       	breq	.-22     	; 0xb72 <__divsf3_pse+0x10>
 b88:	33 d0       	rcall	.+102    	; 0xbf0 <__divsf3_pse+0x8e>
 b8a:	0e 2e       	mov	r0, r30
 b8c:	3a f0       	brmi	.+14     	; 0xb9c <__divsf3_pse+0x3a>
 b8e:	e0 e8       	ldi	r30, 0x80	; 128
 b90:	30 d0       	rcall	.+96     	; 0xbf2 <__divsf3_pse+0x90>
 b92:	91 50       	subi	r25, 0x01	; 1
 b94:	50 40       	sbci	r21, 0x00	; 0
 b96:	e6 95       	lsr	r30
 b98:	00 1c       	adc	r0, r0
 b9a:	ca f7       	brpl	.-14     	; 0xb8e <__divsf3_pse+0x2c>
 b9c:	29 d0       	rcall	.+82     	; 0xbf0 <__divsf3_pse+0x8e>
 b9e:	fe 2f       	mov	r31, r30
 ba0:	27 d0       	rcall	.+78     	; 0xbf0 <__divsf3_pse+0x8e>
 ba2:	66 0f       	add	r22, r22
 ba4:	77 1f       	adc	r23, r23
 ba6:	88 1f       	adc	r24, r24
 ba8:	bb 1f       	adc	r27, r27
 baa:	26 17       	cp	r18, r22
 bac:	37 07       	cpc	r19, r23
 bae:	48 07       	cpc	r20, r24
 bb0:	ab 07       	cpc	r26, r27
 bb2:	b0 e8       	ldi	r27, 0x80	; 128
 bb4:	09 f0       	breq	.+2      	; 0xbb8 <__divsf3_pse+0x56>
 bb6:	bb 0b       	sbc	r27, r27
 bb8:	80 2d       	mov	r24, r0
 bba:	bf 01       	movw	r22, r30
 bbc:	ff 27       	eor	r31, r31
 bbe:	93 58       	subi	r25, 0x83	; 131
 bc0:	5f 4f       	sbci	r21, 0xFF	; 255
 bc2:	2a f0       	brmi	.+10     	; 0xbce <__divsf3_pse+0x6c>
 bc4:	9e 3f       	cpi	r25, 0xFE	; 254
 bc6:	51 05       	cpc	r21, r1
 bc8:	68 f0       	brcs	.+26     	; 0xbe4 <__divsf3_pse+0x82>
 bca:	79 c0       	rjmp	.+242    	; 0xcbe <__fp_inf>
 bcc:	c3 c0       	rjmp	.+390    	; 0xd54 <__fp_szero>
 bce:	5f 3f       	cpi	r21, 0xFF	; 255
 bd0:	ec f3       	brlt	.-6      	; 0xbcc <__divsf3_pse+0x6a>
 bd2:	98 3e       	cpi	r25, 0xE8	; 232
 bd4:	dc f3       	brlt	.-10     	; 0xbcc <__divsf3_pse+0x6a>
 bd6:	86 95       	lsr	r24
 bd8:	77 95       	ror	r23
 bda:	67 95       	ror	r22
 bdc:	b7 95       	ror	r27
 bde:	f7 95       	ror	r31
 be0:	9f 5f       	subi	r25, 0xFF	; 255
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__divsf3_pse+0x74>
 be4:	88 0f       	add	r24, r24
 be6:	91 1d       	adc	r25, r1
 be8:	96 95       	lsr	r25
 bea:	87 95       	ror	r24
 bec:	97 f9       	bld	r25, 7
 bee:	08 95       	ret
 bf0:	e1 e0       	ldi	r30, 0x01	; 1
 bf2:	66 0f       	add	r22, r22
 bf4:	77 1f       	adc	r23, r23
 bf6:	88 1f       	adc	r24, r24
 bf8:	bb 1f       	adc	r27, r27
 bfa:	62 17       	cp	r22, r18
 bfc:	73 07       	cpc	r23, r19
 bfe:	84 07       	cpc	r24, r20
 c00:	ba 07       	cpc	r27, r26
 c02:	20 f0       	brcs	.+8      	; 0xc0c <__divsf3_pse+0xaa>
 c04:	62 1b       	sub	r22, r18
 c06:	73 0b       	sbc	r23, r19
 c08:	84 0b       	sbc	r24, r20
 c0a:	ba 0b       	sbc	r27, r26
 c0c:	ee 1f       	adc	r30, r30
 c0e:	88 f7       	brcc	.-30     	; 0xbf2 <__divsf3_pse+0x90>
 c10:	e0 95       	com	r30
 c12:	08 95       	ret

00000c14 <__fixsfsi>:
 c14:	04 d0       	rcall	.+8      	; 0xc1e <__fixunssfsi>
 c16:	68 94       	set
 c18:	b1 11       	cpse	r27, r1
 c1a:	9c c0       	rjmp	.+312    	; 0xd54 <__fp_szero>
 c1c:	08 95       	ret

00000c1e <__fixunssfsi>:
 c1e:	7f d0       	rcall	.+254    	; 0xd1e <__fp_splitA>
 c20:	88 f0       	brcs	.+34     	; 0xc44 <__fixunssfsi+0x26>
 c22:	9f 57       	subi	r25, 0x7F	; 127
 c24:	90 f0       	brcs	.+36     	; 0xc4a <__fixunssfsi+0x2c>
 c26:	b9 2f       	mov	r27, r25
 c28:	99 27       	eor	r25, r25
 c2a:	b7 51       	subi	r27, 0x17	; 23
 c2c:	a0 f0       	brcs	.+40     	; 0xc56 <__fixunssfsi+0x38>
 c2e:	d1 f0       	breq	.+52     	; 0xc64 <__fixunssfsi+0x46>
 c30:	66 0f       	add	r22, r22
 c32:	77 1f       	adc	r23, r23
 c34:	88 1f       	adc	r24, r24
 c36:	99 1f       	adc	r25, r25
 c38:	1a f0       	brmi	.+6      	; 0xc40 <__fixunssfsi+0x22>
 c3a:	ba 95       	dec	r27
 c3c:	c9 f7       	brne	.-14     	; 0xc30 <__fixunssfsi+0x12>
 c3e:	12 c0       	rjmp	.+36     	; 0xc64 <__fixunssfsi+0x46>
 c40:	b1 30       	cpi	r27, 0x01	; 1
 c42:	81 f0       	breq	.+32     	; 0xc64 <__fixunssfsi+0x46>
 c44:	86 d0       	rcall	.+268    	; 0xd52 <__fp_zero>
 c46:	b1 e0       	ldi	r27, 0x01	; 1
 c48:	08 95       	ret
 c4a:	83 c0       	rjmp	.+262    	; 0xd52 <__fp_zero>
 c4c:	67 2f       	mov	r22, r23
 c4e:	78 2f       	mov	r23, r24
 c50:	88 27       	eor	r24, r24
 c52:	b8 5f       	subi	r27, 0xF8	; 248
 c54:	39 f0       	breq	.+14     	; 0xc64 <__fixunssfsi+0x46>
 c56:	b9 3f       	cpi	r27, 0xF9	; 249
 c58:	cc f3       	brlt	.-14     	; 0xc4c <__fixunssfsi+0x2e>
 c5a:	86 95       	lsr	r24
 c5c:	77 95       	ror	r23
 c5e:	67 95       	ror	r22
 c60:	b3 95       	inc	r27
 c62:	d9 f7       	brne	.-10     	; 0xc5a <__fixunssfsi+0x3c>
 c64:	3e f4       	brtc	.+14     	; 0xc74 <__fixunssfsi+0x56>
 c66:	90 95       	com	r25
 c68:	80 95       	com	r24
 c6a:	70 95       	com	r23
 c6c:	61 95       	neg	r22
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255
 c70:	8f 4f       	sbci	r24, 0xFF	; 255
 c72:	9f 4f       	sbci	r25, 0xFF	; 255
 c74:	08 95       	ret

00000c76 <__fp_cmp>:
 c76:	99 0f       	add	r25, r25
 c78:	00 08       	sbc	r0, r0
 c7a:	55 0f       	add	r21, r21
 c7c:	aa 0b       	sbc	r26, r26
 c7e:	e0 e8       	ldi	r30, 0x80	; 128
 c80:	fe ef       	ldi	r31, 0xFE	; 254
 c82:	16 16       	cp	r1, r22
 c84:	17 06       	cpc	r1, r23
 c86:	e8 07       	cpc	r30, r24
 c88:	f9 07       	cpc	r31, r25
 c8a:	c0 f0       	brcs	.+48     	; 0xcbc <__fp_cmp+0x46>
 c8c:	12 16       	cp	r1, r18
 c8e:	13 06       	cpc	r1, r19
 c90:	e4 07       	cpc	r30, r20
 c92:	f5 07       	cpc	r31, r21
 c94:	98 f0       	brcs	.+38     	; 0xcbc <__fp_cmp+0x46>
 c96:	62 1b       	sub	r22, r18
 c98:	73 0b       	sbc	r23, r19
 c9a:	84 0b       	sbc	r24, r20
 c9c:	95 0b       	sbc	r25, r21
 c9e:	39 f4       	brne	.+14     	; 0xcae <__fp_cmp+0x38>
 ca0:	0a 26       	eor	r0, r26
 ca2:	61 f0       	breq	.+24     	; 0xcbc <__fp_cmp+0x46>
 ca4:	23 2b       	or	r18, r19
 ca6:	24 2b       	or	r18, r20
 ca8:	25 2b       	or	r18, r21
 caa:	21 f4       	brne	.+8      	; 0xcb4 <__fp_cmp+0x3e>
 cac:	08 95       	ret
 cae:	0a 26       	eor	r0, r26
 cb0:	09 f4       	brne	.+2      	; 0xcb4 <__fp_cmp+0x3e>
 cb2:	a1 40       	sbci	r26, 0x01	; 1
 cb4:	a6 95       	lsr	r26
 cb6:	8f ef       	ldi	r24, 0xFF	; 255
 cb8:	81 1d       	adc	r24, r1
 cba:	81 1d       	adc	r24, r1
 cbc:	08 95       	ret

00000cbe <__fp_inf>:
 cbe:	97 f9       	bld	r25, 7
 cc0:	9f 67       	ori	r25, 0x7F	; 127
 cc2:	80 e8       	ldi	r24, 0x80	; 128
 cc4:	70 e0       	ldi	r23, 0x00	; 0
 cc6:	60 e0       	ldi	r22, 0x00	; 0
 cc8:	08 95       	ret

00000cca <__fp_nan>:
 cca:	9f ef       	ldi	r25, 0xFF	; 255
 ccc:	80 ec       	ldi	r24, 0xC0	; 192
 cce:	08 95       	ret

00000cd0 <__fp_pscA>:
 cd0:	00 24       	eor	r0, r0
 cd2:	0a 94       	dec	r0
 cd4:	16 16       	cp	r1, r22
 cd6:	17 06       	cpc	r1, r23
 cd8:	18 06       	cpc	r1, r24
 cda:	09 06       	cpc	r0, r25
 cdc:	08 95       	ret

00000cde <__fp_pscB>:
 cde:	00 24       	eor	r0, r0
 ce0:	0a 94       	dec	r0
 ce2:	12 16       	cp	r1, r18
 ce4:	13 06       	cpc	r1, r19
 ce6:	14 06       	cpc	r1, r20
 ce8:	05 06       	cpc	r0, r21
 cea:	08 95       	ret

00000cec <__fp_round>:
 cec:	09 2e       	mov	r0, r25
 cee:	03 94       	inc	r0
 cf0:	00 0c       	add	r0, r0
 cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0xc>
 cf4:	88 23       	and	r24, r24
 cf6:	52 f0       	brmi	.+20     	; 0xd0c <__fp_round+0x20>
 cf8:	bb 0f       	add	r27, r27
 cfa:	40 f4       	brcc	.+16     	; 0xd0c <__fp_round+0x20>
 cfc:	bf 2b       	or	r27, r31
 cfe:	11 f4       	brne	.+4      	; 0xd04 <__fp_round+0x18>
 d00:	60 ff       	sbrs	r22, 0
 d02:	04 c0       	rjmp	.+8      	; 0xd0c <__fp_round+0x20>
 d04:	6f 5f       	subi	r22, 0xFF	; 255
 d06:	7f 4f       	sbci	r23, 0xFF	; 255
 d08:	8f 4f       	sbci	r24, 0xFF	; 255
 d0a:	9f 4f       	sbci	r25, 0xFF	; 255
 d0c:	08 95       	ret

00000d0e <__fp_split3>:
 d0e:	57 fd       	sbrc	r21, 7
 d10:	90 58       	subi	r25, 0x80	; 128
 d12:	44 0f       	add	r20, r20
 d14:	55 1f       	adc	r21, r21
 d16:	59 f0       	breq	.+22     	; 0xd2e <__fp_splitA+0x10>
 d18:	5f 3f       	cpi	r21, 0xFF	; 255
 d1a:	71 f0       	breq	.+28     	; 0xd38 <__fp_splitA+0x1a>
 d1c:	47 95       	ror	r20

00000d1e <__fp_splitA>:
 d1e:	88 0f       	add	r24, r24
 d20:	97 fb       	bst	r25, 7
 d22:	99 1f       	adc	r25, r25
 d24:	61 f0       	breq	.+24     	; 0xd3e <__fp_splitA+0x20>
 d26:	9f 3f       	cpi	r25, 0xFF	; 255
 d28:	79 f0       	breq	.+30     	; 0xd48 <__fp_splitA+0x2a>
 d2a:	87 95       	ror	r24
 d2c:	08 95       	ret
 d2e:	12 16       	cp	r1, r18
 d30:	13 06       	cpc	r1, r19
 d32:	14 06       	cpc	r1, r20
 d34:	55 1f       	adc	r21, r21
 d36:	f2 cf       	rjmp	.-28     	; 0xd1c <__fp_split3+0xe>
 d38:	46 95       	lsr	r20
 d3a:	f1 df       	rcall	.-30     	; 0xd1e <__fp_splitA>
 d3c:	08 c0       	rjmp	.+16     	; 0xd4e <__fp_splitA+0x30>
 d3e:	16 16       	cp	r1, r22
 d40:	17 06       	cpc	r1, r23
 d42:	18 06       	cpc	r1, r24
 d44:	99 1f       	adc	r25, r25
 d46:	f1 cf       	rjmp	.-30     	; 0xd2a <__fp_splitA+0xc>
 d48:	86 95       	lsr	r24
 d4a:	71 05       	cpc	r23, r1
 d4c:	61 05       	cpc	r22, r1
 d4e:	08 94       	sec
 d50:	08 95       	ret

00000d52 <__fp_zero>:
 d52:	e8 94       	clt

00000d54 <__fp_szero>:
 d54:	bb 27       	eor	r27, r27
 d56:	66 27       	eor	r22, r22
 d58:	77 27       	eor	r23, r23
 d5a:	cb 01       	movw	r24, r22
 d5c:	97 f9       	bld	r25, 7
 d5e:	08 95       	ret

00000d60 <__gesf2>:
 d60:	8a df       	rcall	.-236    	; 0xc76 <__fp_cmp>
 d62:	08 f4       	brcc	.+2      	; 0xd66 <__gesf2+0x6>
 d64:	8f ef       	ldi	r24, 0xFF	; 255
 d66:	08 95       	ret

00000d68 <__mulsf3>:
 d68:	0b d0       	rcall	.+22     	; 0xd80 <__mulsf3x>
 d6a:	c0 cf       	rjmp	.-128    	; 0xcec <__fp_round>
 d6c:	b1 df       	rcall	.-158    	; 0xcd0 <__fp_pscA>
 d6e:	28 f0       	brcs	.+10     	; 0xd7a <__mulsf3+0x12>
 d70:	b6 df       	rcall	.-148    	; 0xcde <__fp_pscB>
 d72:	18 f0       	brcs	.+6      	; 0xd7a <__mulsf3+0x12>
 d74:	95 23       	and	r25, r21
 d76:	09 f0       	breq	.+2      	; 0xd7a <__mulsf3+0x12>
 d78:	a2 cf       	rjmp	.-188    	; 0xcbe <__fp_inf>
 d7a:	a7 cf       	rjmp	.-178    	; 0xcca <__fp_nan>
 d7c:	11 24       	eor	r1, r1
 d7e:	ea cf       	rjmp	.-44     	; 0xd54 <__fp_szero>

00000d80 <__mulsf3x>:
 d80:	c6 df       	rcall	.-116    	; 0xd0e <__fp_split3>
 d82:	a0 f3       	brcs	.-24     	; 0xd6c <__mulsf3+0x4>

00000d84 <__mulsf3_pse>:
 d84:	95 9f       	mul	r25, r21
 d86:	d1 f3       	breq	.-12     	; 0xd7c <__mulsf3+0x14>
 d88:	95 0f       	add	r25, r21
 d8a:	50 e0       	ldi	r21, 0x00	; 0
 d8c:	55 1f       	adc	r21, r21
 d8e:	62 9f       	mul	r22, r18
 d90:	f0 01       	movw	r30, r0
 d92:	72 9f       	mul	r23, r18
 d94:	bb 27       	eor	r27, r27
 d96:	f0 0d       	add	r31, r0
 d98:	b1 1d       	adc	r27, r1
 d9a:	63 9f       	mul	r22, r19
 d9c:	aa 27       	eor	r26, r26
 d9e:	f0 0d       	add	r31, r0
 da0:	b1 1d       	adc	r27, r1
 da2:	aa 1f       	adc	r26, r26
 da4:	64 9f       	mul	r22, r20
 da6:	66 27       	eor	r22, r22
 da8:	b0 0d       	add	r27, r0
 daa:	a1 1d       	adc	r26, r1
 dac:	66 1f       	adc	r22, r22
 dae:	82 9f       	mul	r24, r18
 db0:	22 27       	eor	r18, r18
 db2:	b0 0d       	add	r27, r0
 db4:	a1 1d       	adc	r26, r1
 db6:	62 1f       	adc	r22, r18
 db8:	73 9f       	mul	r23, r19
 dba:	b0 0d       	add	r27, r0
 dbc:	a1 1d       	adc	r26, r1
 dbe:	62 1f       	adc	r22, r18
 dc0:	83 9f       	mul	r24, r19
 dc2:	a0 0d       	add	r26, r0
 dc4:	61 1d       	adc	r22, r1
 dc6:	22 1f       	adc	r18, r18
 dc8:	74 9f       	mul	r23, r20
 dca:	33 27       	eor	r19, r19
 dcc:	a0 0d       	add	r26, r0
 dce:	61 1d       	adc	r22, r1
 dd0:	23 1f       	adc	r18, r19
 dd2:	84 9f       	mul	r24, r20
 dd4:	60 0d       	add	r22, r0
 dd6:	21 1d       	adc	r18, r1
 dd8:	82 2f       	mov	r24, r18
 dda:	76 2f       	mov	r23, r22
 ddc:	6a 2f       	mov	r22, r26
 dde:	11 24       	eor	r1, r1
 de0:	9f 57       	subi	r25, 0x7F	; 127
 de2:	50 40       	sbci	r21, 0x00	; 0
 de4:	8a f0       	brmi	.+34     	; 0xe08 <__mulsf3_pse+0x84>
 de6:	e1 f0       	breq	.+56     	; 0xe20 <__mulsf3_pse+0x9c>
 de8:	88 23       	and	r24, r24
 dea:	4a f0       	brmi	.+18     	; 0xdfe <__mulsf3_pse+0x7a>
 dec:	ee 0f       	add	r30, r30
 dee:	ff 1f       	adc	r31, r31
 df0:	bb 1f       	adc	r27, r27
 df2:	66 1f       	adc	r22, r22
 df4:	77 1f       	adc	r23, r23
 df6:	88 1f       	adc	r24, r24
 df8:	91 50       	subi	r25, 0x01	; 1
 dfa:	50 40       	sbci	r21, 0x00	; 0
 dfc:	a9 f7       	brne	.-22     	; 0xde8 <__mulsf3_pse+0x64>
 dfe:	9e 3f       	cpi	r25, 0xFE	; 254
 e00:	51 05       	cpc	r21, r1
 e02:	70 f0       	brcs	.+28     	; 0xe20 <__mulsf3_pse+0x9c>
 e04:	5c cf       	rjmp	.-328    	; 0xcbe <__fp_inf>
 e06:	a6 cf       	rjmp	.-180    	; 0xd54 <__fp_szero>
 e08:	5f 3f       	cpi	r21, 0xFF	; 255
 e0a:	ec f3       	brlt	.-6      	; 0xe06 <__mulsf3_pse+0x82>
 e0c:	98 3e       	cpi	r25, 0xE8	; 232
 e0e:	dc f3       	brlt	.-10     	; 0xe06 <__mulsf3_pse+0x82>
 e10:	86 95       	lsr	r24
 e12:	77 95       	ror	r23
 e14:	67 95       	ror	r22
 e16:	b7 95       	ror	r27
 e18:	f7 95       	ror	r31
 e1a:	e7 95       	ror	r30
 e1c:	9f 5f       	subi	r25, 0xFF	; 255
 e1e:	c1 f7       	brne	.-16     	; 0xe10 <__mulsf3_pse+0x8c>
 e20:	fe 2b       	or	r31, r30
 e22:	88 0f       	add	r24, r24
 e24:	91 1d       	adc	r25, r1
 e26:	96 95       	lsr	r25
 e28:	87 95       	ror	r24
 e2a:	97 f9       	bld	r25, 7
 e2c:	08 95       	ret

00000e2e <__udivmodsi4>:
 e2e:	a1 e2       	ldi	r26, 0x21	; 33
 e30:	1a 2e       	mov	r1, r26
 e32:	aa 1b       	sub	r26, r26
 e34:	bb 1b       	sub	r27, r27
 e36:	fd 01       	movw	r30, r26
 e38:	0d c0       	rjmp	.+26     	; 0xe54 <__udivmodsi4_ep>

00000e3a <__udivmodsi4_loop>:
 e3a:	aa 1f       	adc	r26, r26
 e3c:	bb 1f       	adc	r27, r27
 e3e:	ee 1f       	adc	r30, r30
 e40:	ff 1f       	adc	r31, r31
 e42:	a2 17       	cp	r26, r18
 e44:	b3 07       	cpc	r27, r19
 e46:	e4 07       	cpc	r30, r20
 e48:	f5 07       	cpc	r31, r21
 e4a:	20 f0       	brcs	.+8      	; 0xe54 <__udivmodsi4_ep>
 e4c:	a2 1b       	sub	r26, r18
 e4e:	b3 0b       	sbc	r27, r19
 e50:	e4 0b       	sbc	r30, r20
 e52:	f5 0b       	sbc	r31, r21

00000e54 <__udivmodsi4_ep>:
 e54:	66 1f       	adc	r22, r22
 e56:	77 1f       	adc	r23, r23
 e58:	88 1f       	adc	r24, r24
 e5a:	99 1f       	adc	r25, r25
 e5c:	1a 94       	dec	r1
 e5e:	69 f7       	brne	.-38     	; 0xe3a <__udivmodsi4_loop>
 e60:	60 95       	com	r22
 e62:	70 95       	com	r23
 e64:	80 95       	com	r24
 e66:	90 95       	com	r25
 e68:	9b 01       	movw	r18, r22
 e6a:	ac 01       	movw	r20, r24
 e6c:	bd 01       	movw	r22, r26
 e6e:	cf 01       	movw	r24, r30
 e70:	08 95       	ret

00000e72 <_exit>:
 e72:	f8 94       	cli

00000e74 <__stop_program>:
 e74:	ff cf       	rjmp	.-2      	; 0xe74 <__stop_program>
