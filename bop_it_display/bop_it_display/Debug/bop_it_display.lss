
bop_it_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00001792  00001826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080023e  0080023e  00001964  2**0
                  ALLOC
  3 .stab         00001e60  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000097f  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00004143  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005d5  00000000  00000000  00004183  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001154  00000000  00000000  00004758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002be  00000000  00000000  000058ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e9c  00000000  00000000  00005b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00006a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000071c  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000089  00000000  00000000  00007344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e9       	ldi	r30, 0x92	; 146
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 33       	cpi	r26, 0x3E	; 62
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ae e3       	ldi	r26, 0x3E	; 62
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 37       	cpi	r26, 0x7E	; 126
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 22 07 	call	0xe44	; 0xe44 <main>
      c6:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initUSART>:
//Functionality - Initializes TX and RX on PORT D
//Parameter: usartNum specifies which USART is being initialized
//			 If usartNum != 1, default to USART0
//Returns: None
void initUSART(unsigned char usartNum)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	0f 92       	push	r0
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
      da:	89 81       	ldd	r24, Y+1	; 0x01
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	e1 f0       	breq	.+56     	; 0x118 <initUSART+0x4a>
		// Turn on the reception circuitry of USART0
		// Turn on receiver and transmitter
		// Use 8-bit character sizes 
		UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
      e0:	81 ec       	ldi	r24, 0xC1	; 193
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	21 ec       	ldi	r18, 0xC1	; 193
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	28 61       	ori	r18, 0x18	; 24
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
		UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
      f2:	82 ec       	ldi	r24, 0xC2	; 194
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	22 ec       	ldi	r18, 0xC2	; 194
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	26 60       	ori	r18, 0x06	; 6
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR0 register
		UBRR0L = BAUD_PRESCALE;
     104:	84 ec       	ldi	r24, 0xC4	; 196
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	23 e3       	ldi	r18, 0x33	; 51
     10a:	fc 01       	movw	r30, r24
     10c:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR0 register
		UBRR0H = (BAUD_PRESCALE >> 8);
     10e:	85 ec       	ldi	r24, 0xC5	; 197
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	fc 01       	movw	r30, r24
     114:	10 82       	st	Z, r1
     116:	1b c0       	rjmp	.+54     	; 0x14e <initUSART+0x80>
	}
	else {
		// Turn on the reception circuitry for USART1
		// Turn on receiver and transmitter
		// Use 8-bit character sizes
		UCSR1B |= (1 << RXEN1)  | (1 << TXEN1);
     118:	89 ec       	ldi	r24, 0xC9	; 201
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	29 ec       	ldi	r18, 0xC9	; 201
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	f9 01       	movw	r30, r18
     122:	20 81       	ld	r18, Z
     124:	28 61       	ori	r18, 0x18	; 24
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
		UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
     12a:	8a ec       	ldi	r24, 0xCA	; 202
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	2a ec       	ldi	r18, 0xCA	; 202
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	20 81       	ld	r18, Z
     136:	26 60       	ori	r18, 0x06	; 6
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR1 register
		UBRR1L = BAUD_PRESCALE;
     13c:	8c ec       	ldi	r24, 0xCC	; 204
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	23 e3       	ldi	r18, 0x33	; 51
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR1 register
		UBRR1H = (BAUD_PRESCALE >> 8);
     146:	8d ec       	ldi	r24, 0xCD	; 205
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	fc 01       	movw	r30, r24
     14c:	10 82       	st	Z, r1
	}
}
     14e:	0f 90       	pop	r0
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <USART_IsSendReady>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	0f 92       	push	r0
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	31 f0       	breq	.+12     	; 0x174 <USART_IsSendReady+0x1e>
     168:	80 ec       	ldi	r24, 0xC0	; 192
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	80 72       	andi	r24, 0x20	; 32
     172:	05 c0       	rjmp	.+10     	; 0x17e <USART_IsSendReady+0x28>
     174:	88 ec       	ldi	r24, 0xC8	; 200
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	fc 01       	movw	r30, r24
     17a:	80 81       	ld	r24, Z
     17c:	80 72       	andi	r24, 0x20	; 32
}
     17e:	0f 90       	pop	r0
     180:	cf 91       	pop	r28
     182:	df 91       	pop	r29
     184:	08 95       	ret

00000186 <USART_HasTransmitted>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	0f 92       	push	r0
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	31 f0       	breq	.+12     	; 0x1a4 <USART_HasTransmitted+0x1e>
     198:	80 ec       	ldi	r24, 0xC0	; 192
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	80 74       	andi	r24, 0x40	; 64
     1a2:	05 c0       	rjmp	.+10     	; 0x1ae <USART_HasTransmitted+0x28>
     1a4:	88 ec       	ldi	r24, 0xC8	; 200
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	80 74       	andi	r24, 0x40	; 64
}
     1ae:	0f 90       	pop	r0
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	08 95       	ret

000001b6 <USART_HasReceived>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <USART_HasReceived+0x1e>
     1c8:	80 ec       	ldi	r24, 0xC0	; 192
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	80 78       	andi	r24, 0x80	; 128
     1d2:	05 c0       	rjmp	.+10     	; 0x1de <USART_HasReceived+0x28>
     1d4:	88 ec       	ldi	r24, 0xC8	; 200
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	80 78       	andi	r24, 0x80	; 128
}
     1de:	0f 90       	pop	r0
     1e0:	cf 91       	pop	r28
     1e2:	df 91       	pop	r29
     1e4:	08 95       	ret

000001e6 <USART_Flush>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Flushes the data register
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	89 83       	std	Y+1, r24	; 0x01
	static unsigned char dummy;
	if (usartNum != 1) {
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	a9 f0       	breq	.+42     	; 0x222 <USART_Flush+0x3c>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
     1f8:	06 c0       	rjmp	.+12     	; 0x206 <USART_Flush+0x20>
     1fa:	86 ec       	ldi	r24, 0xC6	; 198
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	80 93 6d 02 	sts	0x026D, r24
     206:	80 ec       	ldi	r24, 0xC0	; 192
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	fc 01       	movw	r30, r24
     20c:	80 81       	ld	r24, Z
     20e:	88 23       	and	r24, r24
     210:	a4 f3       	brlt	.-24     	; 0x1fa <USART_Flush+0x14>
     212:	0e c0       	rjmp	.+28     	; 0x230 <USART_Flush+0x4a>
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     214:	8e ec       	ldi	r24, 0xCE	; 206
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	80 81       	ld	r24, Z
     21c:	80 93 6d 02 	sts	0x026D, r24
     220:	01 c0       	rjmp	.+2      	; 0x224 <USART_Flush+0x3e>
     222:	00 00       	nop
     224:	88 ec       	ldi	r24, 0xC8	; 200
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	fc 01       	movw	r30, r24
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	94 f3       	brlt	.-28     	; 0x214 <USART_Flush+0x2e>
	}
}
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <USART_Send>:
//Functionality - Sends an 8-bit char value
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <USART_Send+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	89 83       	std	Y+1, r24	; 0x01
     244:	6a 83       	std	Y+2, r22	; 0x02
	if (usartNum != 1) {
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	89 f0       	breq	.+34     	; 0x26e <USART_Send+0x36>
		while( !(UCSR0A & (1 << UDRE0)) );
     24c:	00 00       	nop
     24e:	80 ec       	ldi	r24, 0xC0	; 192
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	80 72       	andi	r24, 0x20	; 32
     25c:	90 70       	andi	r25, 0x00	; 0
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	b1 f3       	breq	.-20     	; 0x24e <USART_Send+0x16>
		UDR0 = sendMe;
     262:	86 ec       	ldi	r24, 0xC6	; 198
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	29 81       	ldd	r18, Y+1	; 0x01
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	10 c0       	rjmp	.+32     	; 0x28e <USART_Send+0x56>
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     26e:	00 00       	nop
     270:	88 ec       	ldi	r24, 0xC8	; 200
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	fc 01       	movw	r30, r24
     276:	80 81       	ld	r24, Z
     278:	88 2f       	mov	r24, r24
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	80 72       	andi	r24, 0x20	; 32
     27e:	90 70       	andi	r25, 0x00	; 0
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	b1 f3       	breq	.-20     	; 0x270 <USART_Send+0x38>
		UDR1 = sendMe;
     284:	8e ec       	ldi	r24, 0xCE	; 206
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	29 81       	ldd	r18, Y+1	; 0x01
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
	}
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	cf 91       	pop	r28
     294:	df 91       	pop	r29
     296:	08 95       	ret

00000298 <USART_Receive>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
     298:	df 93       	push	r29
     29a:	cf 93       	push	r28
     29c:	0f 92       	push	r0
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	61 f0       	breq	.+24     	; 0x2c2 <USART_Receive+0x2a>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     2aa:	00 00       	nop
     2ac:	80 ec       	ldi	r24, 0xC0	; 192
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 23       	and	r24, r24
     2b6:	d4 f7       	brge	.-12     	; 0x2ac <USART_Receive+0x14>
		return UDR0; // Get and return received data from buffer
     2b8:	86 ec       	ldi	r24, 0xC6	; 198
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <USART_Receive+0x40>
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     2c2:	00 00       	nop
     2c4:	88 ec       	ldi	r24, 0xC8	; 200
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	88 23       	and	r24, r24
     2ce:	d4 f7       	brge	.-12     	; 0x2c4 <USART_Receive+0x2c>
		return UDR1;
     2d0:	8e ec       	ldi	r24, 0xCE	; 206
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	80 81       	ld	r24, Z
	}
}
     2d8:	0f 90       	pop	r0
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <findGCD>:
#include <avr/io.h>
#include <avr/interrupt.h>

//--------Find GCD function -------------------------------
unsigned long int findGCD (unsigned long int a, unsigned long int b)
{
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	2c 97       	sbiw	r28, 0x0c	; 12
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	6d 83       	std	Y+5, r22	; 0x05
     2f6:	7e 83       	std	Y+6, r23	; 0x06
     2f8:	8f 83       	std	Y+7, r24	; 0x07
     2fa:	98 87       	std	Y+8, r25	; 0x08
     2fc:	29 87       	std	Y+9, r18	; 0x09
     2fe:	3a 87       	std	Y+10, r19	; 0x0a
     300:	4b 87       	std	Y+11, r20	; 0x0b
     302:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int c;
	while(1){
	c = a%b;
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	9e 81       	ldd	r25, Y+6	; 0x06
     308:	af 81       	ldd	r26, Y+7	; 0x07
     30a:	b8 85       	ldd	r27, Y+8	; 0x08
     30c:	29 85       	ldd	r18, Y+9	; 0x09
     30e:	3a 85       	ldd	r19, Y+10	; 0x0a
     310:	4b 85       	ldd	r20, Y+11	; 0x0b
     312:	5c 85       	ldd	r21, Y+12	; 0x0c
     314:	bc 01       	movw	r22, r24
     316:	cd 01       	movw	r24, r26
     318:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__udivmodsi4>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	ab 83       	std	Y+3, r26	; 0x03
     326:	bc 83       	std	Y+4, r27	; 0x04
	if(c==0){return b;}
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	ab 81       	ldd	r26, Y+3	; 0x03
     32e:	bc 81       	ldd	r27, Y+4	; 0x04
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	a1 05       	cpc	r26, r1
     334:	b1 05       	cpc	r27, r1
     336:	79 f4       	brne	.+30     	; 0x356 <findGCD+0x76>
     338:	89 85       	ldd	r24, Y+9	; 0x09
     33a:	9a 85       	ldd	r25, Y+10	; 0x0a
     33c:	ab 85       	ldd	r26, Y+11	; 0x0b
     33e:	bc 85       	ldd	r27, Y+12	; 0x0c
	a = b;
	b = c;
	}
	return 0;
}
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	2c 96       	adiw	r28, 0x0c	; 12
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	cf 91       	pop	r28
     352:	df 91       	pop	r29
     354:	08 95       	ret
{
	unsigned long int c;
	while(1){
	c = a%b;
	if(c==0){return b;}
	a = b;
     356:	89 85       	ldd	r24, Y+9	; 0x09
     358:	9a 85       	ldd	r25, Y+10	; 0x0a
     35a:	ab 85       	ldd	r26, Y+11	; 0x0b
     35c:	bc 85       	ldd	r27, Y+12	; 0x0c
     35e:	8d 83       	std	Y+5, r24	; 0x05
     360:	9e 83       	std	Y+6, r25	; 0x06
     362:	af 83       	std	Y+7, r26	; 0x07
     364:	b8 87       	std	Y+8, r27	; 0x08
	b = c;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	ab 81       	ldd	r26, Y+3	; 0x03
     36c:	bc 81       	ldd	r27, Y+4	; 0x04
     36e:	89 87       	std	Y+9, r24	; 0x09
     370:	9a 87       	std	Y+10, r25	; 0x0a
     372:	ab 87       	std	Y+11, r26	; 0x0b
     374:	bc 87       	std	Y+12, r27	; 0x0c
	}
     376:	c6 cf       	rjmp	.-116    	; 0x304 <findGCD+0x24>

00000378 <ADC_init>:
	return 0;
}

void ADC_init() {
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
     380:	8a e7       	ldi	r24, 0x7A	; 122
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	2a e7       	ldi	r18, 0x7A	; 122
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	20 6e       	ori	r18, 0xE0	; 224
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	// in Free Running Mode, a new conversion will trigger
	// whenever the previous conversion completes.
}
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <set_PWM>:
	
void set_PWM(double frequency) {
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <set_PWM+0xa>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <set_PWM+0xc>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	69 83       	std	Y+1, r22	; 0x01
     3aa:	7a 83       	std	Y+2, r23	; 0x02
     3ac:	8b 83       	std	Y+3, r24	; 0x03
     3ae:	9c 83       	std	Y+4, r25	; 0x04
	
	// Keeps track of the currently set frequency
  // Will only update the registers when the frequency
  // changes, plays music uninterrupted.
	static double current_frequency;
	if (frequency != current_frequency) {
     3b0:	20 91 69 02 	lds	r18, 0x0269
     3b4:	30 91 6a 02 	lds	r19, 0x026A
     3b8:	40 91 6b 02 	lds	r20, 0x026B
     3bc:	50 91 6c 02 	lds	r21, 0x026C
     3c0:	69 81       	ldd	r22, Y+1	; 0x01
     3c2:	7a 81       	ldd	r23, Y+2	; 0x02
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	0e 94 03 0a 	call	0x1406	; 0x1406 <__cmpsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <set_PWM+0x3a>
     3d0:	85 c0       	rjmp	.+266    	; 0x4dc <set_PWM+0x144>

		if (!frequency) TCCR3B &= 0x08; //stops timer/counter
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 81       	ldd	r22, Y+1	; 0x01
     3d6:	7a 81       	ldd	r23, Y+2	; 0x02
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	a9 01       	movw	r20, r18
     3e2:	0e 94 03 0a 	call	0x1406	; 0x1406 <__cmpsf2>
     3e6:	88 23       	and	r24, r24
     3e8:	09 f4       	brne	.+2      	; 0x3ec <set_PWM+0x54>
     3ea:	10 e0       	ldi	r17, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	81 27       	eor	r24, r17
     3f0:	88 23       	and	r24, r24
     3f2:	51 f0       	breq	.+20     	; 0x408 <set_PWM+0x70>
     3f4:	81 e9       	ldi	r24, 0x91	; 145
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	21 e9       	ldi	r18, 0x91	; 145
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	28 70       	andi	r18, 0x08	; 8
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
     406:	09 c0       	rjmp	.+18     	; 0x41a <set_PWM+0x82>
		else TCCR3B |= 0x03; // resumes/continues timer/counter
     408:	81 e9       	ldi	r24, 0x91	; 145
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	21 e9       	ldi	r18, 0x91	; 145
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	23 60       	ori	r18, 0x03	; 3
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
	
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) OCR3A = 0xFFFF;
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	69 81       	ldd	r22, Y+1	; 0x01
     41e:	7a 81       	ldd	r23, Y+2	; 0x02
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	9c 81       	ldd	r25, Y+4	; 0x04
     424:	28 e5       	ldi	r18, 0x58	; 88
     426:	39 e3       	ldi	r19, 0x39	; 57
     428:	44 e7       	ldi	r20, 0x74	; 116
     42a:	5f e3       	ldi	r21, 0x3F	; 63
     42c:	0e 94 03 0a 	call	0x1406	; 0x1406 <__cmpsf2>
     430:	88 23       	and	r24, r24
     432:	0c f0       	brlt	.+2      	; 0x436 <set_PWM+0x9e>
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	11 23       	and	r17, r17
     438:	41 f0       	breq	.+16     	; 0x44a <set_PWM+0xb2>
     43a:	88 e9       	ldi	r24, 0x98	; 152
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	3f ef       	ldi	r19, 0xFF	; 255
     442:	fc 01       	movw	r30, r24
     444:	31 83       	std	Z+1, r19	; 0x01
     446:	20 83       	st	Z, r18
     448:	38 c0       	rjmp	.+112    	; 0x4ba <set_PWM+0x122>
	
		// prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) OCR3A = 0x0000;
     44a:	11 e0       	ldi	r17, 0x01	; 1
     44c:	69 81       	ldd	r22, Y+1	; 0x01
     44e:	7a 81       	ldd	r23, Y+2	; 0x02
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	9c 81       	ldd	r25, Y+4	; 0x04
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	34 e2       	ldi	r19, 0x24	; 36
     458:	44 ef       	ldi	r20, 0xF4	; 244
     45a:	56 e4       	ldi	r21, 0x46	; 70
     45c:	0e 94 15 0b 	call	0x162a	; 0x162a <__gesf2>
     460:	18 16       	cp	r1, r24
     462:	0c f0       	brlt	.+2      	; 0x466 <set_PWM+0xce>
     464:	10 e0       	ldi	r17, 0x00	; 0
     466:	11 23       	and	r17, r17
     468:	31 f0       	breq	.+12     	; 0x476 <set_PWM+0xde>
     46a:	88 e9       	ldi	r24, 0x98	; 152
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	11 82       	std	Z+1, r1	; 0x01
     472:	10 82       	st	Z, r1
     474:	22 c0       	rjmp	.+68     	; 0x4ba <set_PWM+0x122>
	
		// set OCR3A based on desired frequency
		else OCR3A = (short)(8000000 / (128 * frequency)) - 1;
     476:	08 e9       	ldi	r16, 0x98	; 152
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	69 81       	ldd	r22, Y+1	; 0x01
     47c:	7a 81       	ldd	r23, Y+2	; 0x02
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	53 e4       	ldi	r21, 0x43	; 67
     48a:	0e 94 19 0b 	call	0x1632	; 0x1632 <__mulsf3>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	9c 01       	movw	r18, r24
     494:	ad 01       	movw	r20, r26
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	74 e2       	ldi	r23, 0x24	; 36
     49a:	84 ef       	ldi	r24, 0xF4	; 244
     49c:	9a e4       	ldi	r25, 0x4A	; 74
     49e:	0e 94 07 0a 	call	0x140e	; 0x140e <__divsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 6f 0a 	call	0x14de	; 0x14de <__fixsfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f8 01       	movw	r30, r16
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24

		TCNT3 = 0; // resets counter
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	fc 01       	movw	r30, r24
     4c0:	11 82       	std	Z+1, r1	; 0x01
     4c2:	10 82       	st	Z, r1
		current_frequency = frequency;
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	ab 81       	ldd	r26, Y+3	; 0x03
     4ca:	bc 81       	ldd	r27, Y+4	; 0x04
     4cc:	80 93 69 02 	sts	0x0269, r24
     4d0:	90 93 6a 02 	sts	0x026A, r25
     4d4:	a0 93 6b 02 	sts	0x026B, r26
     4d8:	b0 93 6c 02 	sts	0x026C, r27
		}
}
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret

000004ee <PWM_on>:

void PWM_on() {
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = (1 << COM3A0);
     4f6:	80 e9       	ldi	r24, 0x90	; 144
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	20 e4       	ldi	r18, 0x40	; 64
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     500:	81 e9       	ldi	r24, 0x91	; 145
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	2b e0       	ldi	r18, 0x0B	; 11
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	cb 01       	movw	r24, r22
     510:	0e 94 cc 01 	call	0x398	; 0x398 <set_PWM>
}
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <PWM_off>:

void PWM_off() {
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0x00;
     522:	80 e9       	ldi	r24, 0x90	; 144
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	fc 01       	movw	r30, r24
     528:	10 82       	st	Z, r1
	TCCR3B = 0x00;
     52a:	81 e9       	ldi	r24, 0x91	; 145
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	10 82       	st	Z, r1
}
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	08 95       	ret

00000538 <SetBit>:

// Bit-access functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	00 d0       	rcall	.+0      	; 0x53e <SetBit+0x6>
     53e:	0f 92       	push	r0
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	6a 83       	std	Y+2, r22	; 0x02
     548:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	88 23       	and	r24, r24
     54e:	79 f0       	breq	.+30     	; 0x56e <SetBit+0x36>
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	02 2e       	mov	r0, r18
     55c:	02 c0       	rjmp	.+4      	; 0x562 <SetBit+0x2a>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	0a 94       	dec	r0
     564:	e2 f7       	brpl	.-8      	; 0x55e <SetBit+0x26>
     566:	98 2f       	mov	r25, r24
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	89 2b       	or	r24, r25
     56c:	0f c0       	rjmp	.+30     	; 0x58c <SetBit+0x54>
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	02 2e       	mov	r0, r18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <SetBit+0x48>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <SetBit+0x44>
     584:	98 2f       	mov	r25, r24
     586:	90 95       	com	r25
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	89 23       	and	r24, r25
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	00 d0       	rcall	.+0      	; 0x59e <GetBit+0x6>
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	2a 81       	ldd	r18, Y+2	; 0x02
     5ae:	22 2f       	mov	r18, r18
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	02 2e       	mov	r0, r18
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <GetBit+0x22>
     5b6:	95 95       	asr	r25
     5b8:	87 95       	ror	r24
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <GetBit+0x1e>
     5be:	81 70       	andi	r24, 0x01	; 1
}
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <TimerOn>:
volatile unsigned char TimerFlag = 0;
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	// bit3 = 0: CTC mode (clear timer on compare)
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s
	TCCR1B = 0x0B;
     5d2:	81 e8       	ldi	r24, 0x81	; 129
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2b e0       	ldi	r18, 0x0B	; 11
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
	// AVR output compare register OCR1A.
	// Timer interrupt will be generated when TCNT1==OCR1A
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	OCR1A = 125;// AVR timer interrupt mask register
     5dc:	88 e8       	ldi	r24, 0x88	; 136
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2d e7       	ldi	r18, 0x7D	; 125
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	31 83       	std	Z+1, r19	; 0x01
     5e8:	20 83       	st	Z, r18
	// bit1: OCIE1A -- enables compare match interrupt
	TIMSK1 = 0x02;
     5ea:	8f e6       	ldi	r24, 0x6F	; 111
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
	//Initialize avr counter
	TCNT1=0;
     5f4:	84 e8       	ldi	r24, 0x84	; 132
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	fc 01       	movw	r30, r24
     5fa:	11 82       	std	Z+1, r1	; 0x01
     5fc:	10 82       	st	Z, r1
	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
     5fe:	80 91 25 01 	lds	r24, 0x0125
     602:	90 91 26 01 	lds	r25, 0x0126
     606:	a0 91 27 01 	lds	r26, 0x0127
     60a:	b0 91 28 01 	lds	r27, 0x0128
     60e:	80 93 3f 02 	sts	0x023F, r24
     612:	90 93 40 02 	sts	0x0240, r25
     616:	a0 93 41 02 	sts	0x0241, r26
     61a:	b0 93 42 02 	sts	0x0242, r27
	//Enable global interrupts: 0x80: 1000000
	SREG |= 0x80;
     61e:	8f e5       	ldi	r24, 0x5F	; 95
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2f e5       	ldi	r18, 0x5F	; 95
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	20 68       	ori	r18, 0x80	; 128
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
}
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	08 95       	ret

00000636 <TimerOff>:

void TimerOff() {
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
	// bit3bit1bit0=000: timer off
	TCCR1B = 0x00;
     63e:	81 e8       	ldi	r24, 0x81	; 129
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	fc 01       	movw	r30, r24
     644:	10 82       	st	Z, r1
}
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <TimerISR>:

void TimerISR() {
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 3e 02 	sts	0x023E, r24
}
     65a:	cf 91       	pop	r28
     65c:	df 91       	pop	r29
     65e:	08 95       	ret

00000660 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	00 90 5b 00 	lds	r0, 0x005B
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1 ms per TimerOn settings)
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
     690:	80 91 3f 02 	lds	r24, 0x023F
     694:	90 91 40 02 	lds	r25, 0x0240
     698:	a0 91 41 02 	lds	r26, 0x0241
     69c:	b0 91 42 02 	lds	r27, 0x0242
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	a1 09       	sbc	r26, r1
     6a4:	b1 09       	sbc	r27, r1
     6a6:	80 93 3f 02 	sts	0x023F, r24
     6aa:	90 93 40 02 	sts	0x0240, r25
     6ae:	a0 93 41 02 	sts	0x0241, r26
     6b2:	b0 93 42 02 	sts	0x0242, r27
	if (_avr_timer_cntcurr == 0) {
     6b6:	80 91 3f 02 	lds	r24, 0x023F
     6ba:	90 91 40 02 	lds	r25, 0x0240
     6be:	a0 91 41 02 	lds	r26, 0x0241
     6c2:	b0 91 42 02 	lds	r27, 0x0242
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	a1 05       	cpc	r26, r1
     6ca:	b1 05       	cpc	r27, r1
     6cc:	91 f4       	brne	.+36     	; 0x6f2 <__vector_13+0x92>
		// Call the ISR that the user uses
		TimerISR();
     6ce:	0e 94 26 03 	call	0x64c	; 0x64c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     6d2:	80 91 25 01 	lds	r24, 0x0125
     6d6:	90 91 26 01 	lds	r25, 0x0126
     6da:	a0 91 27 01 	lds	r26, 0x0127
     6de:	b0 91 28 01 	lds	r27, 0x0128
     6e2:	80 93 3f 02 	sts	0x023F, r24
     6e6:	90 93 40 02 	sts	0x0240, r25
     6ea:	a0 93 41 02 	sts	0x0241, r26
     6ee:	b0 93 42 02 	sts	0x0242, r27
	}
}
     6f2:	cf 91       	pop	r28
     6f4:	df 91       	pop	r29
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	0f 90       	pop	r0
     710:	00 92 5b 00 	sts	0x005B, r0
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	00 d0       	rcall	.+0      	; 0x724 <TimerSet+0x6>
     724:	00 d0       	rcall	.+0      	; 0x726 <TimerSet+0x8>
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	69 83       	std	Y+1, r22	; 0x01
     72c:	7a 83       	std	Y+2, r23	; 0x02
     72e:	8b 83       	std	Y+3, r24	; 0x03
     730:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	ab 81       	ldd	r26, Y+3	; 0x03
     738:	bc 81       	ldd	r27, Y+4	; 0x04
     73a:	80 93 25 01 	sts	0x0125, r24
     73e:	90 93 26 01 	sts	0x0126, r25
     742:	a0 93 27 01 	sts	0x0127, r26
     746:	b0 93 28 01 	sts	0x0128, r27
	_avr_timer_cntcurr = _avr_timer_M;
     74a:	80 91 25 01 	lds	r24, 0x0125
     74e:	90 91 26 01 	lds	r25, 0x0126
     752:	a0 91 27 01 	lds	r26, 0x0127
     756:	b0 91 28 01 	lds	r27, 0x0128
     75a:	80 93 3f 02 	sts	0x023F, r24
     75e:	90 93 40 02 	sts	0x0240, r25
     762:	a0 93 41 02 	sts	0x0241, r26
     766:	b0 93 42 02 	sts	0x0242, r27
}
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <isMessageChanging>:
unsigned char bottom_lcd_choice = 0x00;
unsigned char sevendeg_choice = 0x00;
unsigned char game_counter = 0x00;
//--------End Shared Variables-----------------------------

unsigned char isMessageChanging() {
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	6c 97       	sbiw	r28, 0x1c	; 28
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
	unsigned char temp[sizeof(message)];
	if (lcd_choice == CODE_DISPLAY_WELCOME) {
     78c:	90 91 44 02 	lds	r25, 0x0244
     790:	80 91 19 01 	lds	r24, 0x0119
     794:	98 17       	cp	r25, r24
     796:	51 f4       	brne	.+20     	; 0x7ac <isMessageChanging+0x34>
		strcpy(temp, "Welcome to Embedded Bop it!");
     798:	25 e5       	ldi	r18, 0x55	; 85
     79a:	31 e0       	ldi	r19, 0x01	; 1
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	b9 01       	movw	r22, r18
     7a2:	4c e1       	ldi	r20, 0x1C	; 28
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     7aa:	5f c0       	rjmp	.+190    	; 0x86a <isMessageChanging+0xf2>
	} else if (lcd_choice == CODE_DISPLAY_GAME_STARTING) {
     7ac:	90 91 44 02 	lds	r25, 0x0244
     7b0:	80 91 1a 01 	lds	r24, 0x011A
     7b4:	98 17       	cp	r25, r24
     7b6:	51 f4       	brne	.+20     	; 0x7cc <isMessageChanging+0x54>
		strcpy(temp, "Let go of all input");
     7b8:	21 e7       	ldi	r18, 0x71	; 113
     7ba:	31 e0       	ldi	r19, 0x01	; 1
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	b9 01       	movw	r22, r18
     7c2:	44 e1       	ldi	r20, 0x14	; 20
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     7ca:	4f c0       	rjmp	.+158    	; 0x86a <isMessageChanging+0xf2>
	} else if (lcd_choice == CODE_DISPLAY_PUSH_IT) {
     7cc:	90 91 44 02 	lds	r25, 0x0244
     7d0:	80 91 1c 01 	lds	r24, 0x011C
     7d4:	98 17       	cp	r25, r24
     7d6:	51 f4       	brne	.+20     	; 0x7ec <isMessageChanging+0x74>
		strcpy(temp, "Push it!");
     7d8:	25 e8       	ldi	r18, 0x85	; 133
     7da:	31 e0       	ldi	r19, 0x01	; 1
     7dc:	ce 01       	movw	r24, r28
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	b9 01       	movw	r22, r18
     7e2:	49 e0       	ldi	r20, 0x09	; 9
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     7ea:	3f c0       	rjmp	.+126    	; 0x86a <isMessageChanging+0xf2>
	} else if (lcd_choice == CODE_DISPLAY_TWIST_IT) {
     7ec:	90 91 44 02 	lds	r25, 0x0244
     7f0:	80 91 1d 01 	lds	r24, 0x011D
     7f4:	98 17       	cp	r25, r24
     7f6:	51 f4       	brne	.+20     	; 0x80c <isMessageChanging+0x94>
		strcpy(temp, "Twist it!");
     7f8:	2e e8       	ldi	r18, 0x8E	; 142
     7fa:	31 e0       	ldi	r19, 0x01	; 1
     7fc:	ce 01       	movw	r24, r28
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	b9 01       	movw	r22, r18
     802:	4a e0       	ldi	r20, 0x0A	; 10
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     80a:	2f c0       	rjmp	.+94     	; 0x86a <isMessageChanging+0xf2>
	} else if (lcd_choice == CODE_DISPLAY_COVER_IT) {
     80c:	90 91 44 02 	lds	r25, 0x0244
     810:	80 91 1e 01 	lds	r24, 0x011E
     814:	98 17       	cp	r25, r24
     816:	51 f4       	brne	.+20     	; 0x82c <isMessageChanging+0xb4>
		strcpy(temp, "Cover it!");
     818:	28 e9       	ldi	r18, 0x98	; 152
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	b9 01       	movw	r22, r18
     822:	4a e0       	ldi	r20, 0x0A	; 10
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     82a:	1f c0       	rjmp	.+62     	; 0x86a <isMessageChanging+0xf2>
	} else if (lcd_choice == CODE_DISPLAY_CORRECT) {
     82c:	90 91 44 02 	lds	r25, 0x0244
     830:	80 91 1f 01 	lds	r24, 0x011F
     834:	98 17       	cp	r25, r24
     836:	51 f4       	brne	.+20     	; 0x84c <isMessageChanging+0xd4>
		strcpy(temp, "Correct!");
     838:	22 ea       	ldi	r18, 0xA2	; 162
     83a:	31 e0       	ldi	r19, 0x01	; 1
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	b9 01       	movw	r22, r18
     842:	49 e0       	ldi	r20, 0x09	; 9
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     84a:	0f c0       	rjmp	.+30     	; 0x86a <isMessageChanging+0xf2>
	} else if (lcd_choice == CODE_DISPLAY_INCORRECT) {
     84c:	90 91 44 02 	lds	r25, 0x0244
     850:	80 91 20 01 	lds	r24, 0x0120
     854:	98 17       	cp	r25, r24
     856:	49 f4       	brne	.+18     	; 0x86a <isMessageChanging+0xf2>
		strcpy(temp, "Incorrect! Play Again?");
     858:	2b ea       	ldi	r18, 0xAB	; 171
     85a:	31 e0       	ldi	r19, 0x01	; 1
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	b9 01       	movw	r22, r18
     862:	47 e1       	ldi	r20, 0x17	; 23
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
	} 

	
	if (strcmp(temp,message) == 0) {
     86a:	2a e2       	ldi	r18, 0x2A	; 42
     86c:	31 e0       	ldi	r19, 0x01	; 1
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	b9 01       	movw	r22, r18
     874:	0e 94 ae 0b 	call	0x175c	; 0x175c <strcmp>
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	11 f4       	brne	.+4      	; 0x880 <isMessageChanging+0x108>
		// return that there is NO change
		return 0;
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	15 c0       	rjmp	.+42     	; 0x8aa <isMessageChanging+0x132>
	}	
	
	//update top message
	memset(message,'\0',strlen(message));
     880:	8a e2       	ldi	r24, 0x2A	; 42
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 be 0b 	call	0x177c	; 0x177c <strlen>
     888:	9c 01       	movw	r18, r24
     88a:	8a e2       	ldi	r24, 0x2A	; 42
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	a9 01       	movw	r20, r18
     894:	0e 94 a7 0b 	call	0x174e	; 0x174e <memset>
	strcpy(message, temp);
     898:	8a e2       	ldi	r24, 0x2A	; 42
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	9e 01       	movw	r18, r28
     89e:	2f 5f       	subi	r18, 0xFF	; 255
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	b9 01       	movw	r22, r18
     8a4:	0e 94 b7 0b 	call	0x176e	; 0x176e <strcpy>
		
	//return that there is a change
	return 1;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
}
     8aa:	6c 96       	adiw	r28, 0x1c	; 28
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	08 95       	ret

000008bc <setBottomMessage>:

void setBottomMessage() {
     8bc:	df 93       	push	r29
     8be:	cf 93       	push	r28
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2f 97       	sbiw	r28, 0x0f	; 15
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
	unsigned char bottom_temp[sizeof(bottom_message)];
	
	if (bottom_lcd_choice == CODE_DISPLAY_WELCOME) {
     8d0:	90 91 45 02 	lds	r25, 0x0245
     8d4:	80 91 19 01 	lds	r24, 0x0119
     8d8:	98 17       	cp	r25, r24
     8da:	51 f4       	brne	.+20     	; 0x8f0 <setBottomMessage+0x34>
		strcpy(bottom_temp, "Start -> Green");
     8dc:	22 ec       	ldi	r18, 0xC2	; 194
     8de:	31 e0       	ldi	r19, 0x01	; 1
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	b9 01       	movw	r22, r18
     8e6:	4f e0       	ldi	r20, 0x0F	; 15
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     8ee:	7f c0       	rjmp	.+254    	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_DISPLAY_GAME_STARTING) {
     8f0:	90 91 45 02 	lds	r25, 0x0245
     8f4:	80 91 1a 01 	lds	r24, 0x011A
     8f8:	98 17       	cp	r25, r24
     8fa:	51 f4       	brne	.+20     	; 0x910 <setBottomMessage+0x54>
		strcpy(bottom_temp, "Starting in ");
     8fc:	21 ed       	ldi	r18, 0xD1	; 209
     8fe:	31 e0       	ldi	r19, 0x01	; 1
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	b9 01       	movw	r22, r18
     906:	4d e0       	ldi	r20, 0x0D	; 13
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     90e:	6f c0       	rjmp	.+222    	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_BUTTON1) {
     910:	90 91 45 02 	lds	r25, 0x0245
     914:	80 91 01 01 	lds	r24, 0x0101
     918:	98 17       	cp	r25, r24
     91a:	51 f4       	brne	.+20     	; 0x930 <setBottomMessage+0x74>
		strcpy(bottom_temp, "Blue Button");
     91c:	2e ed       	ldi	r18, 0xDE	; 222
     91e:	31 e0       	ldi	r19, 0x01	; 1
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	b9 01       	movw	r22, r18
     926:	4c e0       	ldi	r20, 0x0C	; 12
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     92e:	5f c0       	rjmp	.+190    	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_BUTTON2) {
     930:	90 91 45 02 	lds	r25, 0x0245
     934:	80 91 02 01 	lds	r24, 0x0102
     938:	98 17       	cp	r25, r24
     93a:	51 f4       	brne	.+20     	; 0x950 <setBottomMessage+0x94>
		strcpy(bottom_temp, "Green Button");
     93c:	2a ee       	ldi	r18, 0xEA	; 234
     93e:	31 e0       	ldi	r19, 0x01	; 1
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	b9 01       	movw	r22, r18
     946:	4d e0       	ldi	r20, 0x0D	; 13
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     94e:	4f c0       	rjmp	.+158    	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_BUTTON3) {
     950:	90 91 45 02 	lds	r25, 0x0245
     954:	80 91 03 01 	lds	r24, 0x0103
     958:	98 17       	cp	r25, r24
     95a:	51 f4       	brne	.+20     	; 0x970 <setBottomMessage+0xb4>
		strcpy(bottom_temp, "Purple Button");
     95c:	27 ef       	ldi	r18, 0xF7	; 247
     95e:	31 e0       	ldi	r19, 0x01	; 1
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	b9 01       	movw	r22, r18
     966:	4e e0       	ldi	r20, 0x0E	; 14
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     96e:	3f c0       	rjmp	.+126    	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_BUTTON4) {
     970:	90 91 45 02 	lds	r25, 0x0245
     974:	80 91 04 01 	lds	r24, 0x0104
     978:	98 17       	cp	r25, r24
     97a:	51 f4       	brne	.+20     	; 0x990 <setBottomMessage+0xd4>
		strcpy(bottom_temp, "Silver Button");
     97c:	25 e0       	ldi	r18, 0x05	; 5
     97e:	32 e0       	ldi	r19, 0x02	; 2
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	b9 01       	movw	r22, r18
     986:	4e e0       	ldi	r20, 0x0E	; 14
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     98e:	2f c0       	rjmp	.+94     	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_BUTTON5) {
     990:	90 91 45 02 	lds	r25, 0x0245
     994:	80 91 05 01 	lds	r24, 0x0105
     998:	98 17       	cp	r25, r24
     99a:	51 f4       	brne	.+20     	; 0x9b0 <setBottomMessage+0xf4>
		strcpy(bottom_temp, "Red Button");
     99c:	23 e1       	ldi	r18, 0x13	; 19
     99e:	32 e0       	ldi	r19, 0x02	; 2
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	b9 01       	movw	r22, r18
     9a6:	4b e0       	ldi	r20, 0x0B	; 11
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     9ae:	1f c0       	rjmp	.+62     	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_DISPLAY_CORRECT) {
     9b0:	90 91 45 02 	lds	r25, 0x0245
     9b4:	80 91 1f 01 	lds	r24, 0x011F
     9b8:	98 17       	cp	r25, r24
     9ba:	51 f4       	brne	.+20     	; 0x9d0 <setBottomMessage+0x114>
		strcpy(bottom_temp, "Good Job!");
     9bc:	2e e1       	ldi	r18, 0x1E	; 30
     9be:	32 e0       	ldi	r19, 0x02	; 2
     9c0:	ce 01       	movw	r24, r28
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	b9 01       	movw	r22, r18
     9c6:	4a e0       	ldi	r20, 0x0A	; 10
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
     9ce:	0f c0       	rjmp	.+30     	; 0x9ee <setBottomMessage+0x132>
	} else if (bottom_lcd_choice == CODE_DISPLAY_INCORRECT) {
     9d0:	90 91 45 02 	lds	r25, 0x0245
     9d4:	80 91 20 01 	lds	r24, 0x0120
     9d8:	98 17       	cp	r25, r24
     9da:	49 f4       	brne	.+18     	; 0x9ee <setBottomMessage+0x132>
		strcpy(bottom_temp, "Retry -> Green");
     9dc:	28 e2       	ldi	r18, 0x28	; 40
     9de:	32 e0       	ldi	r19, 0x02	; 2
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	b9 01       	movw	r22, r18
     9e6:	4f e0       	ldi	r20, 0x0F	; 15
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	0e 94 9e 0b 	call	0x173c	; 0x173c <memcpy>
	}
	
	//update bottom message
	memset(bottom_message,'\0',strlen(bottom_message));
     9ee:	86 e4       	ldi	r24, 0x46	; 70
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 be 0b 	call	0x177c	; 0x177c <strlen>
     9f6:	9c 01       	movw	r18, r24
     9f8:	86 e4       	ldi	r24, 0x46	; 70
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	a9 01       	movw	r20, r18
     a02:	0e 94 a7 0b 	call	0x174e	; 0x174e <memset>
	strcpy(bottom_message, bottom_temp);
     a06:	86 e4       	ldi	r24, 0x46	; 70
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	9e 01       	movw	r18, r28
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	b9 01       	movw	r22, r18
     a12:	0e 94 b7 0b 	call	0x176e	; 0x176e <strcpy>
		
}
     a16:	2f 96       	adiw	r28, 0x0f	; 15
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	cf 91       	pop	r28
     a24:	df 91       	pop	r29
     a26:	08 95       	ret

00000a28 <SMTick1>:

//--------User defined FSMs--------------------------------
enum SM1_States { SM1_start };
// Monitors button connected to PA0. When the button is
// pressed, shared variable "pause" is toggled.
int SMTick1(int state) {
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	00 d0       	rcall	.+0      	; 0xa32 <SMTick1+0xa>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <SMTick1+0xc>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char cursor_position = 1;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	89 83       	std	Y+1, r24	; 0x01
	unsigned char counter = 0x00;
     a40:	1a 82       	std	Y+2, r1	; 0x02
	
	//State machine transitions
	switch (state) {
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	19 f4       	brne	.+6      	; 0xa50 <SMTick1+0x28>
		case SM1_start:
			state = SM1_start;
     a4a:	1c 82       	std	Y+4, r1	; 0x04
     a4c:	1b 82       	std	Y+3, r1	; 0x03
			break;
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <SMTick1+0x2e>
		default:
			state = SM1_start;
     a50:	1c 82       	std	Y+4, r1	; 0x04
     a52:	1b 82       	std	Y+3, r1	; 0x03
			break;
     a54:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	09 f0       	breq	.+2      	; 0xa60 <SMTick1+0x38>
     a5e:	9e c0       	rjmp	.+316    	; 0xb9c <SMTick1+0x174>
		case SM1_start: 		
			for (counter = 0, cursor_position = array_position; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     a60:	1a 82       	std	Y+2, r1	; 0x02
     a62:	80 91 43 02 	lds	r24, 0x0243
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	30 c0       	rjmp	.+96     	; 0xaca <SMTick1+0xa2>
				if (cursor_position > strlen(message)) {
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	08 2f       	mov	r16, r24
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	8a e2       	ldi	r24, 0x2A	; 42
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 be 0b 	call	0x177c	; 0x177c <strlen>
     a78:	80 17       	cp	r24, r16
     a7a:	91 07       	cpc	r25, r17
     a7c:	50 f4       	brcc	.+20     	; 0xa92 <SMTick1+0x6a>
					cursor_position = 0;
     a7e:	19 82       	std	Y+1, r1	; 0x01
					display[counter] = ' ';
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	88 2f       	mov	r24, r24
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	82 59       	subi	r24, 0x92	; 146
     a88:	9d 4f       	sbci	r25, 0xFD	; 253
     a8a:	20 e2       	ldi	r18, 0x20	; 32
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
     a90:	16 c0       	rjmp	.+44     	; 0xabe <SMTick1+0x96>
				} else if (cursor_position - 1 >= 0) {
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	88 2f       	mov	r24, r24
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	99 23       	and	r25, r25
     a9c:	84 f0       	brlt	.+32     	; 0xabe <SMTick1+0x96>
					display[counter] = message[cursor_position - 1]; 
     a9e:	8a 81       	ldd	r24, Y+2	; 0x02
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	29 81       	ldd	r18, Y+1	; 0x01
     aa6:	22 2f       	mov	r18, r18
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	30 40       	sbci	r19, 0x00	; 0
     aae:	26 5d       	subi	r18, 0xD6	; 214
     ab0:	3e 4f       	sbci	r19, 0xFE	; 254
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	82 59       	subi	r24, 0x92	; 146
     ab8:	9d 4f       	sbci	r25, 0xFD	; 253
     aba:	fc 01       	movw	r30, r24
     abc:	20 83       	st	Z, r18
			break;
	}
	//State machine actions
	switch(state) {
		case SM1_start: 		
			for (counter = 0, cursor_position = array_position; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	8a 83       	std	Y+2, r24	; 0x02
     aca:	80 91 29 01 	lds	r24, 0x0129
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	98 17       	cp	r25, r24
     ad2:	58 f2       	brcs	.-106    	; 0xa6a <SMTick1+0x42>
					display[counter] = message[cursor_position - 1]; 
				}
				
			}
			
			for (counter = 0, cursor_position = 0; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     ad4:	1a 82       	std	Y+2, r1	; 0x02
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <SMTick1+0xd6>
				LCD_Cursor(cursor_position);
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	0e 94 bd 09 	call	0x137a	; 0x137a <LCD_Cursor>
				LCD_WriteData(display[counter]);
     ae0:	8a 81       	ldd	r24, Y+2	; 0x02
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	82 59       	subi	r24, 0x92	; 146
     ae8:	9d 4f       	sbci	r25, 0xFD	; 253
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_WriteData>
					display[counter] = message[cursor_position - 1]; 
				}
				
			}
			
			for (counter = 0, cursor_position = 0; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	8a 83       	std	Y+2, r24	; 0x02
     afe:	80 91 29 01 	lds	r24, 0x0129
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	98 17       	cp	r25, r24
     b06:	48 f3       	brcs	.-46     	; 0xada <SMTick1+0xb2>
				LCD_Cursor(cursor_position);
				LCD_WriteData(display[counter]);
			}	
			array_position = array_position + 1;
     b08:	80 91 43 02 	lds	r24, 0x0243
     b0c:	8f 5f       	subi	r24, 0xFF	; 255
     b0e:	80 93 43 02 	sts	0x0243, r24
			if (array_position == strlen(message)) {
     b12:	80 91 43 02 	lds	r24, 0x0243
     b16:	08 2f       	mov	r16, r24
     b18:	10 e0       	ldi	r17, 0x00	; 0
     b1a:	8a e2       	ldi	r24, 0x2A	; 42
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 be 0b 	call	0x177c	; 0x177c <strlen>
     b22:	08 17       	cp	r16, r24
     b24:	19 07       	cpc	r17, r25
     b26:	11 f4       	brne	.+4      	; 0xb2c <SMTick1+0x104>
				array_position = 0;
     b28:	10 92 43 02 	sts	0x0243, r1
			}			
			
			// bottom message display
			setBottomMessage();
     b2c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <setBottomMessage>
			for (counter = 0, cursor_position = LENGTH_OF_LCD + 1; counter < LENGTH_OF_LCD * 2; cursor_position = cursor_position + 1, counter = counter + 1) {
     b30:	1a 82       	std	Y+2, r1	; 0x02
     b32:	80 91 29 01 	lds	r24, 0x0129
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	89 83       	std	Y+1, r24	; 0x01
     b3a:	23 c0       	rjmp	.+70     	; 0xb82 <SMTick1+0x15a>
				if (counter < strlen((bottom_message))) {
     b3c:	8a 81       	ldd	r24, Y+2	; 0x02
     b3e:	08 2f       	mov	r16, r24
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	86 e4       	ldi	r24, 0x46	; 70
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 be 0b 	call	0x177c	; 0x177c <strlen>
     b4a:	08 17       	cp	r16, r24
     b4c:	19 07       	cpc	r17, r25
     b4e:	68 f4       	brcc	.+26     	; 0xb6a <SMTick1+0x142>
					LCD_Cursor(cursor_position);
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	0e 94 bd 09 	call	0x137a	; 0x137a <LCD_Cursor>
					LCD_WriteData(bottom_message[counter]);
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	8a 5b       	subi	r24, 0xBA	; 186
     b5e:	9e 4f       	sbci	r25, 0xFE	; 254
     b60:	fc 01       	movw	r30, r24
     b62:	80 81       	ld	r24, Z
     b64:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_WriteData>
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <SMTick1+0x14e>
				} else {
					LCD_Cursor(cursor_position);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	0e 94 bd 09 	call	0x137a	; 0x137a <LCD_Cursor>
					LCD_WriteData(' ');
     b70:	80 e2       	ldi	r24, 0x20	; 32
     b72:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_WriteData>
				array_position = 0;
			}			
			
			// bottom message display
			setBottomMessage();
			for (counter = 0, cursor_position = LENGTH_OF_LCD + 1; counter < LENGTH_OF_LCD * 2; cursor_position = cursor_position + 1, counter = counter + 1) {
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	8a 83       	std	Y+2, r24	; 0x02
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	80 91 29 01 	lds	r24, 0x0129
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	28 17       	cp	r18, r24
     b96:	39 07       	cpc	r19, r25
     b98:	8c f2       	brlt	.-94     	; 0xb3c <SMTick1+0x114>
				} else {
					LCD_Cursor(cursor_position);
					LCD_WriteData(' ');
				}
			}
			break;
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <SMTick1+0x176>
		default: break;
     b9c:	00 00       	nop
	}
	return state;
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
}
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <SMTick2>:

/**
* get received message and save as user choice
*/
enum SM2_States { SM2_start };
int SMTick2(int state) {
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	00 d0       	rcall	.+0      	; 0xbba <SMTick2+0x6>
     bba:	00 d0       	rcall	.+0      	; 0xbbc <SMTick2+0x8>
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	9c 83       	std	Y+4, r25	; 0x04
     bc2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char receive = 0x00;
     bc4:	19 82       	std	Y+1, r1	; 0x01
	unsigned char device = 0x00;
     bc6:	1a 82       	std	Y+2, r1	; 0x02
	
	//State machine transitions
	switch (state) {
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	19 f4       	brne	.+6      	; 0xbd6 <SMTick2+0x22>
		case SM2_start:
			state = SM2_start;
     bd0:	1c 82       	std	Y+4, r1	; 0x04
     bd2:	1b 82       	std	Y+3, r1	; 0x03
			break;
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <SMTick2+0x28>
		default:
			state = SM2_start;
     bd6:	1c 82       	std	Y+4, r1	; 0x04
     bd8:	1b 82       	std	Y+3, r1	; 0x03
			break;
     bda:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	09 f0       	breq	.+2      	; 0xbe6 <SMTick2+0x32>
     be4:	54 c0       	rjmp	.+168    	; 0xc8e <SMTick2+0xda>
		case SM2_start: 
			if (USART_HasReceived(1)) {
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_HasReceived>
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <SMTick2+0x3e>
     bf0:	50 c0       	rjmp	.+160    	; 0xc92 <SMTick2+0xde>
				receive = USART_Receive(1);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 4c 01 	call	0x298	; 0x298 <USART_Receive>
     bf8:	89 83       	std	Y+1, r24	; 0x01
				device = receive & 0xC0;
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	80 7c       	andi	r24, 0xC0	; 192
     bfe:	8a 83       	std	Y+2, r24	; 0x02
				receive = receive & 0x3F;
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	8f 73       	andi	r24, 0x3F	; 63
     c04:	89 83       	std	Y+1, r24	; 0x01
				
				if (device == CODE_DEVICE_GAME_PIECE) {
     c06:	80 91 21 01 	lds	r24, 0x0121
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	98 17       	cp	r25, r24
     c0e:	d9 f4       	brne	.+54     	; 0xc46 <SMTick2+0x92>
					if (receive > 0x01 & receive <= 0x05) {
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	08 f4       	brcc	.+2      	; 0xc1a <SMTick2+0x66>
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	29 81       	ldd	r18, Y+1	; 0x01
     c1e:	26 30       	cpi	r18, 0x06	; 6
     c20:	08 f0       	brcs	.+2      	; 0xc24 <SMTick2+0x70>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	89 23       	and	r24, r25
     c26:	88 23       	and	r24, r24
     c28:	51 f0       	breq	.+20     	; 0xc3e <SMTick2+0x8a>
						lcd_choice = CODE_DISPLAY_PUSH_IT;
     c2a:	80 91 1c 01 	lds	r24, 0x011C
     c2e:	80 93 44 02 	sts	0x0244, r24
						if (isMessageChanging()) {
     c32:	0e 94 bc 03 	call	0x778	; 0x778 <isMessageChanging>
     c36:	88 23       	and	r24, r24
     c38:	11 f0       	breq	.+4      	; 0xc3e <SMTick2+0x8a>
							array_position = 0;
     c3a:	10 92 43 02 	sts	0x0243, r1
						}
					}
					bottom_lcd_choice = receive;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	80 93 45 02 	sts	0x0245, r24
					sevendeg_choice = receive;
				} else if (device == CODE_DEVICE_GAME_COUNTER) {
					game_counter = receive;
				}			
			} 
			break;
     c44:	2b c0       	rjmp	.+86     	; 0xc9c <SMTick2+0xe8>
							array_position = 0;
						}
					}
					bottom_lcd_choice = receive;
					
				} else if (device == CODE_DEVICE_LCD) {
     c46:	80 91 22 01 	lds	r24, 0x0122
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	98 17       	cp	r25, r24
     c4e:	69 f4       	brne	.+26     	; 0xc6a <SMTick2+0xb6>
					lcd_choice = receive;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	80 93 44 02 	sts	0x0244, r24
					bottom_lcd_choice = receive;
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	80 93 45 02 	sts	0x0245, r24
					if (isMessageChanging()) {
     c5c:	0e 94 bc 03 	call	0x778	; 0x778 <isMessageChanging>
     c60:	88 23       	and	r24, r24
     c62:	c9 f0       	breq	.+50     	; 0xc96 <SMTick2+0xe2>
						array_position = 0;
     c64:	10 92 43 02 	sts	0x0243, r1
					sevendeg_choice = receive;
				} else if (device == CODE_DEVICE_GAME_COUNTER) {
					game_counter = receive;
				}			
			} 
			break;
     c68:	19 c0       	rjmp	.+50     	; 0xc9c <SMTick2+0xe8>
					lcd_choice = receive;
					bottom_lcd_choice = receive;
					if (isMessageChanging()) {
						array_position = 0;
					}
				} else if (device == CODE_DEVICE_SEVENSEG) {
     c6a:	80 91 23 01 	lds	r24, 0x0123
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	98 17       	cp	r25, r24
     c72:	21 f4       	brne	.+8      	; 0xc7c <SMTick2+0xc8>
					sevendeg_choice = receive;
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	80 93 46 02 	sts	0x0246, r24
				} else if (device == CODE_DEVICE_GAME_COUNTER) {
					game_counter = receive;
				}			
			} 
			break;
     c7a:	10 c0       	rjmp	.+32     	; 0xc9c <SMTick2+0xe8>
					if (isMessageChanging()) {
						array_position = 0;
					}
				} else if (device == CODE_DEVICE_SEVENSEG) {
					sevendeg_choice = receive;
				} else if (device == CODE_DEVICE_GAME_COUNTER) {
     c7c:	80 91 24 01 	lds	r24, 0x0124
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	98 17       	cp	r25, r24
     c84:	51 f4       	brne	.+20     	; 0xc9a <SMTick2+0xe6>
					game_counter = receive;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	80 93 47 02 	sts	0x0247, r24
				}			
			} 
			break;
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <SMTick2+0xe8>
		default: break;
     c8e:	00 00       	nop
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <SMTick2+0xe8>
					sevendeg_choice = receive;
				} else if (device == CODE_DEVICE_GAME_COUNTER) {
					game_counter = receive;
				}			
			} 
			break;
     c92:	00 00       	nop
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <SMTick2+0xe8>
     c96:	00 00       	nop
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <SMTick2+0xe8>
     c9a:	00 00       	nop
		default: break;
	}
	return state;
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <SMTick3>:

/**
* get received message and show on seven seg display
*/
enum SM3_States { SM3_start };
int SMTick3(int state) {
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	60 97       	sbiw	r28, 0x10	; 16
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	98 8b       	std	Y+16, r25	; 0x10
     cc4:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned char const NUMBER_0 = 0x18;
     cc6:	88 e1       	ldi	r24, 0x18	; 24
     cc8:	89 83       	std	Y+1, r24	; 0x01
	unsigned char const NUMBER_1 = 0x7B;
     cca:	8b e7       	ldi	r24, 0x7B	; 123
     ccc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char const NUMBER_2 = 0x2C;
     cce:	8c e2       	ldi	r24, 0x2C	; 44
     cd0:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char const NUMBER_3 = 0x29;
     cd2:	89 e2       	ldi	r24, 0x29	; 41
     cd4:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char const NUMBER_4 = 0x4B;
     cd6:	8b e4       	ldi	r24, 0x4B	; 75
     cd8:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char const NUMBER_5 = 0x89;
     cda:	89 e8       	ldi	r24, 0x89	; 137
     cdc:	8e 83       	std	Y+6, r24	; 0x06
	unsigned char const NUMBER_6 = 0x88;
     cde:	88 e8       	ldi	r24, 0x88	; 136
     ce0:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char const NUMBER_7 = 0x3B;
     ce2:	8b e3       	ldi	r24, 0x3B	; 59
     ce4:	88 87       	std	Y+8, r24	; 0x08
	unsigned char const NUMBER_8 = 0x08;
     ce6:	88 e0       	ldi	r24, 0x08	; 8
     ce8:	89 87       	std	Y+9, r24	; 0x09
	unsigned char const NUMBER_9 = 0x0B;
     cea:	8b e0       	ldi	r24, 0x0B	; 11
     cec:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char const NUMBER_A = 0x0A;
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	8b 87       	std	Y+11, r24	; 0x0b
	unsigned char const NUMBER_C = 0x9C;
     cf2:	8c e9       	ldi	r24, 0x9C	; 156
     cf4:	8c 87       	std	Y+12, r24	; 0x0c
	unsigned char const NUMBER_E = 0x8C;
     cf6:	8c e8       	ldi	r24, 0x8C	; 140
     cf8:	8d 87       	std	Y+13, r24	; 0x0d
	unsigned char const NUMBER_DP = 0xF7;
     cfa:	87 ef       	ldi	r24, 0xF7	; 247
     cfc:	8e 87       	std	Y+14, r24	; 0x0e
	
	//State machine transitions
	switch (state) {
     cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     d00:	98 89       	ldd	r25, Y+16	; 0x10
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	19 f4       	brne	.+6      	; 0xd0c <SMTick3+0x5e>
		case SM3_start:
			state = SM3_start;
     d06:	18 8a       	std	Y+16, r1	; 0x10
     d08:	1f 86       	std	Y+15, r1	; 0x0f
			break;
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <SMTick3+0x64>
		default:
			state = SM3_start;
     d0c:	18 8a       	std	Y+16, r1	; 0x10
     d0e:	1f 86       	std	Y+15, r1	; 0x0f
			break;
     d10:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	98 89       	ldd	r25, Y+16	; 0x10
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	09 f0       	breq	.+2      	; 0xd1c <SMTick3+0x6e>
     d1a:	88 c0       	rjmp	.+272    	; 0xe2c <SMTick3+0x17e>
		case SM3_start: 
			if (sevendeg_choice == 0)  {
     d1c:	80 91 46 02 	lds	r24, 0x0246
     d20:	88 23       	and	r24, r24
     d22:	31 f4       	brne	.+12     	; 0xd30 <SMTick3+0x82>
				PORTA = NUMBER_0;
     d24:	82 e2       	ldi	r24, 0x22	; 34
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	29 81       	ldd	r18, Y+1	; 0x01
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     d2e:	7f c0       	rjmp	.+254    	; 0xe2e <SMTick3+0x180>
	//State machine actions
	switch(state) {
		case SM3_start: 
			if (sevendeg_choice == 0)  {
				PORTA = NUMBER_0;
			} else if (sevendeg_choice == 0x01)  {
     d30:	80 91 46 02 	lds	r24, 0x0246
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	31 f4       	brne	.+12     	; 0xd44 <SMTick3+0x96>
				PORTA = NUMBER_1;
     d38:	82 e2       	ldi	r24, 0x22	; 34
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	2a 81       	ldd	r18, Y+2	; 0x02
     d3e:	fc 01       	movw	r30, r24
     d40:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     d42:	75 c0       	rjmp	.+234    	; 0xe2e <SMTick3+0x180>
		case SM3_start: 
			if (sevendeg_choice == 0)  {
				PORTA = NUMBER_0;
			} else if (sevendeg_choice == 0x01)  {
				PORTA = NUMBER_1;
			} else if (sevendeg_choice == 0x02)  {
     d44:	80 91 46 02 	lds	r24, 0x0246
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	31 f4       	brne	.+12     	; 0xd58 <SMTick3+0xaa>
				PORTA = NUMBER_2;
     d4c:	82 e2       	ldi	r24, 0x22	; 34
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	2b 81       	ldd	r18, Y+3	; 0x03
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     d56:	6b c0       	rjmp	.+214    	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_0;
			} else if (sevendeg_choice == 0x01)  {
				PORTA = NUMBER_1;
			} else if (sevendeg_choice == 0x02)  {
				PORTA = NUMBER_2;
			} else if (sevendeg_choice == 0x03)  {
     d58:	80 91 46 02 	lds	r24, 0x0246
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	31 f4       	brne	.+12     	; 0xd6c <SMTick3+0xbe>
				PORTA = NUMBER_3;
     d60:	82 e2       	ldi	r24, 0x22	; 34
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	2c 81       	ldd	r18, Y+4	; 0x04
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     d6a:	61 c0       	rjmp	.+194    	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_1;
			} else if (sevendeg_choice == 0x02)  {
				PORTA = NUMBER_2;
			} else if (sevendeg_choice == 0x03)  {
				PORTA = NUMBER_3;
			} else if (sevendeg_choice == 0x04)  {
     d6c:	80 91 46 02 	lds	r24, 0x0246
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	31 f4       	brne	.+12     	; 0xd80 <SMTick3+0xd2>
				PORTA = NUMBER_4;
     d74:	82 e2       	ldi	r24, 0x22	; 34
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	2d 81       	ldd	r18, Y+5	; 0x05
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     d7e:	57 c0       	rjmp	.+174    	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_2;
			} else if (sevendeg_choice == 0x03)  {
				PORTA = NUMBER_3;
			} else if (sevendeg_choice == 0x04)  {
				PORTA = NUMBER_4;
			} else if (sevendeg_choice == 0x05)  {
     d80:	80 91 46 02 	lds	r24, 0x0246
     d84:	85 30       	cpi	r24, 0x05	; 5
     d86:	31 f4       	brne	.+12     	; 0xd94 <SMTick3+0xe6>
				PORTA = NUMBER_5;
     d88:	82 e2       	ldi	r24, 0x22	; 34
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	2e 81       	ldd	r18, Y+6	; 0x06
     d8e:	fc 01       	movw	r30, r24
     d90:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     d92:	4d c0       	rjmp	.+154    	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_3;
			} else if (sevendeg_choice == 0x04)  {
				PORTA = NUMBER_4;
			} else if (sevendeg_choice == 0x05)  {
				PORTA = NUMBER_5;
			} else if (sevendeg_choice == 0x06)  {
     d94:	80 91 46 02 	lds	r24, 0x0246
     d98:	86 30       	cpi	r24, 0x06	; 6
     d9a:	31 f4       	brne	.+12     	; 0xda8 <SMTick3+0xfa>
				PORTA = NUMBER_6;
     d9c:	82 e2       	ldi	r24, 0x22	; 34
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	2f 81       	ldd	r18, Y+7	; 0x07
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     da6:	43 c0       	rjmp	.+134    	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_4;
			} else if (sevendeg_choice == 0x05)  {
				PORTA = NUMBER_5;
			} else if (sevendeg_choice == 0x06)  {
				PORTA = NUMBER_6;
			} else if (sevendeg_choice == 0x07)  {
     da8:	80 91 46 02 	lds	r24, 0x0246
     dac:	87 30       	cpi	r24, 0x07	; 7
     dae:	31 f4       	brne	.+12     	; 0xdbc <SMTick3+0x10e>
				PORTA = NUMBER_7;
     db0:	82 e2       	ldi	r24, 0x22	; 34
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	28 85       	ldd	r18, Y+8	; 0x08
     db6:	fc 01       	movw	r30, r24
     db8:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     dba:	39 c0       	rjmp	.+114    	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_5;
			} else if (sevendeg_choice == 0x06)  {
				PORTA = NUMBER_6;
			} else if (sevendeg_choice == 0x07)  {
				PORTA = NUMBER_7;
			} else if (sevendeg_choice == 0x08)  {
     dbc:	80 91 46 02 	lds	r24, 0x0246
     dc0:	88 30       	cpi	r24, 0x08	; 8
     dc2:	31 f4       	brne	.+12     	; 0xdd0 <SMTick3+0x122>
				PORTA = NUMBER_8;
     dc4:	82 e2       	ldi	r24, 0x22	; 34
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	29 85       	ldd	r18, Y+9	; 0x09
     dca:	fc 01       	movw	r30, r24
     dcc:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     dce:	2f c0       	rjmp	.+94     	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_6;
			} else if (sevendeg_choice == 0x07)  {
				PORTA = NUMBER_7;
			} else if (sevendeg_choice == 0x08)  {
				PORTA = NUMBER_8;
			} else if (sevendeg_choice == 0x09)  {
     dd0:	80 91 46 02 	lds	r24, 0x0246
     dd4:	89 30       	cpi	r24, 0x09	; 9
     dd6:	31 f4       	brne	.+12     	; 0xde4 <SMTick3+0x136>
				PORTA = NUMBER_9;
     dd8:	82 e2       	ldi	r24, 0x22	; 34
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	2a 85       	ldd	r18, Y+10	; 0x0a
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     de2:	25 c0       	rjmp	.+74     	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_7;
			} else if (sevendeg_choice == 0x08)  {
				PORTA = NUMBER_8;
			} else if (sevendeg_choice == 0x09)  {
				PORTA = NUMBER_9;
			} else if (sevendeg_choice == 0x0A)  {
     de4:	80 91 46 02 	lds	r24, 0x0246
     de8:	8a 30       	cpi	r24, 0x0A	; 10
     dea:	31 f4       	brne	.+12     	; 0xdf8 <SMTick3+0x14a>
				PORTA = NUMBER_A;
     dec:	82 e2       	ldi	r24, 0x22	; 34
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	2b 85       	ldd	r18, Y+11	; 0x0b
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     df6:	1b c0       	rjmp	.+54     	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_8;
			} else if (sevendeg_choice == 0x09)  {
				PORTA = NUMBER_9;
			} else if (sevendeg_choice == 0x0A)  {
				PORTA = NUMBER_A;
			} else if (sevendeg_choice == 0x0C)  {
     df8:	80 91 46 02 	lds	r24, 0x0246
     dfc:	8c 30       	cpi	r24, 0x0C	; 12
     dfe:	31 f4       	brne	.+12     	; 0xe0c <SMTick3+0x15e>
				PORTA = NUMBER_C;
     e00:	82 e2       	ldi	r24, 0x22	; 34
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	2c 85       	ldd	r18, Y+12	; 0x0c
     e06:	fc 01       	movw	r30, r24
     e08:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <SMTick3+0x180>
				PORTA = NUMBER_9;
			} else if (sevendeg_choice == 0x0A)  {
				PORTA = NUMBER_A;
			} else if (sevendeg_choice == 0x0C)  {
				PORTA = NUMBER_C;
			} else if (sevendeg_choice == 0x0E)  {
     e0c:	80 91 46 02 	lds	r24, 0x0246
     e10:	8e 30       	cpi	r24, 0x0E	; 14
     e12:	31 f4       	brne	.+12     	; 0xe20 <SMTick3+0x172>
				PORTA = NUMBER_E;
     e14:	82 e2       	ldi	r24, 0x22	; 34
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <SMTick3+0x180>
			} else if (sevendeg_choice == 0x0C)  {
				PORTA = NUMBER_C;
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
     e20:	82 e2       	ldi	r24, 0x22	; 34
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	2e 85       	ldd	r18, Y+14	; 0x0e
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
			}
			break;
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <SMTick3+0x180>
		default: break;
     e2c:	00 00       	nop
	}
	return state;
     e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e30:	98 89       	ldd	r25, Y+16	; 0x10
}
     e32:	60 96       	adiw	r28, 0x10	; 16
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <main>:

// Implement scheduler code from PES.
int main() {
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	aa 97       	sbiw	r28, 0x2a	; 42
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA
	// to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
     e5c:	81 e2       	ldi	r24, 0x21	; 33
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	2f ef       	ldi	r18, 0xFF	; 255
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	82 e2       	ldi	r24, 0x22	; 34
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	fc 01       	movw	r30, r24
     e6c:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
     e6e:	84 e2       	ldi	r24, 0x24	; 36
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	2f ef       	ldi	r18, 0xFF	; 255
     e74:	fc 01       	movw	r30, r24
     e76:	20 83       	st	Z, r18
     e78:	85 e2       	ldi	r24, 0x25	; 37
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	fc 01       	movw	r30, r24
     e7e:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
     e80:	87 e2       	ldi	r24, 0x27	; 39
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	2f ef       	ldi	r18, 0xFF	; 255
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
     e8a:	88 e2       	ldi	r24, 0x28	; 40
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	fc 01       	movw	r30, r24
     e90:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
     e92:	8a e2       	ldi	r24, 0x2A	; 42
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	2f ef       	ldi	r18, 0xFF	; 255
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
     e9c:	8b e2       	ldi	r24, 0x2B	; 43
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	10 82       	st	Z, r1
	
	// Period for the tasks
	unsigned long int SMTick1_calc = 500;
     ea4:	84 ef       	ldi	r24, 0xF4	; 244
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	ad 83       	std	Y+5, r26	; 0x05
     eb2:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	a0 e0       	ldi	r26, 0x00	; 0
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	8f 83       	std	Y+7, r24	; 0x07
     ebe:	98 87       	std	Y+8, r25	; 0x08
     ec0:	a9 87       	std	Y+9, r26	; 0x09
     ec2:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick3_calc = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a0 e0       	ldi	r26, 0x00	; 0
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	8b 87       	std	Y+11, r24	; 0x0b
     ece:	9c 87       	std	Y+12, r25	; 0x0c
     ed0:	ad 87       	std	Y+13, r26	; 0x0d
     ed2:	be 87       	std	Y+14, r27	; 0x0e
	
	//Calculating GCD
	unsigned long int tmpGCD = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	8f 87       	std	Y+15, r24	; 0x0f
     ede:	98 8b       	std	Y+16, r25	; 0x10
     ee0:	a9 8b       	std	Y+17, r26	; 0x11
     ee2:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	ad 81       	ldd	r26, Y+5	; 0x05
     eea:	be 81       	ldd	r27, Y+6	; 0x06
     eec:	2f 81       	ldd	r18, Y+7	; 0x07
     eee:	38 85       	ldd	r19, Y+8	; 0x08
     ef0:	49 85       	ldd	r20, Y+9	; 0x09
     ef2:	5a 85       	ldd	r21, Y+10	; 0x0a
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <findGCD>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8f 87       	std	Y+15, r24	; 0x0f
     f02:	98 8b       	std	Y+16, r25	; 0x10
     f04:	a9 8b       	std	Y+17, r26	; 0x11
     f06:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(tmpGCD, SMTick3_calc);
     f08:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0a:	98 89       	ldd	r25, Y+16	; 0x10
     f0c:	a9 89       	ldd	r26, Y+17	; 0x11
     f0e:	ba 89       	ldd	r27, Y+18	; 0x12
     f10:	2b 85       	ldd	r18, Y+11	; 0x0b
     f12:	3c 85       	ldd	r19, Y+12	; 0x0c
     f14:	4d 85       	ldd	r20, Y+13	; 0x0d
     f16:	5e 85       	ldd	r21, Y+14	; 0x0e
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <findGCD>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	8f 87       	std	Y+15, r24	; 0x0f
     f26:	98 8b       	std	Y+16, r25	; 0x10
     f28:	a9 8b       	std	Y+17, r26	; 0x11
     f2a:	ba 8b       	std	Y+18, r27	; 0x12
	
	//Greatest common divisor for all tasks
	// or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
     f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2e:	98 89       	ldd	r25, Y+16	; 0x10
     f30:	a9 89       	ldd	r26, Y+17	; 0x11
     f32:	ba 89       	ldd	r27, Y+18	; 0x12
     f34:	8b 8b       	std	Y+19, r24	; 0x13
     f36:	9c 8b       	std	Y+20, r25	; 0x14
     f38:	ad 8b       	std	Y+21, r26	; 0x15
     f3a:	be 8b       	std	Y+22, r27	; 0x16
	
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	ad 81       	ldd	r26, Y+5	; 0x05
     f42:	be 81       	ldd	r27, Y+6	; 0x06
     f44:	2b 89       	ldd	r18, Y+19	; 0x13
     f46:	3c 89       	ldd	r19, Y+20	; 0x14
     f48:	4d 89       	ldd	r20, Y+21	; 0x15
     f4a:	5e 89       	ldd	r21, Y+22	; 0x16
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__udivmodsi4>
     f54:	2f 8b       	std	Y+23, r18	; 0x17
     f56:	38 8f       	std	Y+24, r19	; 0x18
     f58:	49 8f       	std	Y+25, r20	; 0x19
     f5a:	5a 8f       	std	Y+26, r21	; 0x1a
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
     f5c:	8f 81       	ldd	r24, Y+7	; 0x07
     f5e:	98 85       	ldd	r25, Y+8	; 0x08
     f60:	a9 85       	ldd	r26, Y+9	; 0x09
     f62:	ba 85       	ldd	r27, Y+10	; 0x0a
     f64:	2b 89       	ldd	r18, Y+19	; 0x13
     f66:	3c 89       	ldd	r19, Y+20	; 0x14
     f68:	4d 89       	ldd	r20, Y+21	; 0x15
     f6a:	5e 89       	ldd	r21, Y+22	; 0x16
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__udivmodsi4>
     f74:	2b 8f       	std	Y+27, r18	; 0x1b
     f76:	3c 8f       	std	Y+28, r19	; 0x1c
     f78:	4d 8f       	std	Y+29, r20	; 0x1d
     f7a:	5e 8f       	std	Y+30, r21	; 0x1e
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
     f7c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f80:	ad 85       	ldd	r26, Y+13	; 0x0d
     f82:	be 85       	ldd	r27, Y+14	; 0x0e
     f84:	2b 89       	ldd	r18, Y+19	; 0x13
     f86:	3c 89       	ldd	r19, Y+20	; 0x14
     f88:	4d 89       	ldd	r20, Y+21	; 0x15
     f8a:	5e 89       	ldd	r21, Y+22	; 0x16
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__udivmodsi4>
     f94:	2f 8f       	std	Y+31, r18	; 0x1f
     f96:	38 a3       	std	Y+32, r19	; 0x20
     f98:	49 a3       	std	Y+33, r20	; 0x21
     f9a:	5a a3       	std	Y+34, r21	; 0x22

	//Declare an array of tasks
	static task task1, task2, task3;
	task *tasks[] = { &task1 , &task2, &task3 };
     f9c:	ce 01       	movw	r24, r28
     f9e:	85 96       	adiw	r24, 0x25	; 37
     fa0:	27 e3       	ldi	r18, 0x37	; 55
     fa2:	32 e0       	ldi	r19, 0x02	; 2
     fa4:	46 e0       	ldi	r20, 0x06	; 6
     fa6:	f9 01       	movw	r30, r18
     fa8:	00 80       	ld	r0, Z
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	fc 01       	movw	r30, r24
     fb0:	00 82       	st	Z, r0
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	41 50       	subi	r20, 0x01	; 1
     fb6:	44 23       	and	r20, r20
     fb8:	b1 f7       	brne	.-20     	; 0xfa6 <main+0x162>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9c a3       	std	Y+36, r25	; 0x24
     fc0:	8b a3       	std	Y+35, r24	; 0x23
	// Task 1
	task1.state = -1;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	80 93 48 02 	sts	0x0248, r24
	task1.period = SMTick1_period;
     fc8:	8f 89       	ldd	r24, Y+23	; 0x17
     fca:	98 8d       	ldd	r25, Y+24	; 0x18
     fcc:	a9 8d       	ldd	r26, Y+25	; 0x19
     fce:	ba 8d       	ldd	r27, Y+26	; 0x1a
     fd0:	80 93 49 02 	sts	0x0249, r24
     fd4:	90 93 4a 02 	sts	0x024A, r25
     fd8:	a0 93 4b 02 	sts	0x024B, r26
     fdc:	b0 93 4c 02 	sts	0x024C, r27
	task1.elapsedTime = SMTick1_period;
     fe0:	8f 89       	ldd	r24, Y+23	; 0x17
     fe2:	98 8d       	ldd	r25, Y+24	; 0x18
     fe4:	a9 8d       	ldd	r26, Y+25	; 0x19
     fe6:	ba 8d       	ldd	r27, Y+26	; 0x1a
     fe8:	80 93 4d 02 	sts	0x024D, r24
     fec:	90 93 4e 02 	sts	0x024E, r25
     ff0:	a0 93 4f 02 	sts	0x024F, r26
     ff4:	b0 93 50 02 	sts	0x0250, r27
	task1.TickFct = &SMTick1;
     ff8:	84 e1       	ldi	r24, 0x14	; 20
     ffa:	95 e0       	ldi	r25, 0x05	; 5
     ffc:	90 93 52 02 	sts	0x0252, r25
    1000:	80 93 51 02 	sts	0x0251, r24
	// Task 2
	task2.state = -1;
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	80 93 53 02 	sts	0x0253, r24
	task2.period = SMTick2_period;
    100a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    100c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1010:	be 8d       	ldd	r27, Y+30	; 0x1e
    1012:	80 93 54 02 	sts	0x0254, r24
    1016:	90 93 55 02 	sts	0x0255, r25
    101a:	a0 93 56 02 	sts	0x0256, r26
    101e:	b0 93 57 02 	sts	0x0257, r27
	task2.elapsedTime = SMTick2_period;
    1022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1026:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1028:	be 8d       	ldd	r27, Y+30	; 0x1e
    102a:	80 93 58 02 	sts	0x0258, r24
    102e:	90 93 59 02 	sts	0x0259, r25
    1032:	a0 93 5a 02 	sts	0x025A, r26
    1036:	b0 93 5b 02 	sts	0x025B, r27
	task2.TickFct = &SMTick2;
    103a:	8a ed       	ldi	r24, 0xDA	; 218
    103c:	95 e0       	ldi	r25, 0x05	; 5
    103e:	90 93 5d 02 	sts	0x025D, r25
    1042:	80 93 5c 02 	sts	0x025C, r24
	// Task 3
	task3.state = -1;
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	80 93 5e 02 	sts	0x025E, r24
	task3.period = SMTick3_period;
    104c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    104e:	98 a1       	ldd	r25, Y+32	; 0x20
    1050:	a9 a1       	ldd	r26, Y+33	; 0x21
    1052:	ba a1       	ldd	r27, Y+34	; 0x22
    1054:	80 93 5f 02 	sts	0x025F, r24
    1058:	90 93 60 02 	sts	0x0260, r25
    105c:	a0 93 61 02 	sts	0x0261, r26
    1060:	b0 93 62 02 	sts	0x0262, r27
	task3.elapsedTime = SMTick3_period;
    1064:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1066:	98 a1       	ldd	r25, Y+32	; 0x20
    1068:	a9 a1       	ldd	r26, Y+33	; 0x21
    106a:	ba a1       	ldd	r27, Y+34	; 0x22
    106c:	80 93 63 02 	sts	0x0263, r24
    1070:	90 93 64 02 	sts	0x0264, r25
    1074:	a0 93 65 02 	sts	0x0265, r26
    1078:	b0 93 66 02 	sts	0x0266, r27
	task3.TickFct = &SMTick3;
    107c:	87 e5       	ldi	r24, 0x57	; 87
    107e:	96 e0       	ldi	r25, 0x06	; 6
    1080:	90 93 68 02 	sts	0x0268, r25
    1084:	80 93 67 02 	sts	0x0267, r24
	// Set the timer and turn it on
	TimerSet(GCD);
    1088:	8b 89       	ldd	r24, Y+19	; 0x13
    108a:	9c 89       	ldd	r25, Y+20	; 0x14
    108c:	ad 89       	ldd	r26, Y+21	; 0x15
    108e:	be 89       	ldd	r27, Y+22	; 0x16
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 8f 03 	call	0x71e	; 0x71e <TimerSet>
	TimerOn();
    1098:	0e 94 e5 02 	call	0x5ca	; 0x5ca <TimerOn>
	// Scheduler for-loop iterator
	unsigned short i;
	LCD_init();
    109c:	0e 94 17 09 	call	0x122e	; 0x122e <LCD_init>
	LCD_ClearScreen();
    10a0:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_ClearScreen>
	
	initUSART(1);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 67 00 	call	0xce	; 0xce <initUSART>
	USART_Flush(1);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <USART_Flush>
	
	//start with welcome
	sevendeg_choice = 0xFF;
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	80 93 46 02 	sts	0x0246, r24
	lcd_choice = CODE_DISPLAY_WELCOME;
    10b6:	80 91 19 01 	lds	r24, 0x0119
    10ba:	80 93 44 02 	sts	0x0244, r24
	
	while(1) {		
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    10be:	1a 82       	std	Y+2, r1	; 0x02
    10c0:	19 82       	std	Y+1, r1	; 0x01
    10c2:	9b c0       	rjmp	.+310    	; 0x11fa <main+0x3b6>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	9e 01       	movw	r18, r28
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	84 96       	adiw	r24, 0x24	; 36
    10d8:	fc 01       	movw	r30, r24
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	fc 01       	movw	r30, r24
    10e0:	25 81       	ldd	r18, Z+5	; 0x05
    10e2:	36 81       	ldd	r19, Z+6	; 0x06
    10e4:	47 81       	ldd	r20, Z+7	; 0x07
    10e6:	50 85       	ldd	r21, Z+8	; 0x08
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	be 01       	movw	r22, r28
    10f2:	6f 5f       	subi	r22, 0xFF	; 255
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	86 0f       	add	r24, r22
    10f8:	97 1f       	adc	r25, r23
    10fa:	84 96       	adiw	r24, 0x24	; 36
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	fc 01       	movw	r30, r24
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	92 81       	ldd	r25, Z+2	; 0x02
    1108:	a3 81       	ldd	r26, Z+3	; 0x03
    110a:	b4 81       	ldd	r27, Z+4	; 0x04
    110c:	28 17       	cp	r18, r24
    110e:	39 07       	cpc	r19, r25
    1110:	4a 07       	cpc	r20, r26
    1112:	5b 07       	cpc	r21, r27
    1114:	09 f0       	breq	.+2      	; 0x1118 <main+0x2d4>
    1116:	45 c0       	rjmp	.+138    	; 0x11a2 <main+0x35e>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	9e 01       	movw	r18, r28
    1122:	2f 5f       	subi	r18, 0xFF	; 255
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	84 96       	adiw	r24, 0x24	; 36
    112c:	fc 01       	movw	r30, r24
    112e:	00 81       	ld	r16, Z
    1130:	11 81       	ldd	r17, Z+1	; 0x01
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	9e 01       	movw	r18, r28
    113c:	2f 5f       	subi	r18, 0xFF	; 255
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	82 0f       	add	r24, r18
    1142:	93 1f       	adc	r25, r19
    1144:	84 96       	adiw	r24, 0x24	; 36
    1146:	fc 01       	movw	r30, r24
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	fc 01       	movw	r30, r24
    114e:	21 85       	ldd	r18, Z+9	; 0x09
    1150:	32 85       	ldd	r19, Z+10	; 0x0a
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	ae 01       	movw	r20, r28
    115c:	4f 5f       	subi	r20, 0xFF	; 255
    115e:	5f 4f       	sbci	r21, 0xFF	; 255
    1160:	84 0f       	add	r24, r20
    1162:	95 1f       	adc	r25, r21
    1164:	84 96       	adiw	r24, 0x24	; 36
    1166:	fc 01       	movw	r30, r24
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	fc 01       	movw	r30, r24
    116e:	80 81       	ld	r24, Z
    1170:	99 27       	eor	r25, r25
    1172:	87 fd       	sbrc	r24, 7
    1174:	90 95       	com	r25
    1176:	f9 01       	movw	r30, r18
    1178:	09 95       	icall
    117a:	f8 01       	movw	r30, r16
    117c:	80 83       	st	Z, r24
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	9e 01       	movw	r18, r28
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	82 0f       	add	r24, r18
    118e:	93 1f       	adc	r25, r19
    1190:	84 96       	adiw	r24, 0x24	; 36
    1192:	fc 01       	movw	r30, r24
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	fc 01       	movw	r30, r24
    119a:	15 82       	std	Z+5, r1	; 0x05
    119c:	16 82       	std	Z+6, r1	; 0x06
    119e:	17 82       	std	Z+7, r1	; 0x07
    11a0:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	9e 01       	movw	r18, r28
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	82 0f       	add	r24, r18
    11b2:	93 1f       	adc	r25, r19
    11b4:	84 96       	adiw	r24, 0x24	; 36
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 81       	ld	r18, Z
    11ba:	31 81       	ldd	r19, Z+1	; 0x01
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	ae 01       	movw	r20, r28
    11c6:	4f 5f       	subi	r20, 0xFF	; 255
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	84 0f       	add	r24, r20
    11cc:	95 1f       	adc	r25, r21
    11ce:	84 96       	adiw	r24, 0x24	; 36
    11d0:	fc 01       	movw	r30, r24
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	fc 01       	movw	r30, r24
    11d8:	85 81       	ldd	r24, Z+5	; 0x05
    11da:	96 81       	ldd	r25, Z+6	; 0x06
    11dc:	a7 81       	ldd	r26, Z+7	; 0x07
    11de:	b0 85       	ldd	r27, Z+8	; 0x08
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	a1 1d       	adc	r26, r1
    11e4:	b1 1d       	adc	r27, r1
    11e6:	f9 01       	movw	r30, r18
    11e8:	85 83       	std	Z+5, r24	; 0x05
    11ea:	96 83       	std	Z+6, r25	; 0x06
    11ec:	a7 83       	std	Z+7, r26	; 0x07
    11ee:	b0 87       	std	Z+8, r27	; 0x08
	sevendeg_choice = 0xFF;
	lcd_choice = CODE_DISPLAY_WELCOME;
	
	while(1) {		
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	29 81       	ldd	r18, Y+1	; 0x01
    11fc:	3a 81       	ldd	r19, Y+2	; 0x02
    11fe:	8b a1       	ldd	r24, Y+35	; 0x23
    1200:	9c a1       	ldd	r25, Y+36	; 0x24
    1202:	28 17       	cp	r18, r24
    1204:	39 07       	cpc	r19, r25
    1206:	08 f4       	brcc	.+2      	; 0x120a <main+0x3c6>
    1208:	5d cf       	rjmp	.-326    	; 0x10c4 <main+0x280>
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
    120a:	00 00       	nop
    120c:	80 91 3e 02 	lds	r24, 0x023E
    1210:	88 23       	and	r24, r24
    1212:	e1 f3       	breq	.-8      	; 0x120c <main+0x3c8>
		TimerFlag = 0;
    1214:	10 92 3e 02 	sts	0x023E, r1
	}
    1218:	52 cf       	rjmp	.-348    	; 0x10be <main+0x27a>

0000121a <LCD_ClearScreen>:
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_WriteCommand>
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <LCD_init>:

void LCD_init(void) {
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
    1236:	84 e6       	ldi	r24, 0x64	; 100
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <delay_ms>
	LCD_WriteCommand(0x38);
    123e:	88 e3       	ldi	r24, 0x38	; 56
    1240:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
    124a:	8f e0       	ldi	r24, 0x0F	; 15
    124c:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_WriteCommand>
	delay_ms(10);						 
    1256:	8a e0       	ldi	r24, 0x0A	; 10
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <delay_ms>
}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <LCD_WriteCommand>:

void LCD_WriteCommand (unsigned char Command) {
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
    1270:	8b e2       	ldi	r24, 0x2B	; 43
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	2b e2       	ldi	r18, 0x2B	; 43
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	2f 7b       	andi	r18, 0xBF	; 191
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18
   DATA_BUS = Command;
    1282:	88 e2       	ldi	r24, 0x28	; 40
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	29 81       	ldd	r18, Y+1	; 0x01
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
    128c:	8b e2       	ldi	r24, 0x2B	; 43
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	2b e2       	ldi	r18, 0x2B	; 43
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	f9 01       	movw	r30, r18
    1296:	20 81       	ld	r18, Z
    1298:	20 68       	ori	r18, 0x80	; 128
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
   asm("nop");
    129e:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
    12a0:	8b e2       	ldi	r24, 0x2B	; 43
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	2b e2       	ldi	r18, 0x2B	; 43
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	f9 01       	movw	r30, r18
    12aa:	20 81       	ld	r18, Z
    12ac:	2f 77       	andi	r18, 0x7F	; 127
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <delay_ms>
}
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	0f 92       	push	r0
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
    12ce:	8b e2       	ldi	r24, 0x2B	; 43
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	2b e2       	ldi	r18, 0x2B	; 43
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	f9 01       	movw	r30, r18
    12d8:	20 81       	ld	r18, Z
    12da:	20 64       	ori	r18, 0x40	; 64
    12dc:	fc 01       	movw	r30, r24
    12de:	20 83       	st	Z, r18
   DATA_BUS = Data;
    12e0:	88 e2       	ldi	r24, 0x28	; 40
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	29 81       	ldd	r18, Y+1	; 0x01
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
    12ea:	8b e2       	ldi	r24, 0x2B	; 43
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	2b e2       	ldi	r18, 0x2B	; 43
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	f9 01       	movw	r30, r18
    12f4:	20 81       	ld	r18, Z
    12f6:	20 68       	ori	r18, 0x80	; 128
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
   asm("nop");
    12fc:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
    12fe:	8b e2       	ldi	r24, 0x2B	; 43
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	2b e2       	ldi	r18, 0x2B	; 43
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	f9 01       	movw	r30, r18
    1308:	20 81       	ld	r18, Z
    130a:	2f 77       	andi	r18, 0x7F	; 127
    130c:	fc 01       	movw	r30, r24
    130e:	20 83       	st	Z, r18
   delay_ms(1);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <delay_ms>
}
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <LCD_DisplayString+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <LCD_DisplayString+0x8>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	7c 83       	std	Y+4, r23	; 0x04
    1330:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
    1332:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_ClearScreen>
   unsigned char c = column;
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
    133a:	12 c0       	rjmp	.+36     	; 0x1360 <LCD_DisplayString+0x40>
      LCD_Cursor(c++);
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	99 81       	ldd	r25, Y+1	; 0x01
    1340:	9f 5f       	subi	r25, 0xFF	; 255
    1342:	99 83       	std	Y+1, r25	; 0x01
    1344:	0e 94 bd 09 	call	0x137a	; 0x137a <LCD_Cursor>
      LCD_WriteData(*string++);
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	fc 01       	movw	r30, r24
    134e:	20 81       	ld	r18, Z
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
    135a:	82 2f       	mov	r24, r18
    135c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	fc 01       	movw	r30, r24
    1366:	80 81       	ld	r24, Z
    1368:	88 23       	and	r24, r24
    136a:	41 f7       	brne	.-48     	; 0x133c <LCD_DisplayString+0x1c>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	0f 92       	push	r0
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	81 31       	cpi	r24, 0x11	; 17
    138a:	28 f4       	brcc	.+10     	; 0x1396 <LCD_Cursor+0x1c>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 58       	subi	r24, 0x81	; 129
    1390:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_WriteCommand>
    1394:	04 c0       	rjmp	.+8      	; 0x139e <LCD_Cursor+0x24>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	81 55       	subi	r24, 0x51	; 81
    139a:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <delay_ms+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <delay_ms+0x8>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <delay_ms+0xa>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
    13b8:	1a 82       	std	Y+2, r1	; 0x02
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <delay_ms+0x40>
    for(j=0;j<775;j++)
    13be:	1c 82       	std	Y+4, r1	; 0x04
    13c0:	1b 82       	std	Y+3, r1	; 0x03
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <delay_ms+0x2a>
  {
   asm("nop");
    13c4:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	23 e0       	ldi	r18, 0x03	; 3
    13d6:	87 30       	cpi	r24, 0x07	; 7
    13d8:	92 07       	cpc	r25, r18
    13da:	a4 f3       	brlt	.-24     	; 0x13c4 <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	29 81       	ldd	r18, Y+1	; 0x01
    13e8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	28 17       	cp	r18, r24
    13f0:	39 07       	cpc	r19, r25
    13f2:	2c f3       	brlt	.-54     	; 0x13be <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
    13f4:	26 96       	adiw	r28, 0x06	; 6
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <__cmpsf2>:
    1406:	9c d0       	rcall	.+312    	; 0x1540 <__fp_cmp>
    1408:	08 f4       	brcc	.+2      	; 0x140c <__cmpsf2+0x6>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	08 95       	ret

0000140e <__divsf3>:
    140e:	0c d0       	rcall	.+24     	; 0x1428 <__divsf3x>
    1410:	d2 c0       	rjmp	.+420    	; 0x15b6 <__fp_round>
    1412:	ca d0       	rcall	.+404    	; 0x15a8 <__fp_pscB>
    1414:	40 f0       	brcs	.+16     	; 0x1426 <__divsf3+0x18>
    1416:	c1 d0       	rcall	.+386    	; 0x159a <__fp_pscA>
    1418:	30 f0       	brcs	.+12     	; 0x1426 <__divsf3+0x18>
    141a:	21 f4       	brne	.+8      	; 0x1424 <__divsf3+0x16>
    141c:	5f 3f       	cpi	r21, 0xFF	; 255
    141e:	19 f0       	breq	.+6      	; 0x1426 <__divsf3+0x18>
    1420:	b3 c0       	rjmp	.+358    	; 0x1588 <__fp_inf>
    1422:	51 11       	cpse	r21, r1
    1424:	fc c0       	rjmp	.+504    	; 0x161e <__fp_szero>
    1426:	b6 c0       	rjmp	.+364    	; 0x1594 <__fp_nan>

00001428 <__divsf3x>:
    1428:	d7 d0       	rcall	.+430    	; 0x15d8 <__fp_split3>
    142a:	98 f3       	brcs	.-26     	; 0x1412 <__divsf3+0x4>

0000142c <__divsf3_pse>:
    142c:	99 23       	and	r25, r25
    142e:	c9 f3       	breq	.-14     	; 0x1422 <__divsf3+0x14>
    1430:	55 23       	and	r21, r21
    1432:	b1 f3       	breq	.-20     	; 0x1420 <__divsf3+0x12>
    1434:	95 1b       	sub	r25, r21
    1436:	55 0b       	sbc	r21, r21
    1438:	bb 27       	eor	r27, r27
    143a:	aa 27       	eor	r26, r26
    143c:	62 17       	cp	r22, r18
    143e:	73 07       	cpc	r23, r19
    1440:	84 07       	cpc	r24, r20
    1442:	38 f0       	brcs	.+14     	; 0x1452 <__divsf3_pse+0x26>
    1444:	9f 5f       	subi	r25, 0xFF	; 255
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	44 1f       	adc	r20, r20
    144e:	aa 1f       	adc	r26, r26
    1450:	a9 f3       	breq	.-22     	; 0x143c <__divsf3_pse+0x10>
    1452:	33 d0       	rcall	.+102    	; 0x14ba <__divsf3_pse+0x8e>
    1454:	0e 2e       	mov	r0, r30
    1456:	3a f0       	brmi	.+14     	; 0x1466 <__divsf3_pse+0x3a>
    1458:	e0 e8       	ldi	r30, 0x80	; 128
    145a:	30 d0       	rcall	.+96     	; 0x14bc <__divsf3_pse+0x90>
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	50 40       	sbci	r21, 0x00	; 0
    1460:	e6 95       	lsr	r30
    1462:	00 1c       	adc	r0, r0
    1464:	ca f7       	brpl	.-14     	; 0x1458 <__divsf3_pse+0x2c>
    1466:	29 d0       	rcall	.+82     	; 0x14ba <__divsf3_pse+0x8e>
    1468:	fe 2f       	mov	r31, r30
    146a:	27 d0       	rcall	.+78     	; 0x14ba <__divsf3_pse+0x8e>
    146c:	66 0f       	add	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	bb 1f       	adc	r27, r27
    1474:	26 17       	cp	r18, r22
    1476:	37 07       	cpc	r19, r23
    1478:	48 07       	cpc	r20, r24
    147a:	ab 07       	cpc	r26, r27
    147c:	b0 e8       	ldi	r27, 0x80	; 128
    147e:	09 f0       	breq	.+2      	; 0x1482 <__divsf3_pse+0x56>
    1480:	bb 0b       	sbc	r27, r27
    1482:	80 2d       	mov	r24, r0
    1484:	bf 01       	movw	r22, r30
    1486:	ff 27       	eor	r31, r31
    1488:	93 58       	subi	r25, 0x83	; 131
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	2a f0       	brmi	.+10     	; 0x1498 <__divsf3_pse+0x6c>
    148e:	9e 3f       	cpi	r25, 0xFE	; 254
    1490:	51 05       	cpc	r21, r1
    1492:	68 f0       	brcs	.+26     	; 0x14ae <__divsf3_pse+0x82>
    1494:	79 c0       	rjmp	.+242    	; 0x1588 <__fp_inf>
    1496:	c3 c0       	rjmp	.+390    	; 0x161e <__fp_szero>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	ec f3       	brlt	.-6      	; 0x1496 <__divsf3_pse+0x6a>
    149c:	98 3e       	cpi	r25, 0xE8	; 232
    149e:	dc f3       	brlt	.-10     	; 0x1496 <__divsf3_pse+0x6a>
    14a0:	86 95       	lsr	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f7 95       	ror	r31
    14aa:	9f 5f       	subi	r25, 0xFF	; 255
    14ac:	c9 f7       	brne	.-14     	; 0x14a0 <__divsf3_pse+0x74>
    14ae:	88 0f       	add	r24, r24
    14b0:	91 1d       	adc	r25, r1
    14b2:	96 95       	lsr	r25
    14b4:	87 95       	ror	r24
    14b6:	97 f9       	bld	r25, 7
    14b8:	08 95       	ret
    14ba:	e1 e0       	ldi	r30, 0x01	; 1
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	bb 1f       	adc	r27, r27
    14c4:	62 17       	cp	r22, r18
    14c6:	73 07       	cpc	r23, r19
    14c8:	84 07       	cpc	r24, r20
    14ca:	ba 07       	cpc	r27, r26
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <__divsf3_pse+0xaa>
    14ce:	62 1b       	sub	r22, r18
    14d0:	73 0b       	sbc	r23, r19
    14d2:	84 0b       	sbc	r24, r20
    14d4:	ba 0b       	sbc	r27, r26
    14d6:	ee 1f       	adc	r30, r30
    14d8:	88 f7       	brcc	.-30     	; 0x14bc <__divsf3_pse+0x90>
    14da:	e0 95       	com	r30
    14dc:	08 95       	ret

000014de <__fixsfsi>:
    14de:	04 d0       	rcall	.+8      	; 0x14e8 <__fixunssfsi>
    14e0:	68 94       	set
    14e2:	b1 11       	cpse	r27, r1
    14e4:	9c c0       	rjmp	.+312    	; 0x161e <__fp_szero>
    14e6:	08 95       	ret

000014e8 <__fixunssfsi>:
    14e8:	7f d0       	rcall	.+254    	; 0x15e8 <__fp_splitA>
    14ea:	88 f0       	brcs	.+34     	; 0x150e <__fixunssfsi+0x26>
    14ec:	9f 57       	subi	r25, 0x7F	; 127
    14ee:	90 f0       	brcs	.+36     	; 0x1514 <__fixunssfsi+0x2c>
    14f0:	b9 2f       	mov	r27, r25
    14f2:	99 27       	eor	r25, r25
    14f4:	b7 51       	subi	r27, 0x17	; 23
    14f6:	a0 f0       	brcs	.+40     	; 0x1520 <__fixunssfsi+0x38>
    14f8:	d1 f0       	breq	.+52     	; 0x152e <__fixunssfsi+0x46>
    14fa:	66 0f       	add	r22, r22
    14fc:	77 1f       	adc	r23, r23
    14fe:	88 1f       	adc	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	1a f0       	brmi	.+6      	; 0x150a <__fixunssfsi+0x22>
    1504:	ba 95       	dec	r27
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__fixunssfsi+0x12>
    1508:	12 c0       	rjmp	.+36     	; 0x152e <__fixunssfsi+0x46>
    150a:	b1 30       	cpi	r27, 0x01	; 1
    150c:	81 f0       	breq	.+32     	; 0x152e <__fixunssfsi+0x46>
    150e:	86 d0       	rcall	.+268    	; 0x161c <__fp_zero>
    1510:	b1 e0       	ldi	r27, 0x01	; 1
    1512:	08 95       	ret
    1514:	83 c0       	rjmp	.+262    	; 0x161c <__fp_zero>
    1516:	67 2f       	mov	r22, r23
    1518:	78 2f       	mov	r23, r24
    151a:	88 27       	eor	r24, r24
    151c:	b8 5f       	subi	r27, 0xF8	; 248
    151e:	39 f0       	breq	.+14     	; 0x152e <__fixunssfsi+0x46>
    1520:	b9 3f       	cpi	r27, 0xF9	; 249
    1522:	cc f3       	brlt	.-14     	; 0x1516 <__fixunssfsi+0x2e>
    1524:	86 95       	lsr	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b3 95       	inc	r27
    152c:	d9 f7       	brne	.-10     	; 0x1524 <__fixunssfsi+0x3c>
    152e:	3e f4       	brtc	.+14     	; 0x153e <__fixunssfsi+0x56>
    1530:	90 95       	com	r25
    1532:	80 95       	com	r24
    1534:	70 95       	com	r23
    1536:	61 95       	neg	r22
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	8f 4f       	sbci	r24, 0xFF	; 255
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	08 95       	ret

00001540 <__fp_cmp>:
    1540:	99 0f       	add	r25, r25
    1542:	00 08       	sbc	r0, r0
    1544:	55 0f       	add	r21, r21
    1546:	aa 0b       	sbc	r26, r26
    1548:	e0 e8       	ldi	r30, 0x80	; 128
    154a:	fe ef       	ldi	r31, 0xFE	; 254
    154c:	16 16       	cp	r1, r22
    154e:	17 06       	cpc	r1, r23
    1550:	e8 07       	cpc	r30, r24
    1552:	f9 07       	cpc	r31, r25
    1554:	c0 f0       	brcs	.+48     	; 0x1586 <__fp_cmp+0x46>
    1556:	12 16       	cp	r1, r18
    1558:	13 06       	cpc	r1, r19
    155a:	e4 07       	cpc	r30, r20
    155c:	f5 07       	cpc	r31, r21
    155e:	98 f0       	brcs	.+38     	; 0x1586 <__fp_cmp+0x46>
    1560:	62 1b       	sub	r22, r18
    1562:	73 0b       	sbc	r23, r19
    1564:	84 0b       	sbc	r24, r20
    1566:	95 0b       	sbc	r25, r21
    1568:	39 f4       	brne	.+14     	; 0x1578 <__fp_cmp+0x38>
    156a:	0a 26       	eor	r0, r26
    156c:	61 f0       	breq	.+24     	; 0x1586 <__fp_cmp+0x46>
    156e:	23 2b       	or	r18, r19
    1570:	24 2b       	or	r18, r20
    1572:	25 2b       	or	r18, r21
    1574:	21 f4       	brne	.+8      	; 0x157e <__fp_cmp+0x3e>
    1576:	08 95       	ret
    1578:	0a 26       	eor	r0, r26
    157a:	09 f4       	brne	.+2      	; 0x157e <__fp_cmp+0x3e>
    157c:	a1 40       	sbci	r26, 0x01	; 1
    157e:	a6 95       	lsr	r26
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	81 1d       	adc	r24, r1
    1584:	81 1d       	adc	r24, r1
    1586:	08 95       	ret

00001588 <__fp_inf>:
    1588:	97 f9       	bld	r25, 7
    158a:	9f 67       	ori	r25, 0x7F	; 127
    158c:	80 e8       	ldi	r24, 0x80	; 128
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	08 95       	ret

00001594 <__fp_nan>:
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    1596:	80 ec       	ldi	r24, 0xC0	; 192
    1598:	08 95       	ret

0000159a <__fp_pscA>:
    159a:	00 24       	eor	r0, r0
    159c:	0a 94       	dec	r0
    159e:	16 16       	cp	r1, r22
    15a0:	17 06       	cpc	r1, r23
    15a2:	18 06       	cpc	r1, r24
    15a4:	09 06       	cpc	r0, r25
    15a6:	08 95       	ret

000015a8 <__fp_pscB>:
    15a8:	00 24       	eor	r0, r0
    15aa:	0a 94       	dec	r0
    15ac:	12 16       	cp	r1, r18
    15ae:	13 06       	cpc	r1, r19
    15b0:	14 06       	cpc	r1, r20
    15b2:	05 06       	cpc	r0, r21
    15b4:	08 95       	ret

000015b6 <__fp_round>:
    15b6:	09 2e       	mov	r0, r25
    15b8:	03 94       	inc	r0
    15ba:	00 0c       	add	r0, r0
    15bc:	11 f4       	brne	.+4      	; 0x15c2 <__fp_round+0xc>
    15be:	88 23       	and	r24, r24
    15c0:	52 f0       	brmi	.+20     	; 0x15d6 <__fp_round+0x20>
    15c2:	bb 0f       	add	r27, r27
    15c4:	40 f4       	brcc	.+16     	; 0x15d6 <__fp_round+0x20>
    15c6:	bf 2b       	or	r27, r31
    15c8:	11 f4       	brne	.+4      	; 0x15ce <__fp_round+0x18>
    15ca:	60 ff       	sbrs	r22, 0
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__fp_round+0x20>
    15ce:	6f 5f       	subi	r22, 0xFF	; 255
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	08 95       	ret

000015d8 <__fp_split3>:
    15d8:	57 fd       	sbrc	r21, 7
    15da:	90 58       	subi	r25, 0x80	; 128
    15dc:	44 0f       	add	r20, r20
    15de:	55 1f       	adc	r21, r21
    15e0:	59 f0       	breq	.+22     	; 0x15f8 <__fp_splitA+0x10>
    15e2:	5f 3f       	cpi	r21, 0xFF	; 255
    15e4:	71 f0       	breq	.+28     	; 0x1602 <__fp_splitA+0x1a>
    15e6:	47 95       	ror	r20

000015e8 <__fp_splitA>:
    15e8:	88 0f       	add	r24, r24
    15ea:	97 fb       	bst	r25, 7
    15ec:	99 1f       	adc	r25, r25
    15ee:	61 f0       	breq	.+24     	; 0x1608 <__fp_splitA+0x20>
    15f0:	9f 3f       	cpi	r25, 0xFF	; 255
    15f2:	79 f0       	breq	.+30     	; 0x1612 <__fp_splitA+0x2a>
    15f4:	87 95       	ror	r24
    15f6:	08 95       	ret
    15f8:	12 16       	cp	r1, r18
    15fa:	13 06       	cpc	r1, r19
    15fc:	14 06       	cpc	r1, r20
    15fe:	55 1f       	adc	r21, r21
    1600:	f2 cf       	rjmp	.-28     	; 0x15e6 <__fp_split3+0xe>
    1602:	46 95       	lsr	r20
    1604:	f1 df       	rcall	.-30     	; 0x15e8 <__fp_splitA>
    1606:	08 c0       	rjmp	.+16     	; 0x1618 <__fp_splitA+0x30>
    1608:	16 16       	cp	r1, r22
    160a:	17 06       	cpc	r1, r23
    160c:	18 06       	cpc	r1, r24
    160e:	99 1f       	adc	r25, r25
    1610:	f1 cf       	rjmp	.-30     	; 0x15f4 <__fp_splitA+0xc>
    1612:	86 95       	lsr	r24
    1614:	71 05       	cpc	r23, r1
    1616:	61 05       	cpc	r22, r1
    1618:	08 94       	sec
    161a:	08 95       	ret

0000161c <__fp_zero>:
    161c:	e8 94       	clt

0000161e <__fp_szero>:
    161e:	bb 27       	eor	r27, r27
    1620:	66 27       	eor	r22, r22
    1622:	77 27       	eor	r23, r23
    1624:	cb 01       	movw	r24, r22
    1626:	97 f9       	bld	r25, 7
    1628:	08 95       	ret

0000162a <__gesf2>:
    162a:	8a df       	rcall	.-236    	; 0x1540 <__fp_cmp>
    162c:	08 f4       	brcc	.+2      	; 0x1630 <__gesf2+0x6>
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	08 95       	ret

00001632 <__mulsf3>:
    1632:	0b d0       	rcall	.+22     	; 0x164a <__mulsf3x>
    1634:	c0 cf       	rjmp	.-128    	; 0x15b6 <__fp_round>
    1636:	b1 df       	rcall	.-158    	; 0x159a <__fp_pscA>
    1638:	28 f0       	brcs	.+10     	; 0x1644 <__mulsf3+0x12>
    163a:	b6 df       	rcall	.-148    	; 0x15a8 <__fp_pscB>
    163c:	18 f0       	brcs	.+6      	; 0x1644 <__mulsf3+0x12>
    163e:	95 23       	and	r25, r21
    1640:	09 f0       	breq	.+2      	; 0x1644 <__mulsf3+0x12>
    1642:	a2 cf       	rjmp	.-188    	; 0x1588 <__fp_inf>
    1644:	a7 cf       	rjmp	.-178    	; 0x1594 <__fp_nan>
    1646:	11 24       	eor	r1, r1
    1648:	ea cf       	rjmp	.-44     	; 0x161e <__fp_szero>

0000164a <__mulsf3x>:
    164a:	c6 df       	rcall	.-116    	; 0x15d8 <__fp_split3>
    164c:	a0 f3       	brcs	.-24     	; 0x1636 <__mulsf3+0x4>

0000164e <__mulsf3_pse>:
    164e:	95 9f       	mul	r25, r21
    1650:	d1 f3       	breq	.-12     	; 0x1646 <__mulsf3+0x14>
    1652:	95 0f       	add	r25, r21
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	55 1f       	adc	r21, r21
    1658:	62 9f       	mul	r22, r18
    165a:	f0 01       	movw	r30, r0
    165c:	72 9f       	mul	r23, r18
    165e:	bb 27       	eor	r27, r27
    1660:	f0 0d       	add	r31, r0
    1662:	b1 1d       	adc	r27, r1
    1664:	63 9f       	mul	r22, r19
    1666:	aa 27       	eor	r26, r26
    1668:	f0 0d       	add	r31, r0
    166a:	b1 1d       	adc	r27, r1
    166c:	aa 1f       	adc	r26, r26
    166e:	64 9f       	mul	r22, r20
    1670:	66 27       	eor	r22, r22
    1672:	b0 0d       	add	r27, r0
    1674:	a1 1d       	adc	r26, r1
    1676:	66 1f       	adc	r22, r22
    1678:	82 9f       	mul	r24, r18
    167a:	22 27       	eor	r18, r18
    167c:	b0 0d       	add	r27, r0
    167e:	a1 1d       	adc	r26, r1
    1680:	62 1f       	adc	r22, r18
    1682:	73 9f       	mul	r23, r19
    1684:	b0 0d       	add	r27, r0
    1686:	a1 1d       	adc	r26, r1
    1688:	62 1f       	adc	r22, r18
    168a:	83 9f       	mul	r24, r19
    168c:	a0 0d       	add	r26, r0
    168e:	61 1d       	adc	r22, r1
    1690:	22 1f       	adc	r18, r18
    1692:	74 9f       	mul	r23, r20
    1694:	33 27       	eor	r19, r19
    1696:	a0 0d       	add	r26, r0
    1698:	61 1d       	adc	r22, r1
    169a:	23 1f       	adc	r18, r19
    169c:	84 9f       	mul	r24, r20
    169e:	60 0d       	add	r22, r0
    16a0:	21 1d       	adc	r18, r1
    16a2:	82 2f       	mov	r24, r18
    16a4:	76 2f       	mov	r23, r22
    16a6:	6a 2f       	mov	r22, r26
    16a8:	11 24       	eor	r1, r1
    16aa:	9f 57       	subi	r25, 0x7F	; 127
    16ac:	50 40       	sbci	r21, 0x00	; 0
    16ae:	8a f0       	brmi	.+34     	; 0x16d2 <__mulsf3_pse+0x84>
    16b0:	e1 f0       	breq	.+56     	; 0x16ea <__mulsf3_pse+0x9c>
    16b2:	88 23       	and	r24, r24
    16b4:	4a f0       	brmi	.+18     	; 0x16c8 <__mulsf3_pse+0x7a>
    16b6:	ee 0f       	add	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	bb 1f       	adc	r27, r27
    16bc:	66 1f       	adc	r22, r22
    16be:	77 1f       	adc	r23, r23
    16c0:	88 1f       	adc	r24, r24
    16c2:	91 50       	subi	r25, 0x01	; 1
    16c4:	50 40       	sbci	r21, 0x00	; 0
    16c6:	a9 f7       	brne	.-22     	; 0x16b2 <__mulsf3_pse+0x64>
    16c8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ca:	51 05       	cpc	r21, r1
    16cc:	70 f0       	brcs	.+28     	; 0x16ea <__mulsf3_pse+0x9c>
    16ce:	5c cf       	rjmp	.-328    	; 0x1588 <__fp_inf>
    16d0:	a6 cf       	rjmp	.-180    	; 0x161e <__fp_szero>
    16d2:	5f 3f       	cpi	r21, 0xFF	; 255
    16d4:	ec f3       	brlt	.-6      	; 0x16d0 <__mulsf3_pse+0x82>
    16d6:	98 3e       	cpi	r25, 0xE8	; 232
    16d8:	dc f3       	brlt	.-10     	; 0x16d0 <__mulsf3_pse+0x82>
    16da:	86 95       	lsr	r24
    16dc:	77 95       	ror	r23
    16de:	67 95       	ror	r22
    16e0:	b7 95       	ror	r27
    16e2:	f7 95       	ror	r31
    16e4:	e7 95       	ror	r30
    16e6:	9f 5f       	subi	r25, 0xFF	; 255
    16e8:	c1 f7       	brne	.-16     	; 0x16da <__mulsf3_pse+0x8c>
    16ea:	fe 2b       	or	r31, r30
    16ec:	88 0f       	add	r24, r24
    16ee:	91 1d       	adc	r25, r1
    16f0:	96 95       	lsr	r25
    16f2:	87 95       	ror	r24
    16f4:	97 f9       	bld	r25, 7
    16f6:	08 95       	ret

000016f8 <__udivmodsi4>:
    16f8:	a1 e2       	ldi	r26, 0x21	; 33
    16fa:	1a 2e       	mov	r1, r26
    16fc:	aa 1b       	sub	r26, r26
    16fe:	bb 1b       	sub	r27, r27
    1700:	fd 01       	movw	r30, r26
    1702:	0d c0       	rjmp	.+26     	; 0x171e <__udivmodsi4_ep>

00001704 <__udivmodsi4_loop>:
    1704:	aa 1f       	adc	r26, r26
    1706:	bb 1f       	adc	r27, r27
    1708:	ee 1f       	adc	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	a2 17       	cp	r26, r18
    170e:	b3 07       	cpc	r27, r19
    1710:	e4 07       	cpc	r30, r20
    1712:	f5 07       	cpc	r31, r21
    1714:	20 f0       	brcs	.+8      	; 0x171e <__udivmodsi4_ep>
    1716:	a2 1b       	sub	r26, r18
    1718:	b3 0b       	sbc	r27, r19
    171a:	e4 0b       	sbc	r30, r20
    171c:	f5 0b       	sbc	r31, r21

0000171e <__udivmodsi4_ep>:
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	1a 94       	dec	r1
    1728:	69 f7       	brne	.-38     	; 0x1704 <__udivmodsi4_loop>
    172a:	60 95       	com	r22
    172c:	70 95       	com	r23
    172e:	80 95       	com	r24
    1730:	90 95       	com	r25
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	bd 01       	movw	r22, r26
    1738:	cf 01       	movw	r24, r30
    173a:	08 95       	ret

0000173c <memcpy>:
    173c:	fb 01       	movw	r30, r22
    173e:	dc 01       	movw	r26, r24
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <memcpy+0xa>
    1742:	01 90       	ld	r0, Z+
    1744:	0d 92       	st	X+, r0
    1746:	41 50       	subi	r20, 0x01	; 1
    1748:	50 40       	sbci	r21, 0x00	; 0
    174a:	d8 f7       	brcc	.-10     	; 0x1742 <memcpy+0x6>
    174c:	08 95       	ret

0000174e <memset>:
    174e:	dc 01       	movw	r26, r24
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <memset+0x6>
    1752:	6d 93       	st	X+, r22
    1754:	41 50       	subi	r20, 0x01	; 1
    1756:	50 40       	sbci	r21, 0x00	; 0
    1758:	e0 f7       	brcc	.-8      	; 0x1752 <memset+0x4>
    175a:	08 95       	ret

0000175c <strcmp>:
    175c:	fb 01       	movw	r30, r22
    175e:	dc 01       	movw	r26, r24
    1760:	8d 91       	ld	r24, X+
    1762:	01 90       	ld	r0, Z+
    1764:	80 19       	sub	r24, r0
    1766:	01 10       	cpse	r0, r1
    1768:	d9 f3       	breq	.-10     	; 0x1760 <strcmp+0x4>
    176a:	99 0b       	sbc	r25, r25
    176c:	08 95       	ret

0000176e <strcpy>:
    176e:	fb 01       	movw	r30, r22
    1770:	dc 01       	movw	r26, r24
    1772:	01 90       	ld	r0, Z+
    1774:	0d 92       	st	X+, r0
    1776:	00 20       	and	r0, r0
    1778:	e1 f7       	brne	.-8      	; 0x1772 <strcpy+0x4>
    177a:	08 95       	ret

0000177c <strlen>:
    177c:	fc 01       	movw	r30, r24
    177e:	01 90       	ld	r0, Z+
    1780:	00 20       	and	r0, r0
    1782:	e9 f7       	brne	.-6      	; 0x177e <strlen+0x2>
    1784:	80 95       	com	r24
    1786:	90 95       	com	r25
    1788:	8e 0f       	add	r24, r30
    178a:	9f 1f       	adc	r25, r31
    178c:	08 95       	ret

0000178e <_exit>:
    178e:	f8 94       	cli

00001790 <__stop_program>:
    1790:	ff cf       	rjmp	.-2      	; 0x1790 <__stop_program>
