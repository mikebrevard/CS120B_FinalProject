
bop_it_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001512  000015a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  008001a0  008001a0  00001646  2**0
                  ALLOC
  3 .stab         00001e60  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000097f  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00003e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004ec  00000000  00000000  00003e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000db8  00000000  00000000  00004353  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000285  00000000  00000000  0000510b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d02  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000210  00000000  00000000  00006094  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000668  00000000  00000000  000062a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000089  00000000  00000000  0000690c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e1       	ldi	r30, 0x12	; 18
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3a       	cpi	r26, 0xA0	; 160
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a0 ea       	ldi	r26, 0xA0	; 160
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3d       	cpi	r26, 0xDE	; 222
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <main>
      c6:	0c 94 87 0a 	jmp	0x150e	; 0x150e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initUSART>:
//Functionality - Initializes TX and RX on PORT D
//Parameter: usartNum specifies which USART is being initialized
//			 If usartNum != 1, default to USART0
//Returns: None
void initUSART(unsigned char usartNum)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	0f 92       	push	r0
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
      da:	89 81       	ldd	r24, Y+1	; 0x01
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	e1 f0       	breq	.+56     	; 0x118 <initUSART+0x4a>
		// Turn on the reception circuitry of USART0
		// Turn on receiver and transmitter
		// Use 8-bit character sizes 
		UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
      e0:	81 ec       	ldi	r24, 0xC1	; 193
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	21 ec       	ldi	r18, 0xC1	; 193
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	28 61       	ori	r18, 0x18	; 24
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
		UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
      f2:	82 ec       	ldi	r24, 0xC2	; 194
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	22 ec       	ldi	r18, 0xC2	; 194
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	26 60       	ori	r18, 0x06	; 6
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR0 register
		UBRR0L = BAUD_PRESCALE;
     104:	84 ec       	ldi	r24, 0xC4	; 196
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	23 e3       	ldi	r18, 0x33	; 51
     10a:	fc 01       	movw	r30, r24
     10c:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR0 register
		UBRR0H = (BAUD_PRESCALE >> 8);
     10e:	85 ec       	ldi	r24, 0xC5	; 197
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	fc 01       	movw	r30, r24
     114:	10 82       	st	Z, r1
     116:	1b c0       	rjmp	.+54     	; 0x14e <initUSART+0x80>
	}
	else {
		// Turn on the reception circuitry for USART1
		// Turn on receiver and transmitter
		// Use 8-bit character sizes
		UCSR1B |= (1 << RXEN1)  | (1 << TXEN1);
     118:	89 ec       	ldi	r24, 0xC9	; 201
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	29 ec       	ldi	r18, 0xC9	; 201
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	f9 01       	movw	r30, r18
     122:	20 81       	ld	r18, Z
     124:	28 61       	ori	r18, 0x18	; 24
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
		UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
     12a:	8a ec       	ldi	r24, 0xCA	; 202
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	2a ec       	ldi	r18, 0xCA	; 202
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	20 81       	ld	r18, Z
     136:	26 60       	ori	r18, 0x06	; 6
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR1 register
		UBRR1L = BAUD_PRESCALE;
     13c:	8c ec       	ldi	r24, 0xCC	; 204
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	23 e3       	ldi	r18, 0x33	; 51
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR1 register
		UBRR1H = (BAUD_PRESCALE >> 8);
     146:	8d ec       	ldi	r24, 0xCD	; 205
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	fc 01       	movw	r30, r24
     14c:	10 82       	st	Z, r1
	}
}
     14e:	0f 90       	pop	r0
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <USART_IsSendReady>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	0f 92       	push	r0
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	31 f0       	breq	.+12     	; 0x174 <USART_IsSendReady+0x1e>
     168:	80 ec       	ldi	r24, 0xC0	; 192
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	80 72       	andi	r24, 0x20	; 32
     172:	05 c0       	rjmp	.+10     	; 0x17e <USART_IsSendReady+0x28>
     174:	88 ec       	ldi	r24, 0xC8	; 200
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	fc 01       	movw	r30, r24
     17a:	80 81       	ld	r24, Z
     17c:	80 72       	andi	r24, 0x20	; 32
}
     17e:	0f 90       	pop	r0
     180:	cf 91       	pop	r28
     182:	df 91       	pop	r29
     184:	08 95       	ret

00000186 <USART_HasTransmitted>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	0f 92       	push	r0
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	31 f0       	breq	.+12     	; 0x1a4 <USART_HasTransmitted+0x1e>
     198:	80 ec       	ldi	r24, 0xC0	; 192
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	80 74       	andi	r24, 0x40	; 64
     1a2:	05 c0       	rjmp	.+10     	; 0x1ae <USART_HasTransmitted+0x28>
     1a4:	88 ec       	ldi	r24, 0xC8	; 200
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	80 74       	andi	r24, 0x40	; 64
}
     1ae:	0f 90       	pop	r0
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	08 95       	ret

000001b6 <USART_HasReceived>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <USART_HasReceived+0x1e>
     1c8:	80 ec       	ldi	r24, 0xC0	; 192
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	80 78       	andi	r24, 0x80	; 128
     1d2:	05 c0       	rjmp	.+10     	; 0x1de <USART_HasReceived+0x28>
     1d4:	88 ec       	ldi	r24, 0xC8	; 200
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	80 78       	andi	r24, 0x80	; 128
}
     1de:	0f 90       	pop	r0
     1e0:	cf 91       	pop	r28
     1e2:	df 91       	pop	r29
     1e4:	08 95       	ret

000001e6 <USART_Flush>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Flushes the data register
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	89 83       	std	Y+1, r24	; 0x01
	static unsigned char dummy;
	if (usartNum != 1) {
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	a9 f0       	breq	.+42     	; 0x222 <USART_Flush+0x3c>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
     1f8:	06 c0       	rjmp	.+12     	; 0x206 <USART_Flush+0x20>
     1fa:	86 ec       	ldi	r24, 0xC6	; 198
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	80 93 cd 01 	sts	0x01CD, r24
     206:	80 ec       	ldi	r24, 0xC0	; 192
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	fc 01       	movw	r30, r24
     20c:	80 81       	ld	r24, Z
     20e:	88 23       	and	r24, r24
     210:	a4 f3       	brlt	.-24     	; 0x1fa <USART_Flush+0x14>
     212:	0e c0       	rjmp	.+28     	; 0x230 <USART_Flush+0x4a>
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     214:	8e ec       	ldi	r24, 0xCE	; 206
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	80 81       	ld	r24, Z
     21c:	80 93 cd 01 	sts	0x01CD, r24
     220:	01 c0       	rjmp	.+2      	; 0x224 <USART_Flush+0x3e>
     222:	00 00       	nop
     224:	88 ec       	ldi	r24, 0xC8	; 200
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	fc 01       	movw	r30, r24
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	94 f3       	brlt	.-28     	; 0x214 <USART_Flush+0x2e>
	}
}
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <USART_Send>:
//Functionality - Sends an 8-bit char value
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <USART_Send+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	89 83       	std	Y+1, r24	; 0x01
     244:	6a 83       	std	Y+2, r22	; 0x02
	if (usartNum != 1) {
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	89 f0       	breq	.+34     	; 0x26e <USART_Send+0x36>
		while( !(UCSR0A & (1 << UDRE0)) );
     24c:	00 00       	nop
     24e:	80 ec       	ldi	r24, 0xC0	; 192
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	80 72       	andi	r24, 0x20	; 32
     25c:	90 70       	andi	r25, 0x00	; 0
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	b1 f3       	breq	.-20     	; 0x24e <USART_Send+0x16>
		UDR0 = sendMe;
     262:	86 ec       	ldi	r24, 0xC6	; 198
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	29 81       	ldd	r18, Y+1	; 0x01
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	10 c0       	rjmp	.+32     	; 0x28e <USART_Send+0x56>
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     26e:	00 00       	nop
     270:	88 ec       	ldi	r24, 0xC8	; 200
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	fc 01       	movw	r30, r24
     276:	80 81       	ld	r24, Z
     278:	88 2f       	mov	r24, r24
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	80 72       	andi	r24, 0x20	; 32
     27e:	90 70       	andi	r25, 0x00	; 0
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	b1 f3       	breq	.-20     	; 0x270 <USART_Send+0x38>
		UDR1 = sendMe;
     284:	8e ec       	ldi	r24, 0xCE	; 206
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	29 81       	ldd	r18, Y+1	; 0x01
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
	}
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	cf 91       	pop	r28
     294:	df 91       	pop	r29
     296:	08 95       	ret

00000298 <USART_Receive>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
     298:	df 93       	push	r29
     29a:	cf 93       	push	r28
     29c:	0f 92       	push	r0
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	61 f0       	breq	.+24     	; 0x2c2 <USART_Receive+0x2a>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     2aa:	00 00       	nop
     2ac:	80 ec       	ldi	r24, 0xC0	; 192
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 23       	and	r24, r24
     2b6:	d4 f7       	brge	.-12     	; 0x2ac <USART_Receive+0x14>
		return UDR0; // Get and return received data from buffer
     2b8:	86 ec       	ldi	r24, 0xC6	; 198
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <USART_Receive+0x40>
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     2c2:	00 00       	nop
     2c4:	88 ec       	ldi	r24, 0xC8	; 200
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	88 23       	and	r24, r24
     2ce:	d4 f7       	brge	.-12     	; 0x2c4 <USART_Receive+0x2c>
		return UDR1;
     2d0:	8e ec       	ldi	r24, 0xCE	; 206
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	80 81       	ld	r24, Z
	}
}
     2d8:	0f 90       	pop	r0
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <findGCD>:
#include <avr/io.h>
#include <avr/interrupt.h>

//--------Find GCD function -------------------------------
unsigned long int findGCD (unsigned long int a, unsigned long int b)
{
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	2c 97       	sbiw	r28, 0x0c	; 12
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	6d 83       	std	Y+5, r22	; 0x05
     2f6:	7e 83       	std	Y+6, r23	; 0x06
     2f8:	8f 83       	std	Y+7, r24	; 0x07
     2fa:	98 87       	std	Y+8, r25	; 0x08
     2fc:	29 87       	std	Y+9, r18	; 0x09
     2fe:	3a 87       	std	Y+10, r19	; 0x0a
     300:	4b 87       	std	Y+11, r20	; 0x0b
     302:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int c;
	while(1){
	c = a%b;
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	9e 81       	ldd	r25, Y+6	; 0x06
     308:	af 81       	ldd	r26, Y+7	; 0x07
     30a:	b8 85       	ldd	r27, Y+8	; 0x08
     30c:	29 85       	ldd	r18, Y+9	; 0x09
     30e:	3a 85       	ldd	r19, Y+10	; 0x0a
     310:	4b 85       	ldd	r20, Y+11	; 0x0b
     312:	5c 85       	ldd	r21, Y+12	; 0x0c
     314:	bc 01       	movw	r22, r24
     316:	cd 01       	movw	r24, r26
     318:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__udivmodsi4>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	ab 83       	std	Y+3, r26	; 0x03
     326:	bc 83       	std	Y+4, r27	; 0x04
	if(c==0){return b;}
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	ab 81       	ldd	r26, Y+3	; 0x03
     32e:	bc 81       	ldd	r27, Y+4	; 0x04
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	a1 05       	cpc	r26, r1
     334:	b1 05       	cpc	r27, r1
     336:	79 f4       	brne	.+30     	; 0x356 <findGCD+0x76>
     338:	89 85       	ldd	r24, Y+9	; 0x09
     33a:	9a 85       	ldd	r25, Y+10	; 0x0a
     33c:	ab 85       	ldd	r26, Y+11	; 0x0b
     33e:	bc 85       	ldd	r27, Y+12	; 0x0c
	a = b;
	b = c;
	}
	return 0;
}
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	2c 96       	adiw	r28, 0x0c	; 12
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	cf 91       	pop	r28
     352:	df 91       	pop	r29
     354:	08 95       	ret
{
	unsigned long int c;
	while(1){
	c = a%b;
	if(c==0){return b;}
	a = b;
     356:	89 85       	ldd	r24, Y+9	; 0x09
     358:	9a 85       	ldd	r25, Y+10	; 0x0a
     35a:	ab 85       	ldd	r26, Y+11	; 0x0b
     35c:	bc 85       	ldd	r27, Y+12	; 0x0c
     35e:	8d 83       	std	Y+5, r24	; 0x05
     360:	9e 83       	std	Y+6, r25	; 0x06
     362:	af 83       	std	Y+7, r26	; 0x07
     364:	b8 87       	std	Y+8, r27	; 0x08
	b = c;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	ab 81       	ldd	r26, Y+3	; 0x03
     36c:	bc 81       	ldd	r27, Y+4	; 0x04
     36e:	89 87       	std	Y+9, r24	; 0x09
     370:	9a 87       	std	Y+10, r25	; 0x0a
     372:	ab 87       	std	Y+11, r26	; 0x0b
     374:	bc 87       	std	Y+12, r27	; 0x0c
	}
     376:	c6 cf       	rjmp	.-116    	; 0x304 <findGCD+0x24>

00000378 <ADC_init>:
	return 0;
}

void ADC_init() {
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
     380:	8a e7       	ldi	r24, 0x7A	; 122
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	2a e7       	ldi	r18, 0x7A	; 122
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	20 6e       	ori	r18, 0xE0	; 224
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	// in Free Running Mode, a new conversion will trigger
	// whenever the previous conversion completes.
}
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <set_PWM>:
	
void set_PWM(double frequency) {
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <set_PWM+0xa>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <set_PWM+0xc>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	69 83       	std	Y+1, r22	; 0x01
     3aa:	7a 83       	std	Y+2, r23	; 0x02
     3ac:	8b 83       	std	Y+3, r24	; 0x03
     3ae:	9c 83       	std	Y+4, r25	; 0x04
	
	// Keeps track of the currently set frequency
  // Will only update the registers when the frequency
  // changes, plays music uninterrupted.
	static double current_frequency;
	if (frequency != current_frequency) {
     3b0:	20 91 c9 01 	lds	r18, 0x01C9
     3b4:	30 91 ca 01 	lds	r19, 0x01CA
     3b8:	40 91 cb 01 	lds	r20, 0x01CB
     3bc:	50 91 cc 01 	lds	r21, 0x01CC
     3c0:	69 81       	ldd	r22, Y+1	; 0x01
     3c2:	7a 81       	ldd	r23, Y+2	; 0x02
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	0e 94 c3 08 	call	0x1186	; 0x1186 <__cmpsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <set_PWM+0x3a>
     3d0:	85 c0       	rjmp	.+266    	; 0x4dc <set_PWM+0x144>

		if (!frequency) TCCR3B &= 0x08; //stops timer/counter
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 81       	ldd	r22, Y+1	; 0x01
     3d6:	7a 81       	ldd	r23, Y+2	; 0x02
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	a9 01       	movw	r20, r18
     3e2:	0e 94 c3 08 	call	0x1186	; 0x1186 <__cmpsf2>
     3e6:	88 23       	and	r24, r24
     3e8:	09 f4       	brne	.+2      	; 0x3ec <set_PWM+0x54>
     3ea:	10 e0       	ldi	r17, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	81 27       	eor	r24, r17
     3f0:	88 23       	and	r24, r24
     3f2:	51 f0       	breq	.+20     	; 0x408 <set_PWM+0x70>
     3f4:	81 e9       	ldi	r24, 0x91	; 145
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	21 e9       	ldi	r18, 0x91	; 145
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	28 70       	andi	r18, 0x08	; 8
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
     406:	09 c0       	rjmp	.+18     	; 0x41a <set_PWM+0x82>
		else TCCR3B |= 0x03; // resumes/continues timer/counter
     408:	81 e9       	ldi	r24, 0x91	; 145
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	21 e9       	ldi	r18, 0x91	; 145
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	23 60       	ori	r18, 0x03	; 3
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
	
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) OCR3A = 0xFFFF;
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	69 81       	ldd	r22, Y+1	; 0x01
     41e:	7a 81       	ldd	r23, Y+2	; 0x02
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	9c 81       	ldd	r25, Y+4	; 0x04
     424:	28 e5       	ldi	r18, 0x58	; 88
     426:	39 e3       	ldi	r19, 0x39	; 57
     428:	44 e7       	ldi	r20, 0x74	; 116
     42a:	5f e3       	ldi	r21, 0x3F	; 63
     42c:	0e 94 c3 08 	call	0x1186	; 0x1186 <__cmpsf2>
     430:	88 23       	and	r24, r24
     432:	0c f0       	brlt	.+2      	; 0x436 <set_PWM+0x9e>
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	11 23       	and	r17, r17
     438:	41 f0       	breq	.+16     	; 0x44a <set_PWM+0xb2>
     43a:	88 e9       	ldi	r24, 0x98	; 152
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	3f ef       	ldi	r19, 0xFF	; 255
     442:	fc 01       	movw	r30, r24
     444:	31 83       	std	Z+1, r19	; 0x01
     446:	20 83       	st	Z, r18
     448:	38 c0       	rjmp	.+112    	; 0x4ba <set_PWM+0x122>
	
		// prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) OCR3A = 0x0000;
     44a:	11 e0       	ldi	r17, 0x01	; 1
     44c:	69 81       	ldd	r22, Y+1	; 0x01
     44e:	7a 81       	ldd	r23, Y+2	; 0x02
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	9c 81       	ldd	r25, Y+4	; 0x04
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	34 e2       	ldi	r19, 0x24	; 36
     458:	44 ef       	ldi	r20, 0xF4	; 244
     45a:	56 e4       	ldi	r21, 0x46	; 70
     45c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gesf2>
     460:	18 16       	cp	r1, r24
     462:	0c f0       	brlt	.+2      	; 0x466 <set_PWM+0xce>
     464:	10 e0       	ldi	r17, 0x00	; 0
     466:	11 23       	and	r17, r17
     468:	31 f0       	breq	.+12     	; 0x476 <set_PWM+0xde>
     46a:	88 e9       	ldi	r24, 0x98	; 152
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	11 82       	std	Z+1, r1	; 0x01
     472:	10 82       	st	Z, r1
     474:	22 c0       	rjmp	.+68     	; 0x4ba <set_PWM+0x122>
	
		// set OCR3A based on desired frequency
		else OCR3A = (short)(8000000 / (128 * frequency)) - 1;
     476:	08 e9       	ldi	r16, 0x98	; 152
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	69 81       	ldd	r22, Y+1	; 0x01
     47c:	7a 81       	ldd	r23, Y+2	; 0x02
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	53 e4       	ldi	r21, 0x43	; 67
     48a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__mulsf3>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	9c 01       	movw	r18, r24
     494:	ad 01       	movw	r20, r26
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	74 e2       	ldi	r23, 0x24	; 36
     49a:	84 ef       	ldi	r24, 0xF4	; 244
     49c:	9a e4       	ldi	r25, 0x4A	; 74
     49e:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 2f 09 	call	0x125e	; 0x125e <__fixsfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f8 01       	movw	r30, r16
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24

		TCNT3 = 0; // resets counter
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	fc 01       	movw	r30, r24
     4c0:	11 82       	std	Z+1, r1	; 0x01
     4c2:	10 82       	st	Z, r1
		current_frequency = frequency;
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	ab 81       	ldd	r26, Y+3	; 0x03
     4ca:	bc 81       	ldd	r27, Y+4	; 0x04
     4cc:	80 93 c9 01 	sts	0x01C9, r24
     4d0:	90 93 ca 01 	sts	0x01CA, r25
     4d4:	a0 93 cb 01 	sts	0x01CB, r26
     4d8:	b0 93 cc 01 	sts	0x01CC, r27
		}
}
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret

000004ee <PWM_on>:

void PWM_on() {
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = (1 << COM3A0);
     4f6:	80 e9       	ldi	r24, 0x90	; 144
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	20 e4       	ldi	r18, 0x40	; 64
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     500:	81 e9       	ldi	r24, 0x91	; 145
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	2b e0       	ldi	r18, 0x0B	; 11
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	cb 01       	movw	r24, r22
     510:	0e 94 cc 01 	call	0x398	; 0x398 <set_PWM>
}
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <PWM_off>:

void PWM_off() {
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0x00;
     522:	80 e9       	ldi	r24, 0x90	; 144
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	fc 01       	movw	r30, r24
     528:	10 82       	st	Z, r1
	TCCR3B = 0x00;
     52a:	81 e9       	ldi	r24, 0x91	; 145
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	10 82       	st	Z, r1
}
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	08 95       	ret

00000538 <SetBit>:

// Bit-access functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	00 d0       	rcall	.+0      	; 0x53e <SetBit+0x6>
     53e:	0f 92       	push	r0
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	6a 83       	std	Y+2, r22	; 0x02
     548:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	88 23       	and	r24, r24
     54e:	79 f0       	breq	.+30     	; 0x56e <SetBit+0x36>
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	02 2e       	mov	r0, r18
     55c:	02 c0       	rjmp	.+4      	; 0x562 <SetBit+0x2a>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	0a 94       	dec	r0
     564:	e2 f7       	brpl	.-8      	; 0x55e <SetBit+0x26>
     566:	98 2f       	mov	r25, r24
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	89 2b       	or	r24, r25
     56c:	0f c0       	rjmp	.+30     	; 0x58c <SetBit+0x54>
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	02 2e       	mov	r0, r18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <SetBit+0x48>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <SetBit+0x44>
     584:	98 2f       	mov	r25, r24
     586:	90 95       	com	r25
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	89 23       	and	r24, r25
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	00 d0       	rcall	.+0      	; 0x59e <GetBit+0x6>
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	2a 81       	ldd	r18, Y+2	; 0x02
     5ae:	22 2f       	mov	r18, r18
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	02 2e       	mov	r0, r18
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <GetBit+0x22>
     5b6:	95 95       	asr	r25
     5b8:	87 95       	ror	r24
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <GetBit+0x1e>
     5be:	81 70       	andi	r24, 0x01	; 1
}
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <TimerOn>:
volatile unsigned char TimerFlag = 0;
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	// bit3 = 0: CTC mode (clear timer on compare)
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s
	TCCR1B = 0x0B;
     5d2:	81 e8       	ldi	r24, 0x81	; 129
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2b e0       	ldi	r18, 0x0B	; 11
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
	// AVR output compare register OCR1A.
	// Timer interrupt will be generated when TCNT1==OCR1A
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	OCR1A = 125;// AVR timer interrupt mask register
     5dc:	88 e8       	ldi	r24, 0x88	; 136
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2d e7       	ldi	r18, 0x7D	; 125
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	31 83       	std	Z+1, r19	; 0x01
     5e8:	20 83       	st	Z, r18
	// bit1: OCIE1A -- enables compare match interrupt
	TIMSK1 = 0x02;
     5ea:	8f e6       	ldi	r24, 0x6F	; 111
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
	//Initialize avr counter
	TCNT1=0;
     5f4:	84 e8       	ldi	r24, 0x84	; 132
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	fc 01       	movw	r30, r24
     5fa:	11 82       	std	Z+1, r1	; 0x01
     5fc:	10 82       	st	Z, r1
	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
     5fe:	80 91 1f 01 	lds	r24, 0x011F
     602:	90 91 20 01 	lds	r25, 0x0120
     606:	a0 91 21 01 	lds	r26, 0x0121
     60a:	b0 91 22 01 	lds	r27, 0x0122
     60e:	80 93 a1 01 	sts	0x01A1, r24
     612:	90 93 a2 01 	sts	0x01A2, r25
     616:	a0 93 a3 01 	sts	0x01A3, r26
     61a:	b0 93 a4 01 	sts	0x01A4, r27
	//Enable global interrupts: 0x80: 1000000
	SREG |= 0x80;
     61e:	8f e5       	ldi	r24, 0x5F	; 95
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2f e5       	ldi	r18, 0x5F	; 95
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	20 68       	ori	r18, 0x80	; 128
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
}
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	08 95       	ret

00000636 <TimerOff>:

void TimerOff() {
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
	// bit3bit1bit0=000: timer off
	TCCR1B = 0x00;
     63e:	81 e8       	ldi	r24, 0x81	; 129
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	fc 01       	movw	r30, r24
     644:	10 82       	st	Z, r1
}
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <TimerISR>:

void TimerISR() {
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 a0 01 	sts	0x01A0, r24
}
     65a:	cf 91       	pop	r28
     65c:	df 91       	pop	r29
     65e:	08 95       	ret

00000660 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	00 90 5b 00 	lds	r0, 0x005B
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1 ms per TimerOn settings)
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
     690:	80 91 a1 01 	lds	r24, 0x01A1
     694:	90 91 a2 01 	lds	r25, 0x01A2
     698:	a0 91 a3 01 	lds	r26, 0x01A3
     69c:	b0 91 a4 01 	lds	r27, 0x01A4
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	a1 09       	sbc	r26, r1
     6a4:	b1 09       	sbc	r27, r1
     6a6:	80 93 a1 01 	sts	0x01A1, r24
     6aa:	90 93 a2 01 	sts	0x01A2, r25
     6ae:	a0 93 a3 01 	sts	0x01A3, r26
     6b2:	b0 93 a4 01 	sts	0x01A4, r27
	if (_avr_timer_cntcurr == 0) {
     6b6:	80 91 a1 01 	lds	r24, 0x01A1
     6ba:	90 91 a2 01 	lds	r25, 0x01A2
     6be:	a0 91 a3 01 	lds	r26, 0x01A3
     6c2:	b0 91 a4 01 	lds	r27, 0x01A4
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	a1 05       	cpc	r26, r1
     6ca:	b1 05       	cpc	r27, r1
     6cc:	91 f4       	brne	.+36     	; 0x6f2 <__vector_13+0x92>
		// Call the ISR that the user uses
		TimerISR();
     6ce:	0e 94 26 03 	call	0x64c	; 0x64c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     6d2:	80 91 1f 01 	lds	r24, 0x011F
     6d6:	90 91 20 01 	lds	r25, 0x0120
     6da:	a0 91 21 01 	lds	r26, 0x0121
     6de:	b0 91 22 01 	lds	r27, 0x0122
     6e2:	80 93 a1 01 	sts	0x01A1, r24
     6e6:	90 93 a2 01 	sts	0x01A2, r25
     6ea:	a0 93 a3 01 	sts	0x01A3, r26
     6ee:	b0 93 a4 01 	sts	0x01A4, r27
	}
}
     6f2:	cf 91       	pop	r28
     6f4:	df 91       	pop	r29
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	0f 90       	pop	r0
     710:	00 92 5b 00 	sts	0x005B, r0
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	00 d0       	rcall	.+0      	; 0x724 <TimerSet+0x6>
     724:	00 d0       	rcall	.+0      	; 0x726 <TimerSet+0x8>
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	69 83       	std	Y+1, r22	; 0x01
     72c:	7a 83       	std	Y+2, r23	; 0x02
     72e:	8b 83       	std	Y+3, r24	; 0x03
     730:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	ab 81       	ldd	r26, Y+3	; 0x03
     738:	bc 81       	ldd	r27, Y+4	; 0x04
     73a:	80 93 1f 01 	sts	0x011F, r24
     73e:	90 93 20 01 	sts	0x0120, r25
     742:	a0 93 21 01 	sts	0x0121, r26
     746:	b0 93 22 01 	sts	0x0122, r27
	_avr_timer_cntcurr = _avr_timer_M;
     74a:	80 91 1f 01 	lds	r24, 0x011F
     74e:	90 91 20 01 	lds	r25, 0x0120
     752:	a0 91 21 01 	lds	r26, 0x0121
     756:	b0 91 22 01 	lds	r27, 0x0122
     75a:	80 93 a1 01 	sts	0x01A1, r24
     75e:	90 93 a2 01 	sts	0x01A2, r25
     762:	a0 93 a3 01 	sts	0x01A3, r26
     766:	b0 93 a4 01 	sts	0x01A4, r27
}
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <isMessageChanging>:
unsigned char display[16];
unsigned char lcd_choice = 0x00;
unsigned char sevendeg_choice = 0x00;
//--------End Shared Variables-----------------------------

unsigned char isMessageChanging() {
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	6c 97       	sbiw	r28, 0x1c	; 28
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
	unsigned char temp[sizeof(message)];
	if (lcd_choice == CODE_DISPLAY_WELCOME) {
     78c:	90 91 a6 01 	lds	r25, 0x01A6
     790:	80 91 19 01 	lds	r24, 0x0119
     794:	98 17       	cp	r25, r24
     796:	51 f4       	brne	.+20     	; 0x7ac <isMessageChanging+0x34>
		strcpy(temp, "Welcome to Embedded Bop it!");
     798:	20 e4       	ldi	r18, 0x40	; 64
     79a:	31 e0       	ldi	r19, 0x01	; 1
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	b9 01       	movw	r22, r18
     7a2:	4c e1       	ldi	r20, 0x1C	; 28
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <memcpy>
     7aa:	4f c0       	rjmp	.+158    	; 0x84a <isMessageChanging+0xd2>
	} else if (lcd_choice == CODE_DISPLAY_PUSH_IT) {
     7ac:	90 91 a6 01 	lds	r25, 0x01A6
     7b0:	80 91 1a 01 	lds	r24, 0x011A
     7b4:	98 17       	cp	r25, r24
     7b6:	51 f4       	brne	.+20     	; 0x7cc <isMessageChanging+0x54>
		strcpy(temp, "Push it!");
     7b8:	2c e5       	ldi	r18, 0x5C	; 92
     7ba:	31 e0       	ldi	r19, 0x01	; 1
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	b9 01       	movw	r22, r18
     7c2:	49 e0       	ldi	r20, 0x09	; 9
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <memcpy>
     7ca:	3f c0       	rjmp	.+126    	; 0x84a <isMessageChanging+0xd2>
	} else if (lcd_choice == CODE_DISPLAY_TWIST_IT) {
     7cc:	90 91 a6 01 	lds	r25, 0x01A6
     7d0:	80 91 1b 01 	lds	r24, 0x011B
     7d4:	98 17       	cp	r25, r24
     7d6:	51 f4       	brne	.+20     	; 0x7ec <isMessageChanging+0x74>
		strcpy(temp, "Twist it!");
     7d8:	25 e6       	ldi	r18, 0x65	; 101
     7da:	31 e0       	ldi	r19, 0x01	; 1
     7dc:	ce 01       	movw	r24, r28
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	b9 01       	movw	r22, r18
     7e2:	4a e0       	ldi	r20, 0x0A	; 10
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <memcpy>
     7ea:	2f c0       	rjmp	.+94     	; 0x84a <isMessageChanging+0xd2>
	} else if (lcd_choice == CODE_DISPLAY_COVER_IT) {
     7ec:	90 91 a6 01 	lds	r25, 0x01A6
     7f0:	80 91 1c 01 	lds	r24, 0x011C
     7f4:	98 17       	cp	r25, r24
     7f6:	51 f4       	brne	.+20     	; 0x80c <isMessageChanging+0x94>
		strcpy(temp, "Cover it!");
     7f8:	2f e6       	ldi	r18, 0x6F	; 111
     7fa:	31 e0       	ldi	r19, 0x01	; 1
     7fc:	ce 01       	movw	r24, r28
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	b9 01       	movw	r22, r18
     802:	4a e0       	ldi	r20, 0x0A	; 10
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <memcpy>
     80a:	1f c0       	rjmp	.+62     	; 0x84a <isMessageChanging+0xd2>
	} else if (lcd_choice == CODE_DISPLAY_CORRECT) {
     80c:	90 91 a6 01 	lds	r25, 0x01A6
     810:	80 91 1d 01 	lds	r24, 0x011D
     814:	98 17       	cp	r25, r24
     816:	51 f4       	brne	.+20     	; 0x82c <isMessageChanging+0xb4>
		strcpy(temp, "Correct!");
     818:	29 e7       	ldi	r18, 0x79	; 121
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	b9 01       	movw	r22, r18
     822:	49 e0       	ldi	r20, 0x09	; 9
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <memcpy>
     82a:	0f c0       	rjmp	.+30     	; 0x84a <isMessageChanging+0xd2>
	} else if (lcd_choice == CODE_DISPLAY_CORRECT) {
     82c:	90 91 a6 01 	lds	r25, 0x01A6
     830:	80 91 1d 01 	lds	r24, 0x011D
     834:	98 17       	cp	r25, r24
     836:	49 f4       	brne	.+18     	; 0x84a <isMessageChanging+0xd2>
		strcpy(temp, "Incorrect! Play Again?");
     838:	22 e8       	ldi	r18, 0x82	; 130
     83a:	31 e0       	ldi	r19, 0x01	; 1
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	b9 01       	movw	r22, r18
     842:	47 e1       	ldi	r20, 0x17	; 23
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <memcpy>
	} 
	
	if (strcmp(temp,message) == 0) {
     84a:	24 e2       	ldi	r18, 0x24	; 36
     84c:	31 e0       	ldi	r19, 0x01	; 1
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	b9 01       	movw	r22, r18
     854:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <strcmp>
     858:	00 97       	sbiw	r24, 0x00	; 0
     85a:	11 f4       	brne	.+4      	; 0x860 <isMessageChanging+0xe8>
		return 0;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	15 c0       	rjmp	.+42     	; 0x88a <isMessageChanging+0x112>
	} else {
		memset(message,'\0',strlen(message));
     860:	84 e2       	ldi	r24, 0x24	; 36
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strlen>
     868:	9c 01       	movw	r18, r24
     86a:	84 e2       	ldi	r24, 0x24	; 36
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	a9 01       	movw	r20, r18
     874:	0e 94 67 0a 	call	0x14ce	; 0x14ce <memset>
		strcpy(message, temp);
     878:	84 e2       	ldi	r24, 0x24	; 36
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	9e 01       	movw	r18, r28
     87e:	2f 5f       	subi	r18, 0xFF	; 255
     880:	3f 4f       	sbci	r19, 0xFF	; 255
     882:	b9 01       	movw	r22, r18
     884:	0e 94 77 0a 	call	0x14ee	; 0x14ee <strcpy>
		return 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     88a:	6c 96       	adiw	r28, 0x1c	; 28
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	cf 91       	pop	r28
     898:	df 91       	pop	r29
     89a:	08 95       	ret

0000089c <SMTick1>:

//--------User defined FSMs--------------------------------
enum SM1_States { SM1_start };
// Monitors button connected to PA0. When the button is
// pressed, shared variable "pause" is toggled.
int SMTick1(int state) {
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <SMTick1+0xa>
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <SMTick1+0xc>
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char cursor_position = 1;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	89 83       	std	Y+1, r24	; 0x01
	unsigned char counter = 0x00;
     8b4:	1a 82       	std	Y+2, r1	; 0x02
	
	//State machine transitions
	switch (state) {
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ba:	00 97       	sbiw	r24, 0x00	; 0
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <SMTick1+0x28>
		case SM1_start:
			state = SM1_start;
     8be:	1c 82       	std	Y+4, r1	; 0x04
     8c0:	1b 82       	std	Y+3, r1	; 0x03
			break;
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <SMTick1+0x2e>
		default:
			state = SM1_start;
     8c4:	1c 82       	std	Y+4, r1	; 0x04
     8c6:	1b 82       	std	Y+3, r1	; 0x03
			break;
     8c8:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	9c 81       	ldd	r25, Y+4	; 0x04
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <SMTick1+0x38>
     8d2:	67 c0       	rjmp	.+206    	; 0x9a2 <SMTick1+0x106>
		case SM1_start: 		
			for (counter = 0, cursor_position = array_position; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     8d4:	1a 82       	std	Y+2, r1	; 0x02
     8d6:	80 91 a5 01 	lds	r24, 0x01A5
     8da:	89 83       	std	Y+1, r24	; 0x01
     8dc:	30 c0       	rjmp	.+96     	; 0x93e <SMTick1+0xa2>
				if (cursor_position > strlen(message)) {
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	08 2f       	mov	r16, r24
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	84 e2       	ldi	r24, 0x24	; 36
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strlen>
     8ec:	80 17       	cp	r24, r16
     8ee:	91 07       	cpc	r25, r17
     8f0:	50 f4       	brcc	.+20     	; 0x906 <SMTick1+0x6a>
					cursor_position = 0;
     8f2:	19 82       	std	Y+1, r1	; 0x01
					display[counter] = ' ';
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	82 53       	subi	r24, 0x32	; 50
     8fc:	9e 4f       	sbci	r25, 0xFE	; 254
     8fe:	20 e2       	ldi	r18, 0x20	; 32
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18
     904:	16 c0       	rjmp	.+44     	; 0x932 <SMTick1+0x96>
				} else if (cursor_position - 1 >= 0) {
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	99 23       	and	r25, r25
     910:	84 f0       	brlt	.+32     	; 0x932 <SMTick1+0x96>
					display[counter] = message[cursor_position - 1]; 
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	88 2f       	mov	r24, r24
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	22 2f       	mov	r18, r18
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	21 50       	subi	r18, 0x01	; 1
     920:	30 40       	sbci	r19, 0x00	; 0
     922:	2c 5d       	subi	r18, 0xDC	; 220
     924:	3e 4f       	sbci	r19, 0xFE	; 254
     926:	f9 01       	movw	r30, r18
     928:	20 81       	ld	r18, Z
     92a:	82 53       	subi	r24, 0x32	; 50
     92c:	9e 4f       	sbci	r25, 0xFE	; 254
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
			break;
	}
	//State machine actions
	switch(state) {
		case SM1_start: 		
			for (counter = 0, cursor_position = array_position; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	8f 5f       	subi	r24, 0xFF	; 255
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	8f 5f       	subi	r24, 0xFF	; 255
     93c:	8a 83       	std	Y+2, r24	; 0x02
     93e:	80 91 23 01 	lds	r24, 0x0123
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	98 17       	cp	r25, r24
     946:	58 f2       	brcs	.-106    	; 0x8de <SMTick1+0x42>
					display[counter] = message[cursor_position - 1]; 
				}
				
			}
			
			for (counter = 0, cursor_position = 0; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     948:	1a 82       	std	Y+2, r1	; 0x02
     94a:	19 82       	std	Y+1, r1	; 0x01
     94c:	12 c0       	rjmp	.+36     	; 0x972 <SMTick1+0xd6>
				LCD_Cursor(cursor_position);
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_Cursor>
				LCD_WriteData(display[counter]);
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	88 2f       	mov	r24, r24
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	82 53       	subi	r24, 0x32	; 50
     95c:	9e 4f       	sbci	r25, 0xFE	; 254
     95e:	fc 01       	movw	r30, r24
     960:	80 81       	ld	r24, Z
     962:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_WriteData>
					display[counter] = message[cursor_position - 1]; 
				}
				
			}
			
			for (counter = 0, cursor_position = 0; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	8a 83       	std	Y+2, r24	; 0x02
     972:	80 91 23 01 	lds	r24, 0x0123
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	98 17       	cp	r25, r24
     97a:	48 f3       	brcs	.-46     	; 0x94e <SMTick1+0xb2>
				LCD_Cursor(cursor_position);
				LCD_WriteData(display[counter]);
			}	
			array_position = array_position + 1;
     97c:	80 91 a5 01 	lds	r24, 0x01A5
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	80 93 a5 01 	sts	0x01A5, r24
			if (array_position == strlen(message)) {
     986:	80 91 a5 01 	lds	r24, 0x01A5
     98a:	08 2f       	mov	r16, r24
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	84 e2       	ldi	r24, 0x24	; 36
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strlen>
     996:	08 17       	cp	r16, r24
     998:	19 07       	cpc	r17, r25
     99a:	29 f4       	brne	.+10     	; 0x9a6 <SMTick1+0x10a>
				array_position = 0;
     99c:	10 92 a5 01 	sts	0x01A5, r1
			}			
			break;
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <SMTick1+0x10c>
		default: break;
     9a2:	00 00       	nop
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <SMTick1+0x10c>
			}	
			array_position = array_position + 1;
			if (array_position == strlen(message)) {
				array_position = 0;
			}			
			break;
     9a6:	00 00       	nop
		default: break;
	}
	return state;
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
}
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <SMTick2>:

/**
* get received message and save as user choice
*/
enum SM2_States { SM2_start };
int SMTick2(int state) {
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <SMTick2+0x6>
     9c4:	0f 92       	push	r0
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	9b 83       	std	Y+3, r25	; 0x03
     9cc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char receive = 0x00;
     9ce:	19 82       	std	Y+1, r1	; 0x01
	
	//State machine transitions
	switch (state) {
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	9b 81       	ldd	r25, Y+3	; 0x03
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	19 f4       	brne	.+6      	; 0x9de <SMTick2+0x20>
		case SM2_start:
			state = SM2_start;
     9d8:	1b 82       	std	Y+3, r1	; 0x03
     9da:	1a 82       	std	Y+2, r1	; 0x02
			break;
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <SMTick2+0x26>
		default:
			state = SM2_start;
     9de:	1b 82       	std	Y+3, r1	; 0x03
     9e0:	1a 82       	std	Y+2, r1	; 0x02
			break;
     9e2:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	9b 81       	ldd	r25, Y+3	; 0x03
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	a1 f4       	brne	.+40     	; 0xa14 <SMTick2+0x56>
		case SM2_start: 
			if (USART_HasReceived(1)) {
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_HasReceived>
     9f2:	88 23       	and	r24, r24
     9f4:	89 f0       	breq	.+34     	; 0xa18 <SMTick2+0x5a>
				receive = USART_Receive(1);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 4c 01 	call	0x298	; 0x298 <USART_Receive>
     9fc:	89 83       	std	Y+1, r24	; 0x01
				
				//if 0 than message for LCD, 1 for 7 seg display
				if (!GetBit(receive, 7)) {
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	67 e0       	ldi	r22, 0x07	; 7
     a02:	0e 94 cc 02 	call	0x598	; 0x598 <GetBit>
     a06:	88 23       	and	r24, r24
     a08:	49 f0       	breq	.+18     	; 0xa1c <SMTick2+0x5e>
				//	lcd_choice = receive;
				//	if (isMessageChanging()) {
				//		array_position = 0;
				//	}
				} else {
					sevendeg_choice = receive & 0x7F;
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	8f 77       	andi	r24, 0x7F	; 127
     a0e:	80 93 a7 01 	sts	0x01A7, r24
				}					
			} 
			break;
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <SMTick2+0x60>
		default: break;
     a14:	00 00       	nop
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <SMTick2+0x60>
				//	}
				} else {
					sevendeg_choice = receive & 0x7F;
				}					
			} 
			break;
     a18:	00 00       	nop
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <SMTick2+0x60>
     a1c:	00 00       	nop
		default: break;
	}
	return state;
     a1e:	8a 81       	ldd	r24, Y+2	; 0x02
     a20:	9b 81       	ldd	r25, Y+3	; 0x03
}
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	cf 91       	pop	r28
     a2a:	df 91       	pop	r29
     a2c:	08 95       	ret

00000a2e <SMTick3>:

/**
* get received message and show on seven seg display
*/
enum SM3_States { SM3_start };
int SMTick3(int state) {
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	60 97       	sbiw	r28, 0x10	; 16
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	98 8b       	std	Y+16, r25	; 0x10
     a44:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned char const NUMBER_0 = 0x18;
     a46:	88 e1       	ldi	r24, 0x18	; 24
     a48:	89 83       	std	Y+1, r24	; 0x01
	unsigned char const NUMBER_1 = 0x7B;
     a4a:	8b e7       	ldi	r24, 0x7B	; 123
     a4c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char const NUMBER_2 = 0x2C;
     a4e:	8c e2       	ldi	r24, 0x2C	; 44
     a50:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char const NUMBER_3 = 0x29;
     a52:	89 e2       	ldi	r24, 0x29	; 41
     a54:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char const NUMBER_4 = 0x4B;
     a56:	8b e4       	ldi	r24, 0x4B	; 75
     a58:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char const NUMBER_5 = 0x89;
     a5a:	89 e8       	ldi	r24, 0x89	; 137
     a5c:	8e 83       	std	Y+6, r24	; 0x06
	unsigned char const NUMBER_6 = 0x88;
     a5e:	88 e8       	ldi	r24, 0x88	; 136
     a60:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char const NUMBER_7 = 0x3B;
     a62:	8b e3       	ldi	r24, 0x3B	; 59
     a64:	88 87       	std	Y+8, r24	; 0x08
	unsigned char const NUMBER_8 = 0x08;
     a66:	88 e0       	ldi	r24, 0x08	; 8
     a68:	89 87       	std	Y+9, r24	; 0x09
	unsigned char const NUMBER_9 = 0x0B;
     a6a:	8b e0       	ldi	r24, 0x0B	; 11
     a6c:	8a 87       	std	Y+10, r24	; 0x0a
	unsigned char const NUMBER_A = 0x0A;
     a6e:	8a e0       	ldi	r24, 0x0A	; 10
     a70:	8b 87       	std	Y+11, r24	; 0x0b
	unsigned char const NUMBER_C = 0x9C;
     a72:	8c e9       	ldi	r24, 0x9C	; 156
     a74:	8c 87       	std	Y+12, r24	; 0x0c
	unsigned char const NUMBER_E = 0x8C;
     a76:	8c e8       	ldi	r24, 0x8C	; 140
     a78:	8d 87       	std	Y+13, r24	; 0x0d
	unsigned char const NUMBER_DP = 0xF7;
     a7a:	87 ef       	ldi	r24, 0xF7	; 247
     a7c:	8e 87       	std	Y+14, r24	; 0x0e
	
	//State machine transitions
	switch (state) {
     a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a80:	98 89       	ldd	r25, Y+16	; 0x10
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	19 f4       	brne	.+6      	; 0xa8c <SMTick3+0x5e>
		case SM3_start:
			state = SM3_start;
     a86:	18 8a       	std	Y+16, r1	; 0x10
     a88:	1f 86       	std	Y+15, r1	; 0x0f
			break;
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <SMTick3+0x64>
		default:
			state = SM3_start;
     a8c:	18 8a       	std	Y+16, r1	; 0x10
     a8e:	1f 86       	std	Y+15, r1	; 0x0f
			break;
     a90:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     a92:	8f 85       	ldd	r24, Y+15	; 0x0f
     a94:	98 89       	ldd	r25, Y+16	; 0x10
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	09 f0       	breq	.+2      	; 0xa9c <SMTick3+0x6e>
     a9a:	88 c0       	rjmp	.+272    	; 0xbac <SMTick3+0x17e>
		case SM3_start: 
			if (sevendeg_choice == 0)  {
     a9c:	80 91 a7 01 	lds	r24, 0x01A7
     aa0:	88 23       	and	r24, r24
     aa2:	31 f4       	brne	.+12     	; 0xab0 <SMTick3+0x82>
				PORTA = NUMBER_0;
     aa4:	82 e2       	ldi	r24, 0x22	; 34
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	29 81       	ldd	r18, Y+1	; 0x01
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     aae:	7f c0       	rjmp	.+254    	; 0xbae <SMTick3+0x180>
	//State machine actions
	switch(state) {
		case SM3_start: 
			if (sevendeg_choice == 0)  {
				PORTA = NUMBER_0;
			} else if (sevendeg_choice == 0x01)  {
     ab0:	80 91 a7 01 	lds	r24, 0x01A7
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	31 f4       	brne	.+12     	; 0xac4 <SMTick3+0x96>
				PORTA = NUMBER_1;
     ab8:	82 e2       	ldi	r24, 0x22	; 34
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	2a 81       	ldd	r18, Y+2	; 0x02
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     ac2:	75 c0       	rjmp	.+234    	; 0xbae <SMTick3+0x180>
		case SM3_start: 
			if (sevendeg_choice == 0)  {
				PORTA = NUMBER_0;
			} else if (sevendeg_choice == 0x01)  {
				PORTA = NUMBER_1;
			} else if (sevendeg_choice == 0x02)  {
     ac4:	80 91 a7 01 	lds	r24, 0x01A7
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	31 f4       	brne	.+12     	; 0xad8 <SMTick3+0xaa>
				PORTA = NUMBER_2;
     acc:	82 e2       	ldi	r24, 0x22	; 34
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	2b 81       	ldd	r18, Y+3	; 0x03
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     ad6:	6b c0       	rjmp	.+214    	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_0;
			} else if (sevendeg_choice == 0x01)  {
				PORTA = NUMBER_1;
			} else if (sevendeg_choice == 0x02)  {
				PORTA = NUMBER_2;
			} else if (sevendeg_choice == 0x03)  {
     ad8:	80 91 a7 01 	lds	r24, 0x01A7
     adc:	83 30       	cpi	r24, 0x03	; 3
     ade:	31 f4       	brne	.+12     	; 0xaec <SMTick3+0xbe>
				PORTA = NUMBER_3;
     ae0:	82 e2       	ldi	r24, 0x22	; 34
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	2c 81       	ldd	r18, Y+4	; 0x04
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     aea:	61 c0       	rjmp	.+194    	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_1;
			} else if (sevendeg_choice == 0x02)  {
				PORTA = NUMBER_2;
			} else if (sevendeg_choice == 0x03)  {
				PORTA = NUMBER_3;
			} else if (sevendeg_choice == 0x04)  {
     aec:	80 91 a7 01 	lds	r24, 0x01A7
     af0:	84 30       	cpi	r24, 0x04	; 4
     af2:	31 f4       	brne	.+12     	; 0xb00 <SMTick3+0xd2>
				PORTA = NUMBER_4;
     af4:	82 e2       	ldi	r24, 0x22	; 34
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	2d 81       	ldd	r18, Y+5	; 0x05
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     afe:	57 c0       	rjmp	.+174    	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_2;
			} else if (sevendeg_choice == 0x03)  {
				PORTA = NUMBER_3;
			} else if (sevendeg_choice == 0x04)  {
				PORTA = NUMBER_4;
			} else if (sevendeg_choice == 0x05)  {
     b00:	80 91 a7 01 	lds	r24, 0x01A7
     b04:	85 30       	cpi	r24, 0x05	; 5
     b06:	31 f4       	brne	.+12     	; 0xb14 <SMTick3+0xe6>
				PORTA = NUMBER_5;
     b08:	82 e2       	ldi	r24, 0x22	; 34
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	2e 81       	ldd	r18, Y+6	; 0x06
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b12:	4d c0       	rjmp	.+154    	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_3;
			} else if (sevendeg_choice == 0x04)  {
				PORTA = NUMBER_4;
			} else if (sevendeg_choice == 0x05)  {
				PORTA = NUMBER_5;
			} else if (sevendeg_choice == 0x06)  {
     b14:	80 91 a7 01 	lds	r24, 0x01A7
     b18:	86 30       	cpi	r24, 0x06	; 6
     b1a:	31 f4       	brne	.+12     	; 0xb28 <SMTick3+0xfa>
				PORTA = NUMBER_6;
     b1c:	82 e2       	ldi	r24, 0x22	; 34
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	2f 81       	ldd	r18, Y+7	; 0x07
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b26:	43 c0       	rjmp	.+134    	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_4;
			} else if (sevendeg_choice == 0x05)  {
				PORTA = NUMBER_5;
			} else if (sevendeg_choice == 0x06)  {
				PORTA = NUMBER_6;
			} else if (sevendeg_choice == 0x07)  {
     b28:	80 91 a7 01 	lds	r24, 0x01A7
     b2c:	87 30       	cpi	r24, 0x07	; 7
     b2e:	31 f4       	brne	.+12     	; 0xb3c <SMTick3+0x10e>
				PORTA = NUMBER_7;
     b30:	82 e2       	ldi	r24, 0x22	; 34
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	28 85       	ldd	r18, Y+8	; 0x08
     b36:	fc 01       	movw	r30, r24
     b38:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b3a:	39 c0       	rjmp	.+114    	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_5;
			} else if (sevendeg_choice == 0x06)  {
				PORTA = NUMBER_6;
			} else if (sevendeg_choice == 0x07)  {
				PORTA = NUMBER_7;
			} else if (sevendeg_choice == 0x08)  {
     b3c:	80 91 a7 01 	lds	r24, 0x01A7
     b40:	88 30       	cpi	r24, 0x08	; 8
     b42:	31 f4       	brne	.+12     	; 0xb50 <SMTick3+0x122>
				PORTA = NUMBER_8;
     b44:	82 e2       	ldi	r24, 0x22	; 34
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	29 85       	ldd	r18, Y+9	; 0x09
     b4a:	fc 01       	movw	r30, r24
     b4c:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b4e:	2f c0       	rjmp	.+94     	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_6;
			} else if (sevendeg_choice == 0x07)  {
				PORTA = NUMBER_7;
			} else if (sevendeg_choice == 0x08)  {
				PORTA = NUMBER_8;
			} else if (sevendeg_choice == 0x09)  {
     b50:	80 91 a7 01 	lds	r24, 0x01A7
     b54:	89 30       	cpi	r24, 0x09	; 9
     b56:	31 f4       	brne	.+12     	; 0xb64 <SMTick3+0x136>
				PORTA = NUMBER_9;
     b58:	82 e2       	ldi	r24, 0x22	; 34
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	2a 85       	ldd	r18, Y+10	; 0x0a
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b62:	25 c0       	rjmp	.+74     	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_7;
			} else if (sevendeg_choice == 0x08)  {
				PORTA = NUMBER_8;
			} else if (sevendeg_choice == 0x09)  {
				PORTA = NUMBER_9;
			} else if (sevendeg_choice == 0x0A)  {
     b64:	80 91 a7 01 	lds	r24, 0x01A7
     b68:	8a 30       	cpi	r24, 0x0A	; 10
     b6a:	31 f4       	brne	.+12     	; 0xb78 <SMTick3+0x14a>
				PORTA = NUMBER_A;
     b6c:	82 e2       	ldi	r24, 0x22	; 34
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	2b 85       	ldd	r18, Y+11	; 0x0b
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b76:	1b c0       	rjmp	.+54     	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_8;
			} else if (sevendeg_choice == 0x09)  {
				PORTA = NUMBER_9;
			} else if (sevendeg_choice == 0x0A)  {
				PORTA = NUMBER_A;
			} else if (sevendeg_choice == 0x0C)  {
     b78:	80 91 a7 01 	lds	r24, 0x01A7
     b7c:	8c 30       	cpi	r24, 0x0C	; 12
     b7e:	31 f4       	brne	.+12     	; 0xb8c <SMTick3+0x15e>
				PORTA = NUMBER_C;
     b80:	82 e2       	ldi	r24, 0x22	; 34
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	2c 85       	ldd	r18, Y+12	; 0x0c
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b8a:	11 c0       	rjmp	.+34     	; 0xbae <SMTick3+0x180>
				PORTA = NUMBER_9;
			} else if (sevendeg_choice == 0x0A)  {
				PORTA = NUMBER_A;
			} else if (sevendeg_choice == 0x0C)  {
				PORTA = NUMBER_C;
			} else if (sevendeg_choice == 0x0E)  {
     b8c:	80 91 a7 01 	lds	r24, 0x01A7
     b90:	8e 30       	cpi	r24, 0x0E	; 14
     b92:	31 f4       	brne	.+12     	; 0xba0 <SMTick3+0x172>
				PORTA = NUMBER_E;
     b94:	82 e2       	ldi	r24, 0x22	; 34
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	2d 85       	ldd	r18, Y+13	; 0x0d
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
			} else {
				PORTA = NUMBER_DP;
			}
			break;
     b9e:	07 c0       	rjmp	.+14     	; 0xbae <SMTick3+0x180>
			} else if (sevendeg_choice == 0x0C)  {
				PORTA = NUMBER_C;
			} else if (sevendeg_choice == 0x0E)  {
				PORTA = NUMBER_E;
			} else {
				PORTA = NUMBER_DP;
     ba0:	82 e2       	ldi	r24, 0x22	; 34
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	2e 85       	ldd	r18, Y+14	; 0x0e
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
			}
			break;
     baa:	01 c0       	rjmp	.+2      	; 0xbae <SMTick3+0x180>
		default: break;
     bac:	00 00       	nop
	}
	return state;
     bae:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb0:	98 89       	ldd	r25, Y+16	; 0x10
}
     bb2:	60 96       	adiw	r28, 0x10	; 16
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <main>:

// Implement scheduler code from PES.
int main() {
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	aa 97       	sbiw	r28, 0x2a	; 42
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA
	// to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
     bdc:	81 e2       	ldi	r24, 0x21	; 33
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	2f ef       	ldi	r18, 0xFF	; 255
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
     be6:	82 e2       	ldi	r24, 0x22	; 34
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	fc 01       	movw	r30, r24
     bec:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
     bee:	84 e2       	ldi	r24, 0x24	; 36
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	2f ef       	ldi	r18, 0xFF	; 255
     bf4:	fc 01       	movw	r30, r24
     bf6:	20 83       	st	Z, r18
     bf8:	85 e2       	ldi	r24, 0x25	; 37
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	fc 01       	movw	r30, r24
     bfe:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
     c00:	87 e2       	ldi	r24, 0x27	; 39
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	2f ef       	ldi	r18, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	20 83       	st	Z, r18
     c0a:	88 e2       	ldi	r24, 0x28	; 40
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
     c12:	8a e2       	ldi	r24, 0x2A	; 42
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
     c1c:	8b e2       	ldi	r24, 0x2B	; 43
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	fc 01       	movw	r30, r24
     c22:	10 82       	st	Z, r1
	
	// Period for the tasks
	unsigned long int SMTick1_calc = 500;
     c24:	84 ef       	ldi	r24, 0xF4	; 244
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	8b 83       	std	Y+3, r24	; 0x03
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	ad 83       	std	Y+5, r26	; 0x05
     c32:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 1;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	8f 83       	std	Y+7, r24	; 0x07
     c3e:	98 87       	std	Y+8, r25	; 0x08
     c40:	a9 87       	std	Y+9, r26	; 0x09
     c42:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick3_calc = 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	8b 87       	std	Y+11, r24	; 0x0b
     c4e:	9c 87       	std	Y+12, r25	; 0x0c
     c50:	ad 87       	std	Y+13, r26	; 0x0d
     c52:	be 87       	std	Y+14, r27	; 0x0e
	
	//Calculating GCD
	unsigned long int tmpGCD = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	8f 87       	std	Y+15, r24	; 0x0f
     c5e:	98 8b       	std	Y+16, r25	; 0x10
     c60:	a9 8b       	std	Y+17, r26	; 0x11
     c62:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	ad 81       	ldd	r26, Y+5	; 0x05
     c6a:	be 81       	ldd	r27, Y+6	; 0x06
     c6c:	2f 81       	ldd	r18, Y+7	; 0x07
     c6e:	38 85       	ldd	r19, Y+8	; 0x08
     c70:	49 85       	ldd	r20, Y+9	; 0x09
     c72:	5a 85       	ldd	r21, Y+10	; 0x0a
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	0e 94 70 01 	call	0x2e0	; 0x2e0 <findGCD>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	8f 87       	std	Y+15, r24	; 0x0f
     c82:	98 8b       	std	Y+16, r25	; 0x10
     c84:	a9 8b       	std	Y+17, r26	; 0x11
     c86:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(tmpGCD, SMTick3_calc);
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	98 89       	ldd	r25, Y+16	; 0x10
     c8c:	a9 89       	ldd	r26, Y+17	; 0x11
     c8e:	ba 89       	ldd	r27, Y+18	; 0x12
     c90:	2b 85       	ldd	r18, Y+11	; 0x0b
     c92:	3c 85       	ldd	r19, Y+12	; 0x0c
     c94:	4d 85       	ldd	r20, Y+13	; 0x0d
     c96:	5e 85       	ldd	r21, Y+14	; 0x0e
     c98:	bc 01       	movw	r22, r24
     c9a:	cd 01       	movw	r24, r26
     c9c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <findGCD>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	8f 87       	std	Y+15, r24	; 0x0f
     ca6:	98 8b       	std	Y+16, r25	; 0x10
     ca8:	a9 8b       	std	Y+17, r26	; 0x11
     caa:	ba 8b       	std	Y+18, r27	; 0x12
	
	//Greatest common divisor for all tasks
	// or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
     cac:	8f 85       	ldd	r24, Y+15	; 0x0f
     cae:	98 89       	ldd	r25, Y+16	; 0x10
     cb0:	a9 89       	ldd	r26, Y+17	; 0x11
     cb2:	ba 89       	ldd	r27, Y+18	; 0x12
     cb4:	8b 8b       	std	Y+19, r24	; 0x13
     cb6:	9c 8b       	std	Y+20, r25	; 0x14
     cb8:	ad 8b       	std	Y+21, r26	; 0x15
     cba:	be 8b       	std	Y+22, r27	; 0x16
	
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	ad 81       	ldd	r26, Y+5	; 0x05
     cc2:	be 81       	ldd	r27, Y+6	; 0x06
     cc4:	2b 89       	ldd	r18, Y+19	; 0x13
     cc6:	3c 89       	ldd	r19, Y+20	; 0x14
     cc8:	4d 89       	ldd	r20, Y+21	; 0x15
     cca:	5e 89       	ldd	r21, Y+22	; 0x16
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__udivmodsi4>
     cd4:	2f 8b       	std	Y+23, r18	; 0x17
     cd6:	38 8f       	std	Y+24, r19	; 0x18
     cd8:	49 8f       	std	Y+25, r20	; 0x19
     cda:	5a 8f       	std	Y+26, r21	; 0x1a
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
     cdc:	8f 81       	ldd	r24, Y+7	; 0x07
     cde:	98 85       	ldd	r25, Y+8	; 0x08
     ce0:	a9 85       	ldd	r26, Y+9	; 0x09
     ce2:	ba 85       	ldd	r27, Y+10	; 0x0a
     ce4:	2b 89       	ldd	r18, Y+19	; 0x13
     ce6:	3c 89       	ldd	r19, Y+20	; 0x14
     ce8:	4d 89       	ldd	r20, Y+21	; 0x15
     cea:	5e 89       	ldd	r21, Y+22	; 0x16
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__udivmodsi4>
     cf4:	2b 8f       	std	Y+27, r18	; 0x1b
     cf6:	3c 8f       	std	Y+28, r19	; 0x1c
     cf8:	4d 8f       	std	Y+29, r20	; 0x1d
     cfa:	5e 8f       	std	Y+30, r21	; 0x1e
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
     cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cfe:	9c 85       	ldd	r25, Y+12	; 0x0c
     d00:	ad 85       	ldd	r26, Y+13	; 0x0d
     d02:	be 85       	ldd	r27, Y+14	; 0x0e
     d04:	2b 89       	ldd	r18, Y+19	; 0x13
     d06:	3c 89       	ldd	r19, Y+20	; 0x14
     d08:	4d 89       	ldd	r20, Y+21	; 0x15
     d0a:	5e 89       	ldd	r21, Y+22	; 0x16
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__udivmodsi4>
     d14:	2f 8f       	std	Y+31, r18	; 0x1f
     d16:	38 a3       	std	Y+32, r19	; 0x20
     d18:	49 a3       	std	Y+33, r20	; 0x21
     d1a:	5a a3       	std	Y+34, r21	; 0x22

	//Declare an array of tasks
	static task task1, task2, task3;
	task *tasks[] = { &task1 , &task2, &task3 };
     d1c:	ce 01       	movw	r24, r28
     d1e:	85 96       	adiw	r24, 0x25	; 37
     d20:	29 e9       	ldi	r18, 0x99	; 153
     d22:	31 e0       	ldi	r19, 0x01	; 1
     d24:	46 e0       	ldi	r20, 0x06	; 6
     d26:	f9 01       	movw	r30, r18
     d28:	00 80       	ld	r0, Z
     d2a:	2f 5f       	subi	r18, 0xFF	; 255
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	fc 01       	movw	r30, r24
     d30:	00 82       	st	Z, r0
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	41 50       	subi	r20, 0x01	; 1
     d36:	44 23       	and	r20, r20
     d38:	b1 f7       	brne	.-20     	; 0xd26 <main+0x162>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9c a3       	std	Y+36, r25	; 0x24
     d40:	8b a3       	std	Y+35, r24	; 0x23
	// Task 1
	task1.state = -1;
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	80 93 a8 01 	sts	0x01A8, r24
	task1.period = SMTick1_period;
     d48:	8f 89       	ldd	r24, Y+23	; 0x17
     d4a:	98 8d       	ldd	r25, Y+24	; 0x18
     d4c:	a9 8d       	ldd	r26, Y+25	; 0x19
     d4e:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d50:	80 93 a9 01 	sts	0x01A9, r24
     d54:	90 93 aa 01 	sts	0x01AA, r25
     d58:	a0 93 ab 01 	sts	0x01AB, r26
     d5c:	b0 93 ac 01 	sts	0x01AC, r27
	task1.elapsedTime = SMTick1_period;
     d60:	8f 89       	ldd	r24, Y+23	; 0x17
     d62:	98 8d       	ldd	r25, Y+24	; 0x18
     d64:	a9 8d       	ldd	r26, Y+25	; 0x19
     d66:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d68:	80 93 ad 01 	sts	0x01AD, r24
     d6c:	90 93 ae 01 	sts	0x01AE, r25
     d70:	a0 93 af 01 	sts	0x01AF, r26
     d74:	b0 93 b0 01 	sts	0x01B0, r27
	task1.TickFct = &SMTick1;
     d78:	8e e4       	ldi	r24, 0x4E	; 78
     d7a:	94 e0       	ldi	r25, 0x04	; 4
     d7c:	90 93 b2 01 	sts	0x01B2, r25
     d80:	80 93 b1 01 	sts	0x01B1, r24
	// Task 2
	task2.state = -1;
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	80 93 b3 01 	sts	0x01B3, r24
	task2.period = SMTick2_period;
     d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8e:	ad 8d       	ldd	r26, Y+29	; 0x1d
     d90:	be 8d       	ldd	r27, Y+30	; 0x1e
     d92:	80 93 b4 01 	sts	0x01B4, r24
     d96:	90 93 b5 01 	sts	0x01B5, r25
     d9a:	a0 93 b6 01 	sts	0x01B6, r26
     d9e:	b0 93 b7 01 	sts	0x01B7, r27
	task2.elapsedTime = SMTick2_period;
     da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     da6:	ad 8d       	ldd	r26, Y+29	; 0x1d
     da8:	be 8d       	ldd	r27, Y+30	; 0x1e
     daa:	80 93 b8 01 	sts	0x01B8, r24
     dae:	90 93 b9 01 	sts	0x01B9, r25
     db2:	a0 93 ba 01 	sts	0x01BA, r26
     db6:	b0 93 bb 01 	sts	0x01BB, r27
	task2.TickFct = &SMTick2;
     dba:	8f ed       	ldi	r24, 0xDF	; 223
     dbc:	94 e0       	ldi	r25, 0x04	; 4
     dbe:	90 93 bd 01 	sts	0x01BD, r25
     dc2:	80 93 bc 01 	sts	0x01BC, r24
	// Task 3
	task3.state = -1;
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	80 93 be 01 	sts	0x01BE, r24
	task3.period = SMTick3_period;
     dcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dce:	98 a1       	ldd	r25, Y+32	; 0x20
     dd0:	a9 a1       	ldd	r26, Y+33	; 0x21
     dd2:	ba a1       	ldd	r27, Y+34	; 0x22
     dd4:	80 93 bf 01 	sts	0x01BF, r24
     dd8:	90 93 c0 01 	sts	0x01C0, r25
     ddc:	a0 93 c1 01 	sts	0x01C1, r26
     de0:	b0 93 c2 01 	sts	0x01C2, r27
	task3.elapsedTime = SMTick3_period;
     de4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     de6:	98 a1       	ldd	r25, Y+32	; 0x20
     de8:	a9 a1       	ldd	r26, Y+33	; 0x21
     dea:	ba a1       	ldd	r27, Y+34	; 0x22
     dec:	80 93 c3 01 	sts	0x01C3, r24
     df0:	90 93 c4 01 	sts	0x01C4, r25
     df4:	a0 93 c5 01 	sts	0x01C5, r26
     df8:	b0 93 c6 01 	sts	0x01C6, r27
	task3.TickFct = &SMTick3;
     dfc:	87 e1       	ldi	r24, 0x17	; 23
     dfe:	95 e0       	ldi	r25, 0x05	; 5
     e00:	90 93 c8 01 	sts	0x01C8, r25
     e04:	80 93 c7 01 	sts	0x01C7, r24
	// Set the timer and turn it on
	TimerSet(GCD);
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	9c 89       	ldd	r25, Y+20	; 0x14
     e0c:	ad 89       	ldd	r26, Y+21	; 0x15
     e0e:	be 89       	ldd	r27, Y+22	; 0x16
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 8f 03 	call	0x71e	; 0x71e <TimerSet>
	TimerOn();
     e18:	0e 94 e5 02 	call	0x5ca	; 0x5ca <TimerOn>
	// Scheduler for-loop iterator
	unsigned short i;
	LCD_init();
     e1c:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_init>
	LCD_ClearScreen();
     e20:	0e 94 cd 07 	call	0xf9a	; 0xf9a <LCD_ClearScreen>
	
	initUSART(1);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	0e 94 67 00 	call	0xce	; 0xce <initUSART>
	USART_Flush(1);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <USART_Flush>
	
	//start with welcome
	sevendeg_choice = 0xFF;
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	80 93 a7 01 	sts	0x01A7, r24
	lcd_choice = CODE_DISPLAY_WELCOME;
     e36:	80 91 19 01 	lds	r24, 0x0119
     e3a:	80 93 a6 01 	sts	0x01A6, r24
	
	while(1) {		
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01
     e42:	9b c0       	rjmp	.+310    	; 0xf7a <main+0x3b6>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	9e 01       	movw	r18, r28
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	82 0f       	add	r24, r18
     e54:	93 1f       	adc	r25, r19
     e56:	84 96       	adiw	r24, 0x24	; 36
     e58:	fc 01       	movw	r30, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	fc 01       	movw	r30, r24
     e60:	25 81       	ldd	r18, Z+5	; 0x05
     e62:	36 81       	ldd	r19, Z+6	; 0x06
     e64:	47 81       	ldd	r20, Z+7	; 0x07
     e66:	50 85       	ldd	r21, Z+8	; 0x08
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	be 01       	movw	r22, r28
     e72:	6f 5f       	subi	r22, 0xFF	; 255
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	86 0f       	add	r24, r22
     e78:	97 1f       	adc	r25, r23
     e7a:	84 96       	adiw	r24, 0x24	; 36
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	fc 01       	movw	r30, r24
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	92 81       	ldd	r25, Z+2	; 0x02
     e88:	a3 81       	ldd	r26, Z+3	; 0x03
     e8a:	b4 81       	ldd	r27, Z+4	; 0x04
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	4a 07       	cpc	r20, r26
     e92:	5b 07       	cpc	r21, r27
     e94:	09 f0       	breq	.+2      	; 0xe98 <main+0x2d4>
     e96:	45 c0       	rjmp	.+138    	; 0xf22 <main+0x35e>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	9e 01       	movw	r18, r28
     ea2:	2f 5f       	subi	r18, 0xFF	; 255
     ea4:	3f 4f       	sbci	r19, 0xFF	; 255
     ea6:	82 0f       	add	r24, r18
     ea8:	93 1f       	adc	r25, r19
     eaa:	84 96       	adiw	r24, 0x24	; 36
     eac:	fc 01       	movw	r30, r24
     eae:	00 81       	ld	r16, Z
     eb0:	11 81       	ldd	r17, Z+1	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	9e 01       	movw	r18, r28
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	84 96       	adiw	r24, 0x24	; 36
     ec6:	fc 01       	movw	r30, r24
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	fc 01       	movw	r30, r24
     ece:	21 85       	ldd	r18, Z+9	; 0x09
     ed0:	32 85       	ldd	r19, Z+10	; 0x0a
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	ae 01       	movw	r20, r28
     edc:	4f 5f       	subi	r20, 0xFF	; 255
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	84 0f       	add	r24, r20
     ee2:	95 1f       	adc	r25, r21
     ee4:	84 96       	adiw	r24, 0x24	; 36
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	99 27       	eor	r25, r25
     ef2:	87 fd       	sbrc	r24, 7
     ef4:	90 95       	com	r25
     ef6:	f9 01       	movw	r30, r18
     ef8:	09 95       	icall
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	9e 01       	movw	r18, r28
     f08:	2f 5f       	subi	r18, 0xFF	; 255
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	82 0f       	add	r24, r18
     f0e:	93 1f       	adc	r25, r19
     f10:	84 96       	adiw	r24, 0x24	; 36
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	fc 01       	movw	r30, r24
     f1a:	15 82       	std	Z+5, r1	; 0x05
     f1c:	16 82       	std	Z+6, r1	; 0x06
     f1e:	17 82       	std	Z+7, r1	; 0x07
     f20:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	9e 01       	movw	r18, r28
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	82 0f       	add	r24, r18
     f32:	93 1f       	adc	r25, r19
     f34:	84 96       	adiw	r24, 0x24	; 36
     f36:	fc 01       	movw	r30, r24
     f38:	20 81       	ld	r18, Z
     f3a:	31 81       	ldd	r19, Z+1	; 0x01
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	ae 01       	movw	r20, r28
     f46:	4f 5f       	subi	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	84 0f       	add	r24, r20
     f4c:	95 1f       	adc	r25, r21
     f4e:	84 96       	adiw	r24, 0x24	; 36
     f50:	fc 01       	movw	r30, r24
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	fc 01       	movw	r30, r24
     f58:	85 81       	ldd	r24, Z+5	; 0x05
     f5a:	96 81       	ldd	r25, Z+6	; 0x06
     f5c:	a7 81       	ldd	r26, Z+7	; 0x07
     f5e:	b0 85       	ldd	r27, Z+8	; 0x08
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	a1 1d       	adc	r26, r1
     f64:	b1 1d       	adc	r27, r1
     f66:	f9 01       	movw	r30, r18
     f68:	85 83       	std	Z+5, r24	; 0x05
     f6a:	96 83       	std	Z+6, r25	; 0x06
     f6c:	a7 83       	std	Z+7, r26	; 0x07
     f6e:	b0 87       	std	Z+8, r27	; 0x08
	sevendeg_choice = 0xFF;
	lcd_choice = CODE_DISPLAY_WELCOME;
	
	while(1) {		
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	3a 81       	ldd	r19, Y+2	; 0x02
     f7e:	8b a1       	ldd	r24, Y+35	; 0x23
     f80:	9c a1       	ldd	r25, Y+36	; 0x24
     f82:	28 17       	cp	r18, r24
     f84:	39 07       	cpc	r19, r25
     f86:	08 f4       	brcc	.+2      	; 0xf8a <main+0x3c6>
     f88:	5d cf       	rjmp	.-326    	; 0xe44 <main+0x280>
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
     f8a:	00 00       	nop
     f8c:	80 91 a0 01 	lds	r24, 0x01A0
     f90:	88 23       	and	r24, r24
     f92:	e1 f3       	breq	.-8      	; 0xf8c <main+0x3c8>
		TimerFlag = 0;
     f94:	10 92 a0 01 	sts	0x01A0, r1
	}
     f98:	52 cf       	rjmp	.-348    	; 0xe3e <main+0x27a>

00000f9a <LCD_ClearScreen>:
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_WriteCommand>
}
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <LCD_init>:

void LCD_init(void) {
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
     fb6:	84 e6       	ldi	r24, 0x64	; 100
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
	LCD_WriteCommand(0x38);
     fbe:	88 e3       	ldi	r24, 0x38	; 56
     fc0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     fca:	8f e0       	ldi	r24, 0x0F	; 15
     fcc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_WriteCommand>
	delay_ms(10);						 
     fd6:	8a e0       	ldi	r24, 0x0A	; 10
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <LCD_WriteCommand>:

void LCD_WriteCommand (unsigned char Command) {
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
     ff0:	8b e2       	ldi	r24, 0x2B	; 43
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2b e2       	ldi	r18, 0x2B	; 43
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	f9 01       	movw	r30, r18
     ffa:	20 81       	ld	r18, Z
     ffc:	2f 7b       	andi	r18, 0xBF	; 191
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18
   DATA_BUS = Command;
    1002:	88 e2       	ldi	r24, 0x28	; 40
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	29 81       	ldd	r18, Y+1	; 0x01
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
    100c:	8b e2       	ldi	r24, 0x2B	; 43
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	2b e2       	ldi	r18, 0x2B	; 43
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	f9 01       	movw	r30, r18
    1016:	20 81       	ld	r18, Z
    1018:	20 68       	ori	r18, 0x80	; 128
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
   asm("nop");
    101e:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
    1020:	8b e2       	ldi	r24, 0x2B	; 43
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	2b e2       	ldi	r18, 0x2B	; 43
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	f9 01       	movw	r30, r18
    102a:	20 81       	ld	r18, Z
    102c:	2f 77       	andi	r18, 0x7F	; 127
    102e:	fc 01       	movw	r30, r24
    1030:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
}
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
    104e:	8b e2       	ldi	r24, 0x2B	; 43
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	2b e2       	ldi	r18, 0x2B	; 43
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	f9 01       	movw	r30, r18
    1058:	20 81       	ld	r18, Z
    105a:	20 64       	ori	r18, 0x40	; 64
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
   DATA_BUS = Data;
    1060:	88 e2       	ldi	r24, 0x28	; 40
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	29 81       	ldd	r18, Y+1	; 0x01
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
    106a:	8b e2       	ldi	r24, 0x2B	; 43
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	2b e2       	ldi	r18, 0x2B	; 43
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	f9 01       	movw	r30, r18
    1074:	20 81       	ld	r18, Z
    1076:	20 68       	ori	r18, 0x80	; 128
    1078:	fc 01       	movw	r30, r24
    107a:	20 83       	st	Z, r18
   asm("nop");
    107c:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
    107e:	8b e2       	ldi	r24, 0x2B	; 43
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	2b e2       	ldi	r18, 0x2B	; 43
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	2f 77       	andi	r18, 0x7F	; 127
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
   delay_ms(1);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
}
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <LCD_DisplayString+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <LCD_DisplayString+0x8>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	7c 83       	std	Y+4, r23	; 0x04
    10b0:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
    10b2:	0e 94 cd 07 	call	0xf9a	; 0xf9a <LCD_ClearScreen>
   unsigned char c = column;
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <LCD_DisplayString+0x40>
      LCD_Cursor(c++);
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	99 81       	ldd	r25, Y+1	; 0x01
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	99 83       	std	Y+1, r25	; 0x01
    10c4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_Cursor>
      LCD_WriteData(*string++);
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 81       	ld	r18, Z
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	82 2f       	mov	r24, r18
    10dc:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	88 23       	and	r24, r24
    10ea:	41 f7       	brne	.-48     	; 0x10bc <LCD_DisplayString+0x1c>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	81 31       	cpi	r24, 0x11	; 17
    110a:	28 f4       	brcc	.+10     	; 0x1116 <LCD_Cursor+0x1c>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	81 58       	subi	r24, 0x81	; 129
    1110:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_WriteCommand>
    1114:	04 c0       	rjmp	.+8      	; 0x111e <LCD_Cursor+0x24>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	81 55       	subi	r24, 0x51	; 81
    111a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <delay_ms+0x6>
    112c:	00 d0       	rcall	.+0      	; 0x112e <delay_ms+0x8>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <delay_ms+0xa>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
    1138:	1a 82       	std	Y+2, r1	; 0x02
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	14 c0       	rjmp	.+40     	; 0x1166 <delay_ms+0x40>
    for(j=0;j<775;j++)
    113e:	1c 82       	std	Y+4, r1	; 0x04
    1140:	1b 82       	std	Y+3, r1	; 0x03
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <delay_ms+0x2a>
  {
   asm("nop");
    1144:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	23 e0       	ldi	r18, 0x03	; 3
    1156:	87 30       	cpi	r24, 0x07	; 7
    1158:	92 07       	cpc	r25, r18
    115a:	a4 f3       	brlt	.-24     	; 0x1144 <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	29 81       	ldd	r18, Y+1	; 0x01
    1168:	3a 81       	ldd	r19, Y+2	; 0x02
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	28 17       	cp	r18, r24
    1170:	39 07       	cpc	r19, r25
    1172:	2c f3       	brlt	.-54     	; 0x113e <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
    1174:	26 96       	adiw	r28, 0x06	; 6
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <__cmpsf2>:
    1186:	9c d0       	rcall	.+312    	; 0x12c0 <__fp_cmp>
    1188:	08 f4       	brcc	.+2      	; 0x118c <__cmpsf2+0x6>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	08 95       	ret

0000118e <__divsf3>:
    118e:	0c d0       	rcall	.+24     	; 0x11a8 <__divsf3x>
    1190:	d2 c0       	rjmp	.+420    	; 0x1336 <__fp_round>
    1192:	ca d0       	rcall	.+404    	; 0x1328 <__fp_pscB>
    1194:	40 f0       	brcs	.+16     	; 0x11a6 <__divsf3+0x18>
    1196:	c1 d0       	rcall	.+386    	; 0x131a <__fp_pscA>
    1198:	30 f0       	brcs	.+12     	; 0x11a6 <__divsf3+0x18>
    119a:	21 f4       	brne	.+8      	; 0x11a4 <__divsf3+0x16>
    119c:	5f 3f       	cpi	r21, 0xFF	; 255
    119e:	19 f0       	breq	.+6      	; 0x11a6 <__divsf3+0x18>
    11a0:	b3 c0       	rjmp	.+358    	; 0x1308 <__fp_inf>
    11a2:	51 11       	cpse	r21, r1
    11a4:	fc c0       	rjmp	.+504    	; 0x139e <__fp_szero>
    11a6:	b6 c0       	rjmp	.+364    	; 0x1314 <__fp_nan>

000011a8 <__divsf3x>:
    11a8:	d7 d0       	rcall	.+430    	; 0x1358 <__fp_split3>
    11aa:	98 f3       	brcs	.-26     	; 0x1192 <__divsf3+0x4>

000011ac <__divsf3_pse>:
    11ac:	99 23       	and	r25, r25
    11ae:	c9 f3       	breq	.-14     	; 0x11a2 <__divsf3+0x14>
    11b0:	55 23       	and	r21, r21
    11b2:	b1 f3       	breq	.-20     	; 0x11a0 <__divsf3+0x12>
    11b4:	95 1b       	sub	r25, r21
    11b6:	55 0b       	sbc	r21, r21
    11b8:	bb 27       	eor	r27, r27
    11ba:	aa 27       	eor	r26, r26
    11bc:	62 17       	cp	r22, r18
    11be:	73 07       	cpc	r23, r19
    11c0:	84 07       	cpc	r24, r20
    11c2:	38 f0       	brcs	.+14     	; 0x11d2 <__divsf3_pse+0x26>
    11c4:	9f 5f       	subi	r25, 0xFF	; 255
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	22 0f       	add	r18, r18
    11ca:	33 1f       	adc	r19, r19
    11cc:	44 1f       	adc	r20, r20
    11ce:	aa 1f       	adc	r26, r26
    11d0:	a9 f3       	breq	.-22     	; 0x11bc <__divsf3_pse+0x10>
    11d2:	33 d0       	rcall	.+102    	; 0x123a <__divsf3_pse+0x8e>
    11d4:	0e 2e       	mov	r0, r30
    11d6:	3a f0       	brmi	.+14     	; 0x11e6 <__divsf3_pse+0x3a>
    11d8:	e0 e8       	ldi	r30, 0x80	; 128
    11da:	30 d0       	rcall	.+96     	; 0x123c <__divsf3_pse+0x90>
    11dc:	91 50       	subi	r25, 0x01	; 1
    11de:	50 40       	sbci	r21, 0x00	; 0
    11e0:	e6 95       	lsr	r30
    11e2:	00 1c       	adc	r0, r0
    11e4:	ca f7       	brpl	.-14     	; 0x11d8 <__divsf3_pse+0x2c>
    11e6:	29 d0       	rcall	.+82     	; 0x123a <__divsf3_pse+0x8e>
    11e8:	fe 2f       	mov	r31, r30
    11ea:	27 d0       	rcall	.+78     	; 0x123a <__divsf3_pse+0x8e>
    11ec:	66 0f       	add	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	bb 1f       	adc	r27, r27
    11f4:	26 17       	cp	r18, r22
    11f6:	37 07       	cpc	r19, r23
    11f8:	48 07       	cpc	r20, r24
    11fa:	ab 07       	cpc	r26, r27
    11fc:	b0 e8       	ldi	r27, 0x80	; 128
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__divsf3_pse+0x56>
    1200:	bb 0b       	sbc	r27, r27
    1202:	80 2d       	mov	r24, r0
    1204:	bf 01       	movw	r22, r30
    1206:	ff 27       	eor	r31, r31
    1208:	93 58       	subi	r25, 0x83	; 131
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
    120c:	2a f0       	brmi	.+10     	; 0x1218 <__divsf3_pse+0x6c>
    120e:	9e 3f       	cpi	r25, 0xFE	; 254
    1210:	51 05       	cpc	r21, r1
    1212:	68 f0       	brcs	.+26     	; 0x122e <__divsf3_pse+0x82>
    1214:	79 c0       	rjmp	.+242    	; 0x1308 <__fp_inf>
    1216:	c3 c0       	rjmp	.+390    	; 0x139e <__fp_szero>
    1218:	5f 3f       	cpi	r21, 0xFF	; 255
    121a:	ec f3       	brlt	.-6      	; 0x1216 <__divsf3_pse+0x6a>
    121c:	98 3e       	cpi	r25, 0xE8	; 232
    121e:	dc f3       	brlt	.-10     	; 0x1216 <__divsf3_pse+0x6a>
    1220:	86 95       	lsr	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	f7 95       	ror	r31
    122a:	9f 5f       	subi	r25, 0xFF	; 255
    122c:	c9 f7       	brne	.-14     	; 0x1220 <__divsf3_pse+0x74>
    122e:	88 0f       	add	r24, r24
    1230:	91 1d       	adc	r25, r1
    1232:	96 95       	lsr	r25
    1234:	87 95       	ror	r24
    1236:	97 f9       	bld	r25, 7
    1238:	08 95       	ret
    123a:	e1 e0       	ldi	r30, 0x01	; 1
    123c:	66 0f       	add	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	bb 1f       	adc	r27, r27
    1244:	62 17       	cp	r22, r18
    1246:	73 07       	cpc	r23, r19
    1248:	84 07       	cpc	r24, r20
    124a:	ba 07       	cpc	r27, r26
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__divsf3_pse+0xaa>
    124e:	62 1b       	sub	r22, r18
    1250:	73 0b       	sbc	r23, r19
    1252:	84 0b       	sbc	r24, r20
    1254:	ba 0b       	sbc	r27, r26
    1256:	ee 1f       	adc	r30, r30
    1258:	88 f7       	brcc	.-30     	; 0x123c <__divsf3_pse+0x90>
    125a:	e0 95       	com	r30
    125c:	08 95       	ret

0000125e <__fixsfsi>:
    125e:	04 d0       	rcall	.+8      	; 0x1268 <__fixunssfsi>
    1260:	68 94       	set
    1262:	b1 11       	cpse	r27, r1
    1264:	9c c0       	rjmp	.+312    	; 0x139e <__fp_szero>
    1266:	08 95       	ret

00001268 <__fixunssfsi>:
    1268:	7f d0       	rcall	.+254    	; 0x1368 <__fp_splitA>
    126a:	88 f0       	brcs	.+34     	; 0x128e <__fixunssfsi+0x26>
    126c:	9f 57       	subi	r25, 0x7F	; 127
    126e:	90 f0       	brcs	.+36     	; 0x1294 <__fixunssfsi+0x2c>
    1270:	b9 2f       	mov	r27, r25
    1272:	99 27       	eor	r25, r25
    1274:	b7 51       	subi	r27, 0x17	; 23
    1276:	a0 f0       	brcs	.+40     	; 0x12a0 <__fixunssfsi+0x38>
    1278:	d1 f0       	breq	.+52     	; 0x12ae <__fixunssfsi+0x46>
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	1a f0       	brmi	.+6      	; 0x128a <__fixunssfsi+0x22>
    1284:	ba 95       	dec	r27
    1286:	c9 f7       	brne	.-14     	; 0x127a <__fixunssfsi+0x12>
    1288:	12 c0       	rjmp	.+36     	; 0x12ae <__fixunssfsi+0x46>
    128a:	b1 30       	cpi	r27, 0x01	; 1
    128c:	81 f0       	breq	.+32     	; 0x12ae <__fixunssfsi+0x46>
    128e:	86 d0       	rcall	.+268    	; 0x139c <__fp_zero>
    1290:	b1 e0       	ldi	r27, 0x01	; 1
    1292:	08 95       	ret
    1294:	83 c0       	rjmp	.+262    	; 0x139c <__fp_zero>
    1296:	67 2f       	mov	r22, r23
    1298:	78 2f       	mov	r23, r24
    129a:	88 27       	eor	r24, r24
    129c:	b8 5f       	subi	r27, 0xF8	; 248
    129e:	39 f0       	breq	.+14     	; 0x12ae <__fixunssfsi+0x46>
    12a0:	b9 3f       	cpi	r27, 0xF9	; 249
    12a2:	cc f3       	brlt	.-14     	; 0x1296 <__fixunssfsi+0x2e>
    12a4:	86 95       	lsr	r24
    12a6:	77 95       	ror	r23
    12a8:	67 95       	ror	r22
    12aa:	b3 95       	inc	r27
    12ac:	d9 f7       	brne	.-10     	; 0x12a4 <__fixunssfsi+0x3c>
    12ae:	3e f4       	brtc	.+14     	; 0x12be <__fixunssfsi+0x56>
    12b0:	90 95       	com	r25
    12b2:	80 95       	com	r24
    12b4:	70 95       	com	r23
    12b6:	61 95       	neg	r22
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	8f 4f       	sbci	r24, 0xFF	; 255
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	08 95       	ret

000012c0 <__fp_cmp>:
    12c0:	99 0f       	add	r25, r25
    12c2:	00 08       	sbc	r0, r0
    12c4:	55 0f       	add	r21, r21
    12c6:	aa 0b       	sbc	r26, r26
    12c8:	e0 e8       	ldi	r30, 0x80	; 128
    12ca:	fe ef       	ldi	r31, 0xFE	; 254
    12cc:	16 16       	cp	r1, r22
    12ce:	17 06       	cpc	r1, r23
    12d0:	e8 07       	cpc	r30, r24
    12d2:	f9 07       	cpc	r31, r25
    12d4:	c0 f0       	brcs	.+48     	; 0x1306 <__fp_cmp+0x46>
    12d6:	12 16       	cp	r1, r18
    12d8:	13 06       	cpc	r1, r19
    12da:	e4 07       	cpc	r30, r20
    12dc:	f5 07       	cpc	r31, r21
    12de:	98 f0       	brcs	.+38     	; 0x1306 <__fp_cmp+0x46>
    12e0:	62 1b       	sub	r22, r18
    12e2:	73 0b       	sbc	r23, r19
    12e4:	84 0b       	sbc	r24, r20
    12e6:	95 0b       	sbc	r25, r21
    12e8:	39 f4       	brne	.+14     	; 0x12f8 <__fp_cmp+0x38>
    12ea:	0a 26       	eor	r0, r26
    12ec:	61 f0       	breq	.+24     	; 0x1306 <__fp_cmp+0x46>
    12ee:	23 2b       	or	r18, r19
    12f0:	24 2b       	or	r18, r20
    12f2:	25 2b       	or	r18, r21
    12f4:	21 f4       	brne	.+8      	; 0x12fe <__fp_cmp+0x3e>
    12f6:	08 95       	ret
    12f8:	0a 26       	eor	r0, r26
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__fp_cmp+0x3e>
    12fc:	a1 40       	sbci	r26, 0x01	; 1
    12fe:	a6 95       	lsr	r26
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	81 1d       	adc	r24, r1
    1304:	81 1d       	adc	r24, r1
    1306:	08 95       	ret

00001308 <__fp_inf>:
    1308:	97 f9       	bld	r25, 7
    130a:	9f 67       	ori	r25, 0x7F	; 127
    130c:	80 e8       	ldi	r24, 0x80	; 128
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	08 95       	ret

00001314 <__fp_nan>:
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	80 ec       	ldi	r24, 0xC0	; 192
    1318:	08 95       	ret

0000131a <__fp_pscA>:
    131a:	00 24       	eor	r0, r0
    131c:	0a 94       	dec	r0
    131e:	16 16       	cp	r1, r22
    1320:	17 06       	cpc	r1, r23
    1322:	18 06       	cpc	r1, r24
    1324:	09 06       	cpc	r0, r25
    1326:	08 95       	ret

00001328 <__fp_pscB>:
    1328:	00 24       	eor	r0, r0
    132a:	0a 94       	dec	r0
    132c:	12 16       	cp	r1, r18
    132e:	13 06       	cpc	r1, r19
    1330:	14 06       	cpc	r1, r20
    1332:	05 06       	cpc	r0, r21
    1334:	08 95       	ret

00001336 <__fp_round>:
    1336:	09 2e       	mov	r0, r25
    1338:	03 94       	inc	r0
    133a:	00 0c       	add	r0, r0
    133c:	11 f4       	brne	.+4      	; 0x1342 <__fp_round+0xc>
    133e:	88 23       	and	r24, r24
    1340:	52 f0       	brmi	.+20     	; 0x1356 <__fp_round+0x20>
    1342:	bb 0f       	add	r27, r27
    1344:	40 f4       	brcc	.+16     	; 0x1356 <__fp_round+0x20>
    1346:	bf 2b       	or	r27, r31
    1348:	11 f4       	brne	.+4      	; 0x134e <__fp_round+0x18>
    134a:	60 ff       	sbrs	r22, 0
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <__fp_round+0x20>
    134e:	6f 5f       	subi	r22, 0xFF	; 255
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	08 95       	ret

00001358 <__fp_split3>:
    1358:	57 fd       	sbrc	r21, 7
    135a:	90 58       	subi	r25, 0x80	; 128
    135c:	44 0f       	add	r20, r20
    135e:	55 1f       	adc	r21, r21
    1360:	59 f0       	breq	.+22     	; 0x1378 <__fp_splitA+0x10>
    1362:	5f 3f       	cpi	r21, 0xFF	; 255
    1364:	71 f0       	breq	.+28     	; 0x1382 <__fp_splitA+0x1a>
    1366:	47 95       	ror	r20

00001368 <__fp_splitA>:
    1368:	88 0f       	add	r24, r24
    136a:	97 fb       	bst	r25, 7
    136c:	99 1f       	adc	r25, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__fp_splitA+0x20>
    1370:	9f 3f       	cpi	r25, 0xFF	; 255
    1372:	79 f0       	breq	.+30     	; 0x1392 <__fp_splitA+0x2a>
    1374:	87 95       	ror	r24
    1376:	08 95       	ret
    1378:	12 16       	cp	r1, r18
    137a:	13 06       	cpc	r1, r19
    137c:	14 06       	cpc	r1, r20
    137e:	55 1f       	adc	r21, r21
    1380:	f2 cf       	rjmp	.-28     	; 0x1366 <__fp_split3+0xe>
    1382:	46 95       	lsr	r20
    1384:	f1 df       	rcall	.-30     	; 0x1368 <__fp_splitA>
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <__fp_splitA+0x30>
    1388:	16 16       	cp	r1, r22
    138a:	17 06       	cpc	r1, r23
    138c:	18 06       	cpc	r1, r24
    138e:	99 1f       	adc	r25, r25
    1390:	f1 cf       	rjmp	.-30     	; 0x1374 <__fp_splitA+0xc>
    1392:	86 95       	lsr	r24
    1394:	71 05       	cpc	r23, r1
    1396:	61 05       	cpc	r22, r1
    1398:	08 94       	sec
    139a:	08 95       	ret

0000139c <__fp_zero>:
    139c:	e8 94       	clt

0000139e <__fp_szero>:
    139e:	bb 27       	eor	r27, r27
    13a0:	66 27       	eor	r22, r22
    13a2:	77 27       	eor	r23, r23
    13a4:	cb 01       	movw	r24, r22
    13a6:	97 f9       	bld	r25, 7
    13a8:	08 95       	ret

000013aa <__gesf2>:
    13aa:	8a df       	rcall	.-236    	; 0x12c0 <__fp_cmp>
    13ac:	08 f4       	brcc	.+2      	; 0x13b0 <__gesf2+0x6>
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	08 95       	ret

000013b2 <__mulsf3>:
    13b2:	0b d0       	rcall	.+22     	; 0x13ca <__mulsf3x>
    13b4:	c0 cf       	rjmp	.-128    	; 0x1336 <__fp_round>
    13b6:	b1 df       	rcall	.-158    	; 0x131a <__fp_pscA>
    13b8:	28 f0       	brcs	.+10     	; 0x13c4 <__mulsf3+0x12>
    13ba:	b6 df       	rcall	.-148    	; 0x1328 <__fp_pscB>
    13bc:	18 f0       	brcs	.+6      	; 0x13c4 <__mulsf3+0x12>
    13be:	95 23       	and	r25, r21
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <__mulsf3+0x12>
    13c2:	a2 cf       	rjmp	.-188    	; 0x1308 <__fp_inf>
    13c4:	a7 cf       	rjmp	.-178    	; 0x1314 <__fp_nan>
    13c6:	11 24       	eor	r1, r1
    13c8:	ea cf       	rjmp	.-44     	; 0x139e <__fp_szero>

000013ca <__mulsf3x>:
    13ca:	c6 df       	rcall	.-116    	; 0x1358 <__fp_split3>
    13cc:	a0 f3       	brcs	.-24     	; 0x13b6 <__mulsf3+0x4>

000013ce <__mulsf3_pse>:
    13ce:	95 9f       	mul	r25, r21
    13d0:	d1 f3       	breq	.-12     	; 0x13c6 <__mulsf3+0x14>
    13d2:	95 0f       	add	r25, r21
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	55 1f       	adc	r21, r21
    13d8:	62 9f       	mul	r22, r18
    13da:	f0 01       	movw	r30, r0
    13dc:	72 9f       	mul	r23, r18
    13de:	bb 27       	eor	r27, r27
    13e0:	f0 0d       	add	r31, r0
    13e2:	b1 1d       	adc	r27, r1
    13e4:	63 9f       	mul	r22, r19
    13e6:	aa 27       	eor	r26, r26
    13e8:	f0 0d       	add	r31, r0
    13ea:	b1 1d       	adc	r27, r1
    13ec:	aa 1f       	adc	r26, r26
    13ee:	64 9f       	mul	r22, r20
    13f0:	66 27       	eor	r22, r22
    13f2:	b0 0d       	add	r27, r0
    13f4:	a1 1d       	adc	r26, r1
    13f6:	66 1f       	adc	r22, r22
    13f8:	82 9f       	mul	r24, r18
    13fa:	22 27       	eor	r18, r18
    13fc:	b0 0d       	add	r27, r0
    13fe:	a1 1d       	adc	r26, r1
    1400:	62 1f       	adc	r22, r18
    1402:	73 9f       	mul	r23, r19
    1404:	b0 0d       	add	r27, r0
    1406:	a1 1d       	adc	r26, r1
    1408:	62 1f       	adc	r22, r18
    140a:	83 9f       	mul	r24, r19
    140c:	a0 0d       	add	r26, r0
    140e:	61 1d       	adc	r22, r1
    1410:	22 1f       	adc	r18, r18
    1412:	74 9f       	mul	r23, r20
    1414:	33 27       	eor	r19, r19
    1416:	a0 0d       	add	r26, r0
    1418:	61 1d       	adc	r22, r1
    141a:	23 1f       	adc	r18, r19
    141c:	84 9f       	mul	r24, r20
    141e:	60 0d       	add	r22, r0
    1420:	21 1d       	adc	r18, r1
    1422:	82 2f       	mov	r24, r18
    1424:	76 2f       	mov	r23, r22
    1426:	6a 2f       	mov	r22, r26
    1428:	11 24       	eor	r1, r1
    142a:	9f 57       	subi	r25, 0x7F	; 127
    142c:	50 40       	sbci	r21, 0x00	; 0
    142e:	8a f0       	brmi	.+34     	; 0x1452 <__mulsf3_pse+0x84>
    1430:	e1 f0       	breq	.+56     	; 0x146a <__mulsf3_pse+0x9c>
    1432:	88 23       	and	r24, r24
    1434:	4a f0       	brmi	.+18     	; 0x1448 <__mulsf3_pse+0x7a>
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	bb 1f       	adc	r27, r27
    143c:	66 1f       	adc	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	91 50       	subi	r25, 0x01	; 1
    1444:	50 40       	sbci	r21, 0x00	; 0
    1446:	a9 f7       	brne	.-22     	; 0x1432 <__mulsf3_pse+0x64>
    1448:	9e 3f       	cpi	r25, 0xFE	; 254
    144a:	51 05       	cpc	r21, r1
    144c:	70 f0       	brcs	.+28     	; 0x146a <__mulsf3_pse+0x9c>
    144e:	5c cf       	rjmp	.-328    	; 0x1308 <__fp_inf>
    1450:	a6 cf       	rjmp	.-180    	; 0x139e <__fp_szero>
    1452:	5f 3f       	cpi	r21, 0xFF	; 255
    1454:	ec f3       	brlt	.-6      	; 0x1450 <__mulsf3_pse+0x82>
    1456:	98 3e       	cpi	r25, 0xE8	; 232
    1458:	dc f3       	brlt	.-10     	; 0x1450 <__mulsf3_pse+0x82>
    145a:	86 95       	lsr	r24
    145c:	77 95       	ror	r23
    145e:	67 95       	ror	r22
    1460:	b7 95       	ror	r27
    1462:	f7 95       	ror	r31
    1464:	e7 95       	ror	r30
    1466:	9f 5f       	subi	r25, 0xFF	; 255
    1468:	c1 f7       	brne	.-16     	; 0x145a <__mulsf3_pse+0x8c>
    146a:	fe 2b       	or	r31, r30
    146c:	88 0f       	add	r24, r24
    146e:	91 1d       	adc	r25, r1
    1470:	96 95       	lsr	r25
    1472:	87 95       	ror	r24
    1474:	97 f9       	bld	r25, 7
    1476:	08 95       	ret

00001478 <__udivmodsi4>:
    1478:	a1 e2       	ldi	r26, 0x21	; 33
    147a:	1a 2e       	mov	r1, r26
    147c:	aa 1b       	sub	r26, r26
    147e:	bb 1b       	sub	r27, r27
    1480:	fd 01       	movw	r30, r26
    1482:	0d c0       	rjmp	.+26     	; 0x149e <__udivmodsi4_ep>

00001484 <__udivmodsi4_loop>:
    1484:	aa 1f       	adc	r26, r26
    1486:	bb 1f       	adc	r27, r27
    1488:	ee 1f       	adc	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	a2 17       	cp	r26, r18
    148e:	b3 07       	cpc	r27, r19
    1490:	e4 07       	cpc	r30, r20
    1492:	f5 07       	cpc	r31, r21
    1494:	20 f0       	brcs	.+8      	; 0x149e <__udivmodsi4_ep>
    1496:	a2 1b       	sub	r26, r18
    1498:	b3 0b       	sbc	r27, r19
    149a:	e4 0b       	sbc	r30, r20
    149c:	f5 0b       	sbc	r31, r21

0000149e <__udivmodsi4_ep>:
    149e:	66 1f       	adc	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	88 1f       	adc	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	1a 94       	dec	r1
    14a8:	69 f7       	brne	.-38     	; 0x1484 <__udivmodsi4_loop>
    14aa:	60 95       	com	r22
    14ac:	70 95       	com	r23
    14ae:	80 95       	com	r24
    14b0:	90 95       	com	r25
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	bd 01       	movw	r22, r26
    14b8:	cf 01       	movw	r24, r30
    14ba:	08 95       	ret

000014bc <memcpy>:
    14bc:	fb 01       	movw	r30, r22
    14be:	dc 01       	movw	r26, r24
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <memcpy+0xa>
    14c2:	01 90       	ld	r0, Z+
    14c4:	0d 92       	st	X+, r0
    14c6:	41 50       	subi	r20, 0x01	; 1
    14c8:	50 40       	sbci	r21, 0x00	; 0
    14ca:	d8 f7       	brcc	.-10     	; 0x14c2 <memcpy+0x6>
    14cc:	08 95       	ret

000014ce <memset>:
    14ce:	dc 01       	movw	r26, r24
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <memset+0x6>
    14d2:	6d 93       	st	X+, r22
    14d4:	41 50       	subi	r20, 0x01	; 1
    14d6:	50 40       	sbci	r21, 0x00	; 0
    14d8:	e0 f7       	brcc	.-8      	; 0x14d2 <memset+0x4>
    14da:	08 95       	ret

000014dc <strcmp>:
    14dc:	fb 01       	movw	r30, r22
    14de:	dc 01       	movw	r26, r24
    14e0:	8d 91       	ld	r24, X+
    14e2:	01 90       	ld	r0, Z+
    14e4:	80 19       	sub	r24, r0
    14e6:	01 10       	cpse	r0, r1
    14e8:	d9 f3       	breq	.-10     	; 0x14e0 <strcmp+0x4>
    14ea:	99 0b       	sbc	r25, r25
    14ec:	08 95       	ret

000014ee <strcpy>:
    14ee:	fb 01       	movw	r30, r22
    14f0:	dc 01       	movw	r26, r24
    14f2:	01 90       	ld	r0, Z+
    14f4:	0d 92       	st	X+, r0
    14f6:	00 20       	and	r0, r0
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <strcpy+0x4>
    14fa:	08 95       	ret

000014fc <strlen>:
    14fc:	fc 01       	movw	r30, r24
    14fe:	01 90       	ld	r0, Z+
    1500:	00 20       	and	r0, r0
    1502:	e9 f7       	brne	.-6      	; 0x14fe <strlen+0x2>
    1504:	80 95       	com	r24
    1506:	90 95       	com	r25
    1508:	8e 0f       	add	r24, r30
    150a:	9f 1f       	adc	r25, r31
    150c:	08 95       	ret

0000150e <_exit>:
    150e:	f8 94       	cli

00001510 <__stop_program>:
    1510:	ff cf       	rjmp	.-2      	; 0x1510 <__stop_program>
