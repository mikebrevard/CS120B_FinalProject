
bop_it_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000110a  0000119e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800126  00800126  000011c4  2**0
                  ALLOC
  3 .stab         00001bfc  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000075e  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000351e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003fa  00000000  00000000  0000355e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009a8  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000021b  00000000  00000000  00004300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009e2  00000000  00000000  0000451b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  00004f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004c4  00000000  00000000  000050f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000007a  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e0       	ldi	r30, 0x0A	; 10
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 35       	cpi	r26, 0x58	; 88
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <main>
      c6:	0c 94 83 08 	jmp	0x1106	; 0x1106 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initUSART>:
//Functionality - Initializes TX and RX on PORT D
//Parameter: usartNum specifies which USART is being initialized
//			 If usartNum != 1, default to USART0
//Returns: None
void initUSART(unsigned char usartNum)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	0f 92       	push	r0
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
      da:	89 81       	ldd	r24, Y+1	; 0x01
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	e1 f0       	breq	.+56     	; 0x118 <initUSART+0x4a>
		// Turn on the reception circuitry of USART0
		// Turn on receiver and transmitter
		// Use 8-bit character sizes 
		UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
      e0:	81 ec       	ldi	r24, 0xC1	; 193
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	21 ec       	ldi	r18, 0xC1	; 193
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	28 61       	ori	r18, 0x18	; 24
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
		UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
      f2:	82 ec       	ldi	r24, 0xC2	; 194
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	22 ec       	ldi	r18, 0xC2	; 194
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	26 60       	ori	r18, 0x06	; 6
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR0 register
		UBRR0L = BAUD_PRESCALE;
     104:	84 ec       	ldi	r24, 0xC4	; 196
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	23 e3       	ldi	r18, 0x33	; 51
     10a:	fc 01       	movw	r30, r24
     10c:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR0 register
		UBRR0H = (BAUD_PRESCALE >> 8);
     10e:	85 ec       	ldi	r24, 0xC5	; 197
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	fc 01       	movw	r30, r24
     114:	10 82       	st	Z, r1
     116:	1b c0       	rjmp	.+54     	; 0x14e <initUSART+0x80>
	}
	else {
		// Turn on the reception circuitry for USART1
		// Turn on receiver and transmitter
		// Use 8-bit character sizes
		UCSR1B |= (1 << RXEN1)  | (1 << TXEN1);
     118:	89 ec       	ldi	r24, 0xC9	; 201
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	29 ec       	ldi	r18, 0xC9	; 201
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	f9 01       	movw	r30, r18
     122:	20 81       	ld	r18, Z
     124:	28 61       	ori	r18, 0x18	; 24
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
		UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
     12a:	8a ec       	ldi	r24, 0xCA	; 202
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	2a ec       	ldi	r18, 0xCA	; 202
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	20 81       	ld	r18, Z
     136:	26 60       	ori	r18, 0x06	; 6
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR1 register
		UBRR1L = BAUD_PRESCALE;
     13c:	8c ec       	ldi	r24, 0xCC	; 204
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	23 e3       	ldi	r18, 0x33	; 51
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR1 register
		UBRR1H = (BAUD_PRESCALE >> 8);
     146:	8d ec       	ldi	r24, 0xCD	; 205
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	fc 01       	movw	r30, r24
     14c:	10 82       	st	Z, r1
	}
}
     14e:	0f 90       	pop	r0
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <USART_IsSendReady>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	0f 92       	push	r0
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	31 f0       	breq	.+12     	; 0x174 <USART_IsSendReady+0x1e>
     168:	80 ec       	ldi	r24, 0xC0	; 192
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	80 72       	andi	r24, 0x20	; 32
     172:	05 c0       	rjmp	.+10     	; 0x17e <USART_IsSendReady+0x28>
     174:	88 ec       	ldi	r24, 0xC8	; 200
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	fc 01       	movw	r30, r24
     17a:	80 81       	ld	r24, Z
     17c:	80 72       	andi	r24, 0x20	; 32
}
     17e:	0f 90       	pop	r0
     180:	cf 91       	pop	r28
     182:	df 91       	pop	r29
     184:	08 95       	ret

00000186 <USART_HasTransmitted>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	0f 92       	push	r0
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	31 f0       	breq	.+12     	; 0x1a4 <USART_HasTransmitted+0x1e>
     198:	80 ec       	ldi	r24, 0xC0	; 192
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	80 74       	andi	r24, 0x40	; 64
     1a2:	05 c0       	rjmp	.+10     	; 0x1ae <USART_HasTransmitted+0x28>
     1a4:	88 ec       	ldi	r24, 0xC8	; 200
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	80 74       	andi	r24, 0x40	; 64
}
     1ae:	0f 90       	pop	r0
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	08 95       	ret

000001b6 <USART_HasReceived>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <USART_HasReceived+0x1e>
     1c8:	80 ec       	ldi	r24, 0xC0	; 192
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	80 78       	andi	r24, 0x80	; 128
     1d2:	05 c0       	rjmp	.+10     	; 0x1de <USART_HasReceived+0x28>
     1d4:	88 ec       	ldi	r24, 0xC8	; 200
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	80 78       	andi	r24, 0x80	; 128
}
     1de:	0f 90       	pop	r0
     1e0:	cf 91       	pop	r28
     1e2:	df 91       	pop	r29
     1e4:	08 95       	ret

000001e6 <USART_Flush>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Flushes the data register
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	89 83       	std	Y+1, r24	; 0x01
	static unsigned char dummy;
	if (usartNum != 1) {
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	a9 f0       	breq	.+42     	; 0x222 <USART_Flush+0x3c>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
     1f8:	06 c0       	rjmp	.+12     	; 0x206 <USART_Flush+0x20>
     1fa:	86 ec       	ldi	r24, 0xC6	; 198
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	80 93 47 01 	sts	0x0147, r24
     206:	80 ec       	ldi	r24, 0xC0	; 192
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	fc 01       	movw	r30, r24
     20c:	80 81       	ld	r24, Z
     20e:	88 23       	and	r24, r24
     210:	a4 f3       	brlt	.-24     	; 0x1fa <USART_Flush+0x14>
     212:	0e c0       	rjmp	.+28     	; 0x230 <USART_Flush+0x4a>
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     214:	8e ec       	ldi	r24, 0xCE	; 206
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	80 81       	ld	r24, Z
     21c:	80 93 47 01 	sts	0x0147, r24
     220:	01 c0       	rjmp	.+2      	; 0x224 <USART_Flush+0x3e>
     222:	00 00       	nop
     224:	88 ec       	ldi	r24, 0xC8	; 200
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	fc 01       	movw	r30, r24
     22a:	80 81       	ld	r24, Z
     22c:	88 23       	and	r24, r24
     22e:	94 f3       	brlt	.-28     	; 0x214 <USART_Flush+0x2e>
	}
}
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <USART_Send>:
//Functionality - Sends an 8-bit char value
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	00 d0       	rcall	.+0      	; 0x23e <USART_Send+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	89 83       	std	Y+1, r24	; 0x01
     244:	6a 83       	std	Y+2, r22	; 0x02
	if (usartNum != 1) {
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	89 f0       	breq	.+34     	; 0x26e <USART_Send+0x36>
		while( !(UCSR0A & (1 << UDRE0)) );
     24c:	00 00       	nop
     24e:	80 ec       	ldi	r24, 0xC0	; 192
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	80 72       	andi	r24, 0x20	; 32
     25c:	90 70       	andi	r25, 0x00	; 0
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	b1 f3       	breq	.-20     	; 0x24e <USART_Send+0x16>
		UDR0 = sendMe;
     262:	86 ec       	ldi	r24, 0xC6	; 198
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	29 81       	ldd	r18, Y+1	; 0x01
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	10 c0       	rjmp	.+32     	; 0x28e <USART_Send+0x56>
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     26e:	00 00       	nop
     270:	88 ec       	ldi	r24, 0xC8	; 200
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	fc 01       	movw	r30, r24
     276:	80 81       	ld	r24, Z
     278:	88 2f       	mov	r24, r24
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	80 72       	andi	r24, 0x20	; 32
     27e:	90 70       	andi	r25, 0x00	; 0
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	b1 f3       	breq	.-20     	; 0x270 <USART_Send+0x38>
		UDR1 = sendMe;
     284:	8e ec       	ldi	r24, 0xCE	; 206
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	29 81       	ldd	r18, Y+1	; 0x01
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
	}
}
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	cf 91       	pop	r28
     294:	df 91       	pop	r29
     296:	08 95       	ret

00000298 <USART_Receive>:
// **** WARNING: THIS FUNCTION BLOCKS MULTI-TASKING; USE WITH CAUTION!!! ****
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
     298:	df 93       	push	r29
     29a:	cf 93       	push	r28
     29c:	0f 92       	push	r0
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	89 83       	std	Y+1, r24	; 0x01
	if (usartNum != 1) {
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	61 f0       	breq	.+24     	; 0x2c2 <USART_Receive+0x2a>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     2aa:	00 00       	nop
     2ac:	80 ec       	ldi	r24, 0xC0	; 192
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 23       	and	r24, r24
     2b6:	d4 f7       	brge	.-12     	; 0x2ac <USART_Receive+0x14>
		return UDR0; // Get and return received data from buffer
     2b8:	86 ec       	ldi	r24, 0xC6	; 198
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <USART_Receive+0x40>
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     2c2:	00 00       	nop
     2c4:	88 ec       	ldi	r24, 0xC8	; 200
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	88 23       	and	r24, r24
     2ce:	d4 f7       	brge	.-12     	; 0x2c4 <USART_Receive+0x2c>
		return UDR1;
     2d0:	8e ec       	ldi	r24, 0xCE	; 206
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	80 81       	ld	r24, Z
	}
}
     2d8:	0f 90       	pop	r0
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <findGCD>:
#include <avr/io.h>
#include <avr/interrupt.h>

//--------Find GCD function -------------------------------
unsigned long int findGCD (unsigned long int a, unsigned long int b)
{
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	2c 97       	sbiw	r28, 0x0c	; 12
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	6d 83       	std	Y+5, r22	; 0x05
     2f6:	7e 83       	std	Y+6, r23	; 0x06
     2f8:	8f 83       	std	Y+7, r24	; 0x07
     2fa:	98 87       	std	Y+8, r25	; 0x08
     2fc:	29 87       	std	Y+9, r18	; 0x09
     2fe:	3a 87       	std	Y+10, r19	; 0x0a
     300:	4b 87       	std	Y+11, r20	; 0x0b
     302:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int c;
	while(1){
	c = a%b;
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	9e 81       	ldd	r25, Y+6	; 0x06
     308:	af 81       	ldd	r26, Y+7	; 0x07
     30a:	b8 85       	ldd	r27, Y+8	; 0x08
     30c:	29 85       	ldd	r18, Y+9	; 0x09
     30e:	3a 85       	ldd	r19, Y+10	; 0x0a
     310:	4b 85       	ldd	r20, Y+11	; 0x0b
     312:	5c 85       	ldd	r21, Y+12	; 0x0c
     314:	bc 01       	movw	r22, r24
     316:	cd 01       	movw	r24, r26
     318:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	ab 83       	std	Y+3, r26	; 0x03
     326:	bc 83       	std	Y+4, r27	; 0x04
	if(c==0){return b;}
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	ab 81       	ldd	r26, Y+3	; 0x03
     32e:	bc 81       	ldd	r27, Y+4	; 0x04
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	a1 05       	cpc	r26, r1
     334:	b1 05       	cpc	r27, r1
     336:	79 f4       	brne	.+30     	; 0x356 <findGCD+0x76>
     338:	89 85       	ldd	r24, Y+9	; 0x09
     33a:	9a 85       	ldd	r25, Y+10	; 0x0a
     33c:	ab 85       	ldd	r26, Y+11	; 0x0b
     33e:	bc 85       	ldd	r27, Y+12	; 0x0c
	a = b;
	b = c;
	}
	return 0;
}
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	2c 96       	adiw	r28, 0x0c	; 12
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	cf 91       	pop	r28
     352:	df 91       	pop	r29
     354:	08 95       	ret
{
	unsigned long int c;
	while(1){
	c = a%b;
	if(c==0){return b;}
	a = b;
     356:	89 85       	ldd	r24, Y+9	; 0x09
     358:	9a 85       	ldd	r25, Y+10	; 0x0a
     35a:	ab 85       	ldd	r26, Y+11	; 0x0b
     35c:	bc 85       	ldd	r27, Y+12	; 0x0c
     35e:	8d 83       	std	Y+5, r24	; 0x05
     360:	9e 83       	std	Y+6, r25	; 0x06
     362:	af 83       	std	Y+7, r26	; 0x07
     364:	b8 87       	std	Y+8, r27	; 0x08
	b = c;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	ab 81       	ldd	r26, Y+3	; 0x03
     36c:	bc 81       	ldd	r27, Y+4	; 0x04
     36e:	89 87       	std	Y+9, r24	; 0x09
     370:	9a 87       	std	Y+10, r25	; 0x0a
     372:	ab 87       	std	Y+11, r26	; 0x0b
     374:	bc 87       	std	Y+12, r27	; 0x0c
	}
     376:	c6 cf       	rjmp	.-116    	; 0x304 <findGCD+0x24>

00000378 <ADC_init>:
	return 0;
}

void ADC_init() {
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
     380:	8a e7       	ldi	r24, 0x7A	; 122
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	2a e7       	ldi	r18, 0x7A	; 122
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	20 6e       	ori	r18, 0xE0	; 224
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	// in Free Running Mode, a new conversion will trigger
	// whenever the previous conversion completes.
}
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <set_PWM>:
	
void set_PWM(double frequency) {
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <set_PWM+0xa>
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <set_PWM+0xc>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	69 83       	std	Y+1, r22	; 0x01
     3aa:	7a 83       	std	Y+2, r23	; 0x02
     3ac:	8b 83       	std	Y+3, r24	; 0x03
     3ae:	9c 83       	std	Y+4, r25	; 0x04
	
	// Keeps track of the currently set frequency
  // Will only update the registers when the frequency
  // changes, plays music uninterrupted.
	static double current_frequency;
	if (frequency != current_frequency) {
     3b0:	20 91 43 01 	lds	r18, 0x0143
     3b4:	30 91 44 01 	lds	r19, 0x0144
     3b8:	40 91 45 01 	lds	r20, 0x0145
     3bc:	50 91 46 01 	lds	r21, 0x0146
     3c0:	69 81       	ldd	r22, Y+1	; 0x01
     3c2:	7a 81       	ldd	r23, Y+2	; 0x02
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__cmpsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <set_PWM+0x3a>
     3d0:	85 c0       	rjmp	.+266    	; 0x4dc <set_PWM+0x144>

		if (!frequency) TCCR3B &= 0x08; //stops timer/counter
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	69 81       	ldd	r22, Y+1	; 0x01
     3d6:	7a 81       	ldd	r23, Y+2	; 0x02
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	a9 01       	movw	r20, r18
     3e2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__cmpsf2>
     3e6:	88 23       	and	r24, r24
     3e8:	09 f4       	brne	.+2      	; 0x3ec <set_PWM+0x54>
     3ea:	10 e0       	ldi	r17, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	81 27       	eor	r24, r17
     3f0:	88 23       	and	r24, r24
     3f2:	51 f0       	breq	.+20     	; 0x408 <set_PWM+0x70>
     3f4:	81 e9       	ldi	r24, 0x91	; 145
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	21 e9       	ldi	r18, 0x91	; 145
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	28 70       	andi	r18, 0x08	; 8
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
     406:	09 c0       	rjmp	.+18     	; 0x41a <set_PWM+0x82>
		else TCCR3B |= 0x03; // resumes/continues timer/counter
     408:	81 e9       	ldi	r24, 0x91	; 145
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	21 e9       	ldi	r18, 0x91	; 145
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	23 60       	ori	r18, 0x03	; 3
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
	
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) OCR3A = 0xFFFF;
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	69 81       	ldd	r22, Y+1	; 0x01
     41e:	7a 81       	ldd	r23, Y+2	; 0x02
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	9c 81       	ldd	r25, Y+4	; 0x04
     424:	28 e5       	ldi	r18, 0x58	; 88
     426:	39 e3       	ldi	r19, 0x39	; 57
     428:	44 e7       	ldi	r20, 0x74	; 116
     42a:	5f e3       	ldi	r21, 0x3F	; 63
     42c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__cmpsf2>
     430:	88 23       	and	r24, r24
     432:	0c f0       	brlt	.+2      	; 0x436 <set_PWM+0x9e>
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	11 23       	and	r17, r17
     438:	41 f0       	breq	.+16     	; 0x44a <set_PWM+0xb2>
     43a:	88 e9       	ldi	r24, 0x98	; 152
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	3f ef       	ldi	r19, 0xFF	; 255
     442:	fc 01       	movw	r30, r24
     444:	31 83       	std	Z+1, r19	; 0x01
     446:	20 83       	st	Z, r18
     448:	38 c0       	rjmp	.+112    	; 0x4ba <set_PWM+0x122>
	
		// prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) OCR3A = 0x0000;
     44a:	11 e0       	ldi	r17, 0x01	; 1
     44c:	69 81       	ldd	r22, Y+1	; 0x01
     44e:	7a 81       	ldd	r23, Y+2	; 0x02
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	9c 81       	ldd	r25, Y+4	; 0x04
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	34 e2       	ldi	r19, 0x24	; 36
     458:	44 ef       	ldi	r20, 0xF4	; 244
     45a:	56 e4       	ldi	r21, 0x46	; 70
     45c:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     460:	18 16       	cp	r1, r24
     462:	0c f0       	brlt	.+2      	; 0x466 <set_PWM+0xce>
     464:	10 e0       	ldi	r17, 0x00	; 0
     466:	11 23       	and	r17, r17
     468:	31 f0       	breq	.+12     	; 0x476 <set_PWM+0xde>
     46a:	88 e9       	ldi	r24, 0x98	; 152
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	11 82       	std	Z+1, r1	; 0x01
     472:	10 82       	st	Z, r1
     474:	22 c0       	rjmp	.+68     	; 0x4ba <set_PWM+0x122>
	
		// set OCR3A based on desired frequency
		else OCR3A = (short)(8000000 / (128 * frequency)) - 1;
     476:	08 e9       	ldi	r16, 0x98	; 152
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	69 81       	ldd	r22, Y+1	; 0x01
     47c:	7a 81       	ldd	r23, Y+2	; 0x02
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	53 e4       	ldi	r21, 0x43	; 67
     48a:	0e 94 fe 07 	call	0xffc	; 0xffc <__mulsf3>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	9c 01       	movw	r18, r24
     494:	ad 01       	movw	r20, r26
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	74 e2       	ldi	r23, 0x24	; 36
     49a:	84 ef       	ldi	r24, 0xF4	; 244
     49c:	9a e4       	ldi	r25, 0x4A	; 74
     49e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 54 07 	call	0xea8	; 0xea8 <__fixsfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f8 01       	movw	r30, r16
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24

		TCNT3 = 0; // resets counter
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	fc 01       	movw	r30, r24
     4c0:	11 82       	std	Z+1, r1	; 0x01
     4c2:	10 82       	st	Z, r1
		current_frequency = frequency;
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	9a 81       	ldd	r25, Y+2	; 0x02
     4c8:	ab 81       	ldd	r26, Y+3	; 0x03
     4ca:	bc 81       	ldd	r27, Y+4	; 0x04
     4cc:	80 93 43 01 	sts	0x0143, r24
     4d0:	90 93 44 01 	sts	0x0144, r25
     4d4:	a0 93 45 01 	sts	0x0145, r26
     4d8:	b0 93 46 01 	sts	0x0146, r27
		}
}
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret

000004ee <PWM_on>:

void PWM_on() {
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = (1 << COM3A0);
     4f6:	80 e9       	ldi	r24, 0x90	; 144
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	20 e4       	ldi	r18, 0x40	; 64
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     500:	81 e9       	ldi	r24, 0x91	; 145
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	2b e0       	ldi	r18, 0x0B	; 11
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	cb 01       	movw	r24, r22
     510:	0e 94 cc 01 	call	0x398	; 0x398 <set_PWM>
}
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <PWM_off>:

void PWM_off() {
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = 0x00;
     522:	80 e9       	ldi	r24, 0x90	; 144
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	fc 01       	movw	r30, r24
     528:	10 82       	st	Z, r1
	TCCR3B = 0x00;
     52a:	81 e9       	ldi	r24, 0x91	; 145
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	10 82       	st	Z, r1
}
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	08 95       	ret

00000538 <SetBit>:

// Bit-access functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	00 d0       	rcall	.+0      	; 0x53e <SetBit+0x6>
     53e:	0f 92       	push	r0
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	6a 83       	std	Y+2, r22	; 0x02
     548:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	88 23       	and	r24, r24
     54e:	79 f0       	breq	.+30     	; 0x56e <SetBit+0x36>
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	02 2e       	mov	r0, r18
     55c:	02 c0       	rjmp	.+4      	; 0x562 <SetBit+0x2a>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	0a 94       	dec	r0
     564:	e2 f7       	brpl	.-8      	; 0x55e <SetBit+0x26>
     566:	98 2f       	mov	r25, r24
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	89 2b       	or	r24, r25
     56c:	0f c0       	rjmp	.+30     	; 0x58c <SetBit+0x54>
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	02 2e       	mov	r0, r18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <SetBit+0x48>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <SetBit+0x44>
     584:	98 2f       	mov	r25, r24
     586:	90 95       	com	r25
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	89 23       	and	r24, r25
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	00 d0       	rcall	.+0      	; 0x59e <GetBit+0x6>
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	2a 81       	ldd	r18, Y+2	; 0x02
     5ae:	22 2f       	mov	r18, r18
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	02 2e       	mov	r0, r18
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <GetBit+0x22>
     5b6:	95 95       	asr	r25
     5b8:	87 95       	ror	r24
     5ba:	0a 94       	dec	r0
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <GetBit+0x1e>
     5be:	81 70       	andi	r24, 0x01	; 1
}
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <TimerOn>:
volatile unsigned char TimerFlag = 0;
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
	// bit3 = 0: CTC mode (clear timer on compare)
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s
	TCCR1B = 0x0B;
     5d2:	81 e8       	ldi	r24, 0x81	; 129
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2b e0       	ldi	r18, 0x0B	; 11
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
	// AVR output compare register OCR1A.
	// Timer interrupt will be generated when TCNT1==OCR1A
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	OCR1A = 125;// AVR timer interrupt mask register
     5dc:	88 e8       	ldi	r24, 0x88	; 136
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2d e7       	ldi	r18, 0x7D	; 125
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	31 83       	std	Z+1, r19	; 0x01
     5e8:	20 83       	st	Z, r18
	// bit1: OCIE1A -- enables compare match interrupt
	TIMSK1 = 0x02;
     5ea:	8f e6       	ldi	r24, 0x6F	; 111
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
	//Initialize avr counter
	TCNT1=0;
     5f4:	84 e8       	ldi	r24, 0x84	; 132
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	fc 01       	movw	r30, r24
     5fa:	11 82       	std	Z+1, r1	; 0x01
     5fc:	10 82       	st	Z, r1
	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
     5fe:	80 91 00 01 	lds	r24, 0x0100
     602:	90 91 01 01 	lds	r25, 0x0101
     606:	a0 91 02 01 	lds	r26, 0x0102
     60a:	b0 91 03 01 	lds	r27, 0x0103
     60e:	80 93 27 01 	sts	0x0127, r24
     612:	90 93 28 01 	sts	0x0128, r25
     616:	a0 93 29 01 	sts	0x0129, r26
     61a:	b0 93 2a 01 	sts	0x012A, r27
	//Enable global interrupts: 0x80: 1000000
	SREG |= 0x80;
     61e:	8f e5       	ldi	r24, 0x5F	; 95
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2f e5       	ldi	r18, 0x5F	; 95
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	20 68       	ori	r18, 0x80	; 128
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
}
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	08 95       	ret

00000636 <TimerOff>:

void TimerOff() {
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
	// bit3bit1bit0=000: timer off
	TCCR1B = 0x00;
     63e:	81 e8       	ldi	r24, 0x81	; 129
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	fc 01       	movw	r30, r24
     644:	10 82       	st	Z, r1
}
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <TimerISR>:

void TimerISR() {
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 26 01 	sts	0x0126, r24
}
     65a:	cf 91       	pop	r28
     65c:	df 91       	pop	r29
     65e:	08 95       	ret

00000660 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	00 90 5b 00 	lds	r0, 0x005B
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1 ms per TimerOn settings)
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
     690:	80 91 27 01 	lds	r24, 0x0127
     694:	90 91 28 01 	lds	r25, 0x0128
     698:	a0 91 29 01 	lds	r26, 0x0129
     69c:	b0 91 2a 01 	lds	r27, 0x012A
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	a1 09       	sbc	r26, r1
     6a4:	b1 09       	sbc	r27, r1
     6a6:	80 93 27 01 	sts	0x0127, r24
     6aa:	90 93 28 01 	sts	0x0128, r25
     6ae:	a0 93 29 01 	sts	0x0129, r26
     6b2:	b0 93 2a 01 	sts	0x012A, r27
	if (_avr_timer_cntcurr == 0) {
     6b6:	80 91 27 01 	lds	r24, 0x0127
     6ba:	90 91 28 01 	lds	r25, 0x0128
     6be:	a0 91 29 01 	lds	r26, 0x0129
     6c2:	b0 91 2a 01 	lds	r27, 0x012A
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	a1 05       	cpc	r26, r1
     6ca:	b1 05       	cpc	r27, r1
     6cc:	91 f4       	brne	.+36     	; 0x6f2 <__vector_13+0x92>
		// Call the ISR that the user uses
		TimerISR();
     6ce:	0e 94 26 03 	call	0x64c	; 0x64c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     6d2:	80 91 00 01 	lds	r24, 0x0100
     6d6:	90 91 01 01 	lds	r25, 0x0101
     6da:	a0 91 02 01 	lds	r26, 0x0102
     6de:	b0 91 03 01 	lds	r27, 0x0103
     6e2:	80 93 27 01 	sts	0x0127, r24
     6e6:	90 93 28 01 	sts	0x0128, r25
     6ea:	a0 93 29 01 	sts	0x0129, r26
     6ee:	b0 93 2a 01 	sts	0x012A, r27
	}
}
     6f2:	cf 91       	pop	r28
     6f4:	df 91       	pop	r29
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	0f 90       	pop	r0
     710:	00 92 5b 00 	sts	0x005B, r0
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	00 d0       	rcall	.+0      	; 0x724 <TimerSet+0x6>
     724:	00 d0       	rcall	.+0      	; 0x726 <TimerSet+0x8>
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	69 83       	std	Y+1, r22	; 0x01
     72c:	7a 83       	std	Y+2, r23	; 0x02
     72e:	8b 83       	std	Y+3, r24	; 0x03
     730:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	ab 81       	ldd	r26, Y+3	; 0x03
     738:	bc 81       	ldd	r27, Y+4	; 0x04
     73a:	80 93 00 01 	sts	0x0100, r24
     73e:	90 93 01 01 	sts	0x0101, r25
     742:	a0 93 02 01 	sts	0x0102, r26
     746:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
     74a:	80 91 00 01 	lds	r24, 0x0100
     74e:	90 91 01 01 	lds	r25, 0x0101
     752:	a0 91 02 01 	lds	r26, 0x0102
     756:	b0 91 03 01 	lds	r27, 0x0103
     75a:	80 93 27 01 	sts	0x0127, r24
     75e:	90 93 28 01 	sts	0x0128, r25
     762:	a0 93 29 01 	sts	0x0129, r26
     766:	b0 93 2a 01 	sts	0x012A, r27
}
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <SMTick1>:
//--------User defined FSMs--------------------------------

enum SM1_States { SM1_start };
// Monitors button connected to PA0. When the button is
// pressed, shared variable "pause" is toggled.
int SMTick1(int state) {
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	00 d0       	rcall	.+0      	; 0x77e <SMTick1+0x6>
     77e:	00 d0       	rcall	.+0      	; 0x780 <SMTick1+0x8>
     780:	0f 92       	push	r0
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	9d 83       	std	Y+5, r25	; 0x05
     788:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char const LENGTH_OF_LCD = 16;
     78a:	80 e1       	ldi	r24, 0x10	; 16
     78c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char cursor_position = 1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	89 83       	std	Y+1, r24	; 0x01
	unsigned char counter = 0x00;
     792:	1a 82       	std	Y+2, r1	; 0x02
	
	//State machine transitions
	switch (state) {
     794:	8c 81       	ldd	r24, Y+4	; 0x04
     796:	9d 81       	ldd	r25, Y+5	; 0x05
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	19 f4       	brne	.+6      	; 0x7a2 <SMTick1+0x2a>
		case SM1_start:
			state = SM1_start;
     79c:	1d 82       	std	Y+5, r1	; 0x05
     79e:	1c 82       	std	Y+4, r1	; 0x04
			break;
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <SMTick1+0x30>
		default:
			state = SM1_start;
     7a2:	1d 82       	std	Y+5, r1	; 0x05
     7a4:	1c 82       	std	Y+4, r1	; 0x04
			break;
     7a6:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     7a8:	8c 81       	ldd	r24, Y+4	; 0x04
     7aa:	9d 81       	ldd	r25, Y+5	; 0x05
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <SMTick1+0x3a>
     7b0:	50 c0       	rjmp	.+160    	; 0x852 <SMTick1+0xda>
		case SM1_start: 
			for (counter = 0, cursor_position = array_position; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     7b2:	1a 82       	std	Y+2, r1	; 0x02
     7b4:	80 91 2b 01 	lds	r24, 0x012B
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	21 c0       	rjmp	.+66     	; 0x7fe <SMTick1+0x86>
				if (cursor_position > sizeof(message)) {
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	8a 30       	cpi	r24, 0x0A	; 10
     7c0:	10 f0       	brcs	.+4      	; 0x7c6 <SMTick1+0x4e>
					cursor_position = 1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	89 83       	std	Y+1, r24	; 0x01
				}
				if (cursor_position - 1 >= 0) { display[counter] = message[cursor_position - 1]; }
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	88 2f       	mov	r24, r24
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	99 23       	and	r25, r25
     7d0:	84 f0       	brlt	.+32     	; 0x7f2 <SMTick1+0x7a>
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	88 2f       	mov	r24, r24
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	29 81       	ldd	r18, Y+1	; 0x01
     7da:	22 2f       	mov	r18, r18
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	30 40       	sbci	r19, 0x00	; 0
     7e2:	24 5e       	subi	r18, 0xE4	; 228
     7e4:	3e 4f       	sbci	r19, 0xFE	; 254
     7e6:	f9 01       	movw	r30, r18
     7e8:	20 81       	ld	r18, Z
     7ea:	88 5b       	subi	r24, 0xB8	; 184
     7ec:	9e 4f       	sbci	r25, 0xFE	; 254
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
			break;
	}
	//State machine actions
	switch(state) {
		case SM1_start: 
			for (counter = 0, cursor_position = array_position; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	8a 83       	std	Y+2, r24	; 0x02
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	8b 81       	ldd	r24, Y+3	; 0x03
     802:	98 17       	cp	r25, r24
     804:	d8 f2       	brcs	.-74     	; 0x7bc <SMTick1+0x44>
					cursor_position = 1;
				}
				if (cursor_position - 1 >= 0) { display[counter] = message[cursor_position - 1]; }
			}
			
			for (counter = 0, cursor_position = 1; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     806:	1a 82       	std	Y+2, r1	; 0x02
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	12 c0       	rjmp	.+36     	; 0x832 <SMTick1+0xba>
				LCD_Cursor(cursor_position);
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Cursor>
				LCD_WriteData(display[counter]);
     814:	8a 81       	ldd	r24, Y+2	; 0x02
     816:	88 2f       	mov	r24, r24
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	88 5b       	subi	r24, 0xB8	; 184
     81c:	9e 4f       	sbci	r25, 0xFE	; 254
     81e:	fc 01       	movw	r30, r24
     820:	80 81       	ld	r24, Z
     822:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_WriteData>
					cursor_position = 1;
				}
				if (cursor_position - 1 >= 0) { display[counter] = message[cursor_position - 1]; }
			}
			
			for (counter = 0, cursor_position = 1; counter < LENGTH_OF_LCD; cursor_position = cursor_position + 1, counter = counter + 1) {
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	8f 5f       	subi	r24, 0xFF	; 255
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	8a 83       	std	Y+2, r24	; 0x02
     832:	9a 81       	ldd	r25, Y+2	; 0x02
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	98 17       	cp	r25, r24
     838:	50 f3       	brcs	.-44     	; 0x80e <SMTick1+0x96>
				LCD_Cursor(cursor_position);
				LCD_WriteData(display[counter]);
			}	
			array_position = array_position + 1;
     83a:	80 91 2b 01 	lds	r24, 0x012B
     83e:	8f 5f       	subi	r24, 0xFF	; 255
     840:	80 93 2b 01 	sts	0x012B, r24
			if (array_position == (int) sizeof(message)) {
     844:	80 91 2b 01 	lds	r24, 0x012B
     848:	89 30       	cpi	r24, 0x09	; 9
     84a:	29 f4       	brne	.+10     	; 0x856 <SMTick1+0xde>
				array_position = 0;
     84c:	10 92 2b 01 	sts	0x012B, r1
			}			
			break;
     850:	03 c0       	rjmp	.+6      	; 0x858 <SMTick1+0xe0>
		default: break;
     852:	00 00       	nop
     854:	01 c0       	rjmp	.+2      	; 0x858 <SMTick1+0xe0>
			}	
			array_position = array_position + 1;
			if (array_position == (int) sizeof(message)) {
				array_position = 0;
			}			
			break;
     856:	00 00       	nop
		default: break;
	}
	return state;
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	9d 81       	ldd	r25, Y+5	; 0x05
}
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	08 95       	ret

0000086c <SMTick2>:

/**
* get received message and save as user choice
*/
enum SM2_States { SM2_start };
int SMTick2(int state) {
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	00 d0       	rcall	.+0      	; 0x872 <SMTick2+0x6>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	9a 83       	std	Y+2, r25	; 0x02
     878:	89 83       	std	Y+1, r24	; 0x01
	
	//State machine transitions
	switch (state) {
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	19 f4       	brne	.+6      	; 0x888 <SMTick2+0x1c>
		case SM2_start:
			state = SM2_start;
     882:	1a 82       	std	Y+2, r1	; 0x02
     884:	19 82       	std	Y+1, r1	; 0x01
			break;
     886:	03 c0       	rjmp	.+6      	; 0x88e <SMTick2+0x22>
		default:
			state = SM2_start;
     888:	1a 82       	std	Y+2, r1	; 0x02
     88a:	19 82       	std	Y+1, r1	; 0x01
			break;
     88c:	00 00       	nop
	}
	//State machine actions
	switch(state) {
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	59 f4       	brne	.+22     	; 0x8ac <SMTick2+0x40>
		case SM2_start: 
			if (USART_HasReceived(1)) {
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_HasReceived>
     89c:	88 23       	and	r24, r24
     89e:	41 f0       	breq	.+16     	; 0x8b0 <SMTick2+0x44>
				user_choice = USART_Receive(1);
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	0e 94 4c 01 	call	0x298	; 0x298 <USART_Receive>
     8a6:	80 93 2c 01 	sts	0x012C, r24
			} 
			break;
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <SMTick2+0x46>
		default: break;
     8ac:	00 00       	nop
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <SMTick2+0x46>
	switch(state) {
		case SM2_start: 
			if (USART_HasReceived(1)) {
				user_choice = USART_Receive(1);
			} 
			break;
     8b0:	00 00       	nop
		default: break;
	}
	return state;
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <main>:

// Implement scheduler code from PES.
int main() {
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	a0 97       	sbiw	r28, 0x20	; 32
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA
	// to pull down logic
	DDRA = 0x00; PORTA = 0xFF;
     8d8:	81 e2       	ldi	r24, 0x21	; 33
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	10 82       	st	Z, r1
     8e0:	82 e2       	ldi	r24, 0x22	; 34
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	2f ef       	ldi	r18, 0xFF	; 255
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
     8ea:	84 e2       	ldi	r24, 0x24	; 36
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	2f ef       	ldi	r18, 0xFF	; 255
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	85 e2       	ldi	r24, 0x25	; 37
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	fc 01       	movw	r30, r24
     8fa:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
     8fc:	87 e2       	ldi	r24, 0x27	; 39
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	2f ef       	ldi	r18, 0xFF	; 255
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18
     906:	88 e2       	ldi	r24, 0x28	; 40
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	fc 01       	movw	r30, r24
     90c:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
     90e:	8a e2       	ldi	r24, 0x2A	; 42
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	2f ef       	ldi	r18, 0xFF	; 255
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	8b e2       	ldi	r24, 0x2B	; 43
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	fc 01       	movw	r30, r24
     91e:	10 82       	st	Z, r1
	
	// Period for the tasks
	unsigned long int SMTick1_calc = 500;
     920:	84 ef       	ldi	r24, 0xF4	; 244
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	8b 83       	std	Y+3, r24	; 0x03
     92a:	9c 83       	std	Y+4, r25	; 0x04
     92c:	ad 83       	std	Y+5, r26	; 0x05
     92e:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	a0 e0       	ldi	r26, 0x00	; 0
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	8f 83       	std	Y+7, r24	; 0x07
     93a:	98 87       	std	Y+8, r25	; 0x08
     93c:	a9 87       	std	Y+9, r26	; 0x09
     93e:	ba 87       	std	Y+10, r27	; 0x0a
	
	//Calculating GCD
	unsigned long int tmpGCD = 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	a0 e0       	ldi	r26, 0x00	; 0
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	8b 87       	std	Y+11, r24	; 0x0b
     94a:	9c 87       	std	Y+12, r25	; 0x0c
     94c:	ad 87       	std	Y+13, r26	; 0x0d
     94e:	be 87       	std	Y+14, r27	; 0x0e
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	9c 81       	ldd	r25, Y+4	; 0x04
     954:	ad 81       	ldd	r26, Y+5	; 0x05
     956:	be 81       	ldd	r27, Y+6	; 0x06
     958:	2f 81       	ldd	r18, Y+7	; 0x07
     95a:	38 85       	ldd	r19, Y+8	; 0x08
     95c:	49 85       	ldd	r20, Y+9	; 0x09
     95e:	5a 85       	ldd	r21, Y+10	; 0x0a
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	0e 94 70 01 	call	0x2e0	; 0x2e0 <findGCD>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	8b 87       	std	Y+11, r24	; 0x0b
     96e:	9c 87       	std	Y+12, r25	; 0x0c
     970:	ad 87       	std	Y+13, r26	; 0x0d
     972:	be 87       	std	Y+14, r27	; 0x0e
	
	//Greatest common divisor for all tasks
	// or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
     974:	8b 85       	ldd	r24, Y+11	; 0x0b
     976:	9c 85       	ldd	r25, Y+12	; 0x0c
     978:	ad 85       	ldd	r26, Y+13	; 0x0d
     97a:	be 85       	ldd	r27, Y+14	; 0x0e
     97c:	8f 87       	std	Y+15, r24	; 0x0f
     97e:	98 8b       	std	Y+16, r25	; 0x10
     980:	a9 8b       	std	Y+17, r26	; 0x11
     982:	ba 8b       	std	Y+18, r27	; 0x12
	
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	9c 81       	ldd	r25, Y+4	; 0x04
     988:	ad 81       	ldd	r26, Y+5	; 0x05
     98a:	be 81       	ldd	r27, Y+6	; 0x06
     98c:	2f 85       	ldd	r18, Y+15	; 0x0f
     98e:	38 89       	ldd	r19, Y+16	; 0x10
     990:	49 89       	ldd	r20, Y+17	; 0x11
     992:	5a 89       	ldd	r21, Y+18	; 0x12
     994:	bc 01       	movw	r22, r24
     996:	cd 01       	movw	r24, r26
     998:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
     99c:	2b 8b       	std	Y+19, r18	; 0x13
     99e:	3c 8b       	std	Y+20, r19	; 0x14
     9a0:	4d 8b       	std	Y+21, r20	; 0x15
     9a2:	5e 8b       	std	Y+22, r21	; 0x16
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
     9a4:	8f 81       	ldd	r24, Y+7	; 0x07
     9a6:	98 85       	ldd	r25, Y+8	; 0x08
     9a8:	a9 85       	ldd	r26, Y+9	; 0x09
     9aa:	ba 85       	ldd	r27, Y+10	; 0x0a
     9ac:	2f 85       	ldd	r18, Y+15	; 0x0f
     9ae:	38 89       	ldd	r19, Y+16	; 0x10
     9b0:	49 89       	ldd	r20, Y+17	; 0x11
     9b2:	5a 89       	ldd	r21, Y+18	; 0x12
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__udivmodsi4>
     9bc:	2f 8b       	std	Y+23, r18	; 0x17
     9be:	38 8f       	std	Y+24, r19	; 0x18
     9c0:	49 8f       	std	Y+25, r20	; 0x19
     9c2:	5a 8f       	std	Y+26, r21	; 0x1a

	//Declare an array of tasks
	static task task1, task2;
	task *tasks[] = { &task1 , &task2 };
     9c4:	8d e2       	ldi	r24, 0x2D	; 45
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	9e 8f       	std	Y+30, r25	; 0x1e
     9ca:	8d 8f       	std	Y+29, r24	; 0x1d
     9cc:	88 e3       	ldi	r24, 0x38	; 56
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	98 a3       	std	Y+32, r25	; 0x20
     9d2:	8f 8f       	std	Y+31, r24	; 0x1f
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	9c 8f       	std	Y+28, r25	; 0x1c
     9da:	8b 8f       	std	Y+27, r24	; 0x1b
	// Task 1
	task1.state = -1;
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	80 93 2d 01 	sts	0x012D, r24
	task1.period = SMTick1_period;
     9e2:	8b 89       	ldd	r24, Y+19	; 0x13
     9e4:	9c 89       	ldd	r25, Y+20	; 0x14
     9e6:	ad 89       	ldd	r26, Y+21	; 0x15
     9e8:	be 89       	ldd	r27, Y+22	; 0x16
     9ea:	80 93 2e 01 	sts	0x012E, r24
     9ee:	90 93 2f 01 	sts	0x012F, r25
     9f2:	a0 93 30 01 	sts	0x0130, r26
     9f6:	b0 93 31 01 	sts	0x0131, r27
	task1.elapsedTime = SMTick1_period;
     9fa:	8b 89       	ldd	r24, Y+19	; 0x13
     9fc:	9c 89       	ldd	r25, Y+20	; 0x14
     9fe:	ad 89       	ldd	r26, Y+21	; 0x15
     a00:	be 89       	ldd	r27, Y+22	; 0x16
     a02:	80 93 32 01 	sts	0x0132, r24
     a06:	90 93 33 01 	sts	0x0133, r25
     a0a:	a0 93 34 01 	sts	0x0134, r26
     a0e:	b0 93 35 01 	sts	0x0135, r27
	task1.TickFct = &SMTick1;
     a12:	8c eb       	ldi	r24, 0xBC	; 188
     a14:	93 e0       	ldi	r25, 0x03	; 3
     a16:	90 93 37 01 	sts	0x0137, r25
     a1a:	80 93 36 01 	sts	0x0136, r24
	// Task 2
	task2.state = -1;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	80 93 38 01 	sts	0x0138, r24
	task2.period = SMTick2_period;
     a24:	8f 89       	ldd	r24, Y+23	; 0x17
     a26:	98 8d       	ldd	r25, Y+24	; 0x18
     a28:	a9 8d       	ldd	r26, Y+25	; 0x19
     a2a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     a2c:	80 93 39 01 	sts	0x0139, r24
     a30:	90 93 3a 01 	sts	0x013A, r25
     a34:	a0 93 3b 01 	sts	0x013B, r26
     a38:	b0 93 3c 01 	sts	0x013C, r27
	task2.elapsedTime = SMTick2_period;
     a3c:	8f 89       	ldd	r24, Y+23	; 0x17
     a3e:	98 8d       	ldd	r25, Y+24	; 0x18
     a40:	a9 8d       	ldd	r26, Y+25	; 0x19
     a42:	ba 8d       	ldd	r27, Y+26	; 0x1a
     a44:	80 93 3d 01 	sts	0x013D, r24
     a48:	90 93 3e 01 	sts	0x013E, r25
     a4c:	a0 93 3f 01 	sts	0x013F, r26
     a50:	b0 93 40 01 	sts	0x0140, r27
	task2.TickFct = &SMTick2;
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	94 e0       	ldi	r25, 0x04	; 4
     a58:	90 93 42 01 	sts	0x0142, r25
     a5c:	80 93 41 01 	sts	0x0141, r24
	// Set the timer and turn it on
	TimerSet(GCD);
     a60:	8f 85       	ldd	r24, Y+15	; 0x0f
     a62:	98 89       	ldd	r25, Y+16	; 0x10
     a64:	a9 89       	ldd	r26, Y+17	; 0x11
     a66:	ba 89       	ldd	r27, Y+18	; 0x12
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	0e 94 8f 03 	call	0x71e	; 0x71e <TimerSet>
	TimerOn();
     a70:	0e 94 e5 02 	call	0x5ca	; 0x5ca <TimerOn>
	// Scheduler for-loop iterator
	unsigned short i;
	LCD_init();
     a74:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <LCD_init>
	LCD_ClearScreen();
     a78:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <LCD_ClearScreen>
	
	initUSART(1);
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 67 00 	call	0xce	; 0xce <initUSART>
	USART_Flush(1);
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <USART_Flush>
	
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
     a88:	1a 82       	std	Y+2, r1	; 0x02
     a8a:	19 82       	std	Y+1, r1	; 0x01
     a8c:	9b c0       	rjmp	.+310    	; 0xbc4 <main+0x304>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	9e 01       	movw	r18, r28
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	82 0f       	add	r24, r18
     a9e:	93 1f       	adc	r25, r19
     aa0:	4c 96       	adiw	r24, 0x1c	; 28
     aa2:	fc 01       	movw	r30, r24
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	fc 01       	movw	r30, r24
     aaa:	25 81       	ldd	r18, Z+5	; 0x05
     aac:	36 81       	ldd	r19, Z+6	; 0x06
     aae:	47 81       	ldd	r20, Z+7	; 0x07
     ab0:	50 85       	ldd	r21, Z+8	; 0x08
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	be 01       	movw	r22, r28
     abc:	6f 5f       	subi	r22, 0xFF	; 255
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	86 0f       	add	r24, r22
     ac2:	97 1f       	adc	r25, r23
     ac4:	4c 96       	adiw	r24, 0x1c	; 28
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	fc 01       	movw	r30, r24
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	92 81       	ldd	r25, Z+2	; 0x02
     ad2:	a3 81       	ldd	r26, Z+3	; 0x03
     ad4:	b4 81       	ldd	r27, Z+4	; 0x04
     ad6:	28 17       	cp	r18, r24
     ad8:	39 07       	cpc	r19, r25
     ada:	4a 07       	cpc	r20, r26
     adc:	5b 07       	cpc	r21, r27
     ade:	09 f0       	breq	.+2      	; 0xae2 <main+0x222>
     ae0:	45 c0       	rjmp	.+138    	; 0xb6c <main+0x2ac>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	9e 01       	movw	r18, r28
     aec:	2f 5f       	subi	r18, 0xFF	; 255
     aee:	3f 4f       	sbci	r19, 0xFF	; 255
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	4c 96       	adiw	r24, 0x1c	; 28
     af6:	fc 01       	movw	r30, r24
     af8:	00 81       	ld	r16, Z
     afa:	11 81       	ldd	r17, Z+1	; 0x01
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	9e 01       	movw	r18, r28
     b06:	2f 5f       	subi	r18, 0xFF	; 255
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	82 0f       	add	r24, r18
     b0c:	93 1f       	adc	r25, r19
     b0e:	4c 96       	adiw	r24, 0x1c	; 28
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	fc 01       	movw	r30, r24
     b18:	21 85       	ldd	r18, Z+9	; 0x09
     b1a:	32 85       	ldd	r19, Z+10	; 0x0a
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	9a 81       	ldd	r25, Y+2	; 0x02
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	ae 01       	movw	r20, r28
     b26:	4f 5f       	subi	r20, 0xFF	; 255
     b28:	5f 4f       	sbci	r21, 0xFF	; 255
     b2a:	84 0f       	add	r24, r20
     b2c:	95 1f       	adc	r25, r21
     b2e:	4c 96       	adiw	r24, 0x1c	; 28
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	fc 01       	movw	r30, r24
     b38:	80 81       	ld	r24, Z
     b3a:	99 27       	eor	r25, r25
     b3c:	87 fd       	sbrc	r24, 7
     b3e:	90 95       	com	r25
     b40:	f9 01       	movw	r30, r18
     b42:	09 95       	icall
     b44:	f8 01       	movw	r30, r16
     b46:	80 83       	st	Z, r24
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	9e 01       	movw	r18, r28
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	82 0f       	add	r24, r18
     b58:	93 1f       	adc	r25, r19
     b5a:	4c 96       	adiw	r24, 0x1c	; 28
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	fc 01       	movw	r30, r24
     b64:	15 82       	std	Z+5, r1	; 0x05
     b66:	16 82       	std	Z+6, r1	; 0x06
     b68:	17 82       	std	Z+7, r1	; 0x07
     b6a:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	9e 01       	movw	r18, r28
     b76:	2f 5f       	subi	r18, 0xFF	; 255
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	4c 96       	adiw	r24, 0x1c	; 28
     b80:	fc 01       	movw	r30, r24
     b82:	20 81       	ld	r18, Z
     b84:	31 81       	ldd	r19, Z+1	; 0x01
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	ae 01       	movw	r20, r28
     b90:	4f 5f       	subi	r20, 0xFF	; 255
     b92:	5f 4f       	sbci	r21, 0xFF	; 255
     b94:	84 0f       	add	r24, r20
     b96:	95 1f       	adc	r25, r21
     b98:	4c 96       	adiw	r24, 0x1c	; 28
     b9a:	fc 01       	movw	r30, r24
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	fc 01       	movw	r30, r24
     ba2:	85 81       	ldd	r24, Z+5	; 0x05
     ba4:	96 81       	ldd	r25, Z+6	; 0x06
     ba6:	a7 81       	ldd	r26, Z+7	; 0x07
     ba8:	b0 85       	ldd	r27, Z+8	; 0x08
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	a1 1d       	adc	r26, r1
     bae:	b1 1d       	adc	r27, r1
     bb0:	f9 01       	movw	r30, r18
     bb2:	85 83       	std	Z+5, r24	; 0x05
     bb4:	96 83       	std	Z+6, r25	; 0x06
     bb6:	a7 83       	std	Z+7, r26	; 0x07
     bb8:	b0 87       	std	Z+8, r27	; 0x08
	initUSART(1);
	USART_Flush(1);
	
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	29 81       	ldd	r18, Y+1	; 0x01
     bc6:	3a 81       	ldd	r19, Y+2	; 0x02
     bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bcc:	28 17       	cp	r18, r24
     bce:	39 07       	cpc	r19, r25
     bd0:	08 f4       	brcc	.+2      	; 0xbd4 <main+0x314>
     bd2:	5d cf       	rjmp	.-326    	; 0xa8e <main+0x1ce>
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
     bd4:	00 00       	nop
     bd6:	80 91 26 01 	lds	r24, 0x0126
     bda:	88 23       	and	r24, r24
     bdc:	e1 f3       	breq	.-8      	; 0xbd6 <main+0x316>
		TimerFlag = 0;
     bde:	10 92 26 01 	sts	0x0126, r1
	}
     be2:	52 cf       	rjmp	.-348    	; 0xa88 <main+0x1c8>

00000be4 <LCD_ClearScreen>:
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	0e 94 17 06 	call	0xc2e	; 0xc2e <LCD_WriteCommand>
}
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <LCD_init>:

void LCD_init(void) {
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
     c00:	84 e6       	ldi	r24, 0x64	; 100
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 b8 06 	call	0xd70	; 0xd70 <delay_ms>
	LCD_WriteCommand(0x38);
     c08:	88 e3       	ldi	r24, 0x38	; 56
     c0a:	0e 94 17 06 	call	0xc2e	; 0xc2e <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     c0e:	86 e0       	ldi	r24, 0x06	; 6
     c10:	0e 94 17 06 	call	0xc2e	; 0xc2e <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     c14:	8f e0       	ldi	r24, 0x0F	; 15
     c16:	0e 94 17 06 	call	0xc2e	; 0xc2e <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	0e 94 17 06 	call	0xc2e	; 0xc2e <LCD_WriteCommand>
	delay_ms(10);						 
     c20:	8a e0       	ldi	r24, 0x0A	; 10
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 b8 06 	call	0xd70	; 0xd70 <delay_ms>
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <LCD_WriteCommand>:

void LCD_WriteCommand (unsigned char Command) {
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
     c3a:	8b e2       	ldi	r24, 0x2B	; 43
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	2b e2       	ldi	r18, 0x2B	; 43
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	2f 7b       	andi	r18, 0xBF	; 191
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
   DATA_BUS = Command;
     c4c:	88 e2       	ldi	r24, 0x28	; 40
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	29 81       	ldd	r18, Y+1	; 0x01
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     c56:	8b e2       	ldi	r24, 0x2B	; 43
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	2b e2       	ldi	r18, 0x2B	; 43
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	20 68       	ori	r18, 0x80	; 128
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
   asm("nop");
     c68:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     c6a:	8b e2       	ldi	r24, 0x2B	; 43
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	2b e2       	ldi	r18, 0x2B	; 43
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	f9 01       	movw	r30, r18
     c74:	20 81       	ld	r18, Z
     c76:	2f 77       	andi	r18, 0x7F	; 127
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 b8 06 	call	0xd70	; 0xd70 <delay_ms>
}
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	0f 92       	push	r0
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
     c98:	8b e2       	ldi	r24, 0x2B	; 43
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	2b e2       	ldi	r18, 0x2B	; 43
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	f9 01       	movw	r30, r18
     ca2:	20 81       	ld	r18, Z
     ca4:	20 64       	ori	r18, 0x40	; 64
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
   DATA_BUS = Data;
     caa:	88 e2       	ldi	r24, 0x28	; 40
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	29 81       	ldd	r18, Y+1	; 0x01
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     cb4:	8b e2       	ldi	r24, 0x2B	; 43
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	2b e2       	ldi	r18, 0x2B	; 43
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	f9 01       	movw	r30, r18
     cbe:	20 81       	ld	r18, Z
     cc0:	20 68       	ori	r18, 0x80	; 128
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
   asm("nop");
     cc6:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     cc8:	8b e2       	ldi	r24, 0x2B	; 43
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	2b e2       	ldi	r18, 0x2B	; 43
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	f9 01       	movw	r30, r18
     cd2:	20 81       	ld	r18, Z
     cd4:	2f 77       	andi	r18, 0x7F	; 127
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
   delay_ms(1);
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 b8 06 	call	0xd70	; 0xd70 <delay_ms>
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <LCD_DisplayString+0x6>
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <LCD_DisplayString+0x8>
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	8a 83       	std	Y+2, r24	; 0x02
     cf8:	7c 83       	std	Y+4, r23	; 0x04
     cfa:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
     cfc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <LCD_ClearScreen>
   unsigned char c = column;
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
     d04:	12 c0       	rjmp	.+36     	; 0xd2a <LCD_DisplayString+0x40>
      LCD_Cursor(c++);
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	99 81       	ldd	r25, Y+1	; 0x01
     d0a:	9f 5f       	subi	r25, 0xFF	; 255
     d0c:	99 83       	std	Y+1, r25	; 0x01
     d0e:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Cursor>
      LCD_WriteData(*string++);
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	fc 01       	movw	r30, r24
     d18:	20 81       	ld	r18, Z
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	8b 83       	std	Y+3, r24	; 0x03
     d24:	82 2f       	mov	r24, r18
     d26:	0e 94 46 06 	call	0xc8c	; 0xc8c <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	fc 01       	movw	r30, r24
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	41 f7       	brne	.-48     	; 0xd06 <LCD_DisplayString+0x1c>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	0f 92       	push	r0
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	81 31       	cpi	r24, 0x11	; 17
     d54:	28 f4       	brcc	.+10     	; 0xd60 <LCD_Cursor+0x1c>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	81 58       	subi	r24, 0x81	; 129
     d5a:	0e 94 17 06 	call	0xc2e	; 0xc2e <LCD_WriteCommand>
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <LCD_Cursor+0x24>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	81 55       	subi	r24, 0x51	; 81
     d64:	0e 94 17 06 	call	0xc2e	; 0xc2e <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <delay_ms+0x6>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <delay_ms+0x8>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <delay_ms+0xa>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9e 83       	std	Y+6, r25	; 0x06
     d80:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
     d82:	1a 82       	std	Y+2, r1	; 0x02
     d84:	19 82       	std	Y+1, r1	; 0x01
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <delay_ms+0x40>
    for(j=0;j<775;j++)
     d88:	1c 82       	std	Y+4, r1	; 0x04
     d8a:	1b 82       	std	Y+3, r1	; 0x03
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <delay_ms+0x2a>
  {
   asm("nop");
     d8e:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	9c 83       	std	Y+4, r25	; 0x04
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	23 e0       	ldi	r18, 0x03	; 3
     da0:	87 30       	cpi	r24, 0x07	; 7
     da2:	92 07       	cpc	r25, r18
     da4:	a4 f3       	brlt	.-24     	; 0xd8e <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	29 81       	ldd	r18, Y+1	; 0x01
     db2:	3a 81       	ldd	r19, Y+2	; 0x02
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	28 17       	cp	r18, r24
     dba:	39 07       	cpc	r19, r25
     dbc:	2c f3       	brlt	.-54     	; 0xd88 <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
     dbe:	26 96       	adiw	r28, 0x06	; 6
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <__cmpsf2>:
     dd0:	9c d0       	rcall	.+312    	; 0xf0a <__fp_cmp>
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <__cmpsf2+0x6>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	08 95       	ret

00000dd8 <__divsf3>:
     dd8:	0c d0       	rcall	.+24     	; 0xdf2 <__divsf3x>
     dda:	d2 c0       	rjmp	.+420    	; 0xf80 <__fp_round>
     ddc:	ca d0       	rcall	.+404    	; 0xf72 <__fp_pscB>
     dde:	40 f0       	brcs	.+16     	; 0xdf0 <__divsf3+0x18>
     de0:	c1 d0       	rcall	.+386    	; 0xf64 <__fp_pscA>
     de2:	30 f0       	brcs	.+12     	; 0xdf0 <__divsf3+0x18>
     de4:	21 f4       	brne	.+8      	; 0xdee <__divsf3+0x16>
     de6:	5f 3f       	cpi	r21, 0xFF	; 255
     de8:	19 f0       	breq	.+6      	; 0xdf0 <__divsf3+0x18>
     dea:	b3 c0       	rjmp	.+358    	; 0xf52 <__fp_inf>
     dec:	51 11       	cpse	r21, r1
     dee:	fc c0       	rjmp	.+504    	; 0xfe8 <__fp_szero>
     df0:	b6 c0       	rjmp	.+364    	; 0xf5e <__fp_nan>

00000df2 <__divsf3x>:
     df2:	d7 d0       	rcall	.+430    	; 0xfa2 <__fp_split3>
     df4:	98 f3       	brcs	.-26     	; 0xddc <__divsf3+0x4>

00000df6 <__divsf3_pse>:
     df6:	99 23       	and	r25, r25
     df8:	c9 f3       	breq	.-14     	; 0xdec <__divsf3+0x14>
     dfa:	55 23       	and	r21, r21
     dfc:	b1 f3       	breq	.-20     	; 0xdea <__divsf3+0x12>
     dfe:	95 1b       	sub	r25, r21
     e00:	55 0b       	sbc	r21, r21
     e02:	bb 27       	eor	r27, r27
     e04:	aa 27       	eor	r26, r26
     e06:	62 17       	cp	r22, r18
     e08:	73 07       	cpc	r23, r19
     e0a:	84 07       	cpc	r24, r20
     e0c:	38 f0       	brcs	.+14     	; 0xe1c <__divsf3_pse+0x26>
     e0e:	9f 5f       	subi	r25, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	44 1f       	adc	r20, r20
     e18:	aa 1f       	adc	r26, r26
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <__divsf3_pse+0x10>
     e1c:	33 d0       	rcall	.+102    	; 0xe84 <__divsf3_pse+0x8e>
     e1e:	0e 2e       	mov	r0, r30
     e20:	3a f0       	brmi	.+14     	; 0xe30 <__divsf3_pse+0x3a>
     e22:	e0 e8       	ldi	r30, 0x80	; 128
     e24:	30 d0       	rcall	.+96     	; 0xe86 <__divsf3_pse+0x90>
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	50 40       	sbci	r21, 0x00	; 0
     e2a:	e6 95       	lsr	r30
     e2c:	00 1c       	adc	r0, r0
     e2e:	ca f7       	brpl	.-14     	; 0xe22 <__divsf3_pse+0x2c>
     e30:	29 d0       	rcall	.+82     	; 0xe84 <__divsf3_pse+0x8e>
     e32:	fe 2f       	mov	r31, r30
     e34:	27 d0       	rcall	.+78     	; 0xe84 <__divsf3_pse+0x8e>
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	bb 1f       	adc	r27, r27
     e3e:	26 17       	cp	r18, r22
     e40:	37 07       	cpc	r19, r23
     e42:	48 07       	cpc	r20, r24
     e44:	ab 07       	cpc	r26, r27
     e46:	b0 e8       	ldi	r27, 0x80	; 128
     e48:	09 f0       	breq	.+2      	; 0xe4c <__divsf3_pse+0x56>
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	80 2d       	mov	r24, r0
     e4e:	bf 01       	movw	r22, r30
     e50:	ff 27       	eor	r31, r31
     e52:	93 58       	subi	r25, 0x83	; 131
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	2a f0       	brmi	.+10     	; 0xe62 <__divsf3_pse+0x6c>
     e58:	9e 3f       	cpi	r25, 0xFE	; 254
     e5a:	51 05       	cpc	r21, r1
     e5c:	68 f0       	brcs	.+26     	; 0xe78 <__divsf3_pse+0x82>
     e5e:	79 c0       	rjmp	.+242    	; 0xf52 <__fp_inf>
     e60:	c3 c0       	rjmp	.+390    	; 0xfe8 <__fp_szero>
     e62:	5f 3f       	cpi	r21, 0xFF	; 255
     e64:	ec f3       	brlt	.-6      	; 0xe60 <__divsf3_pse+0x6a>
     e66:	98 3e       	cpi	r25, 0xE8	; 232
     e68:	dc f3       	brlt	.-10     	; 0xe60 <__divsf3_pse+0x6a>
     e6a:	86 95       	lsr	r24
     e6c:	77 95       	ror	r23
     e6e:	67 95       	ror	r22
     e70:	b7 95       	ror	r27
     e72:	f7 95       	ror	r31
     e74:	9f 5f       	subi	r25, 0xFF	; 255
     e76:	c9 f7       	brne	.-14     	; 0xe6a <__divsf3_pse+0x74>
     e78:	88 0f       	add	r24, r24
     e7a:	91 1d       	adc	r25, r1
     e7c:	96 95       	lsr	r25
     e7e:	87 95       	ror	r24
     e80:	97 f9       	bld	r25, 7
     e82:	08 95       	ret
     e84:	e1 e0       	ldi	r30, 0x01	; 1
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	bb 1f       	adc	r27, r27
     e8e:	62 17       	cp	r22, r18
     e90:	73 07       	cpc	r23, r19
     e92:	84 07       	cpc	r24, r20
     e94:	ba 07       	cpc	r27, r26
     e96:	20 f0       	brcs	.+8      	; 0xea0 <__divsf3_pse+0xaa>
     e98:	62 1b       	sub	r22, r18
     e9a:	73 0b       	sbc	r23, r19
     e9c:	84 0b       	sbc	r24, r20
     e9e:	ba 0b       	sbc	r27, r26
     ea0:	ee 1f       	adc	r30, r30
     ea2:	88 f7       	brcc	.-30     	; 0xe86 <__divsf3_pse+0x90>
     ea4:	e0 95       	com	r30
     ea6:	08 95       	ret

00000ea8 <__fixsfsi>:
     ea8:	04 d0       	rcall	.+8      	; 0xeb2 <__fixunssfsi>
     eaa:	68 94       	set
     eac:	b1 11       	cpse	r27, r1
     eae:	9c c0       	rjmp	.+312    	; 0xfe8 <__fp_szero>
     eb0:	08 95       	ret

00000eb2 <__fixunssfsi>:
     eb2:	7f d0       	rcall	.+254    	; 0xfb2 <__fp_splitA>
     eb4:	88 f0       	brcs	.+34     	; 0xed8 <__fixunssfsi+0x26>
     eb6:	9f 57       	subi	r25, 0x7F	; 127
     eb8:	90 f0       	brcs	.+36     	; 0xede <__fixunssfsi+0x2c>
     eba:	b9 2f       	mov	r27, r25
     ebc:	99 27       	eor	r25, r25
     ebe:	b7 51       	subi	r27, 0x17	; 23
     ec0:	a0 f0       	brcs	.+40     	; 0xeea <__fixunssfsi+0x38>
     ec2:	d1 f0       	breq	.+52     	; 0xef8 <__fixunssfsi+0x46>
     ec4:	66 0f       	add	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	88 1f       	adc	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	1a f0       	brmi	.+6      	; 0xed4 <__fixunssfsi+0x22>
     ece:	ba 95       	dec	r27
     ed0:	c9 f7       	brne	.-14     	; 0xec4 <__fixunssfsi+0x12>
     ed2:	12 c0       	rjmp	.+36     	; 0xef8 <__fixunssfsi+0x46>
     ed4:	b1 30       	cpi	r27, 0x01	; 1
     ed6:	81 f0       	breq	.+32     	; 0xef8 <__fixunssfsi+0x46>
     ed8:	86 d0       	rcall	.+268    	; 0xfe6 <__fp_zero>
     eda:	b1 e0       	ldi	r27, 0x01	; 1
     edc:	08 95       	ret
     ede:	83 c0       	rjmp	.+262    	; 0xfe6 <__fp_zero>
     ee0:	67 2f       	mov	r22, r23
     ee2:	78 2f       	mov	r23, r24
     ee4:	88 27       	eor	r24, r24
     ee6:	b8 5f       	subi	r27, 0xF8	; 248
     ee8:	39 f0       	breq	.+14     	; 0xef8 <__fixunssfsi+0x46>
     eea:	b9 3f       	cpi	r27, 0xF9	; 249
     eec:	cc f3       	brlt	.-14     	; 0xee0 <__fixunssfsi+0x2e>
     eee:	86 95       	lsr	r24
     ef0:	77 95       	ror	r23
     ef2:	67 95       	ror	r22
     ef4:	b3 95       	inc	r27
     ef6:	d9 f7       	brne	.-10     	; 0xeee <__fixunssfsi+0x3c>
     ef8:	3e f4       	brtc	.+14     	; 0xf08 <__fixunssfsi+0x56>
     efa:	90 95       	com	r25
     efc:	80 95       	com	r24
     efe:	70 95       	com	r23
     f00:	61 95       	neg	r22
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <__fp_cmp>:
     f0a:	99 0f       	add	r25, r25
     f0c:	00 08       	sbc	r0, r0
     f0e:	55 0f       	add	r21, r21
     f10:	aa 0b       	sbc	r26, r26
     f12:	e0 e8       	ldi	r30, 0x80	; 128
     f14:	fe ef       	ldi	r31, 0xFE	; 254
     f16:	16 16       	cp	r1, r22
     f18:	17 06       	cpc	r1, r23
     f1a:	e8 07       	cpc	r30, r24
     f1c:	f9 07       	cpc	r31, r25
     f1e:	c0 f0       	brcs	.+48     	; 0xf50 <__fp_cmp+0x46>
     f20:	12 16       	cp	r1, r18
     f22:	13 06       	cpc	r1, r19
     f24:	e4 07       	cpc	r30, r20
     f26:	f5 07       	cpc	r31, r21
     f28:	98 f0       	brcs	.+38     	; 0xf50 <__fp_cmp+0x46>
     f2a:	62 1b       	sub	r22, r18
     f2c:	73 0b       	sbc	r23, r19
     f2e:	84 0b       	sbc	r24, r20
     f30:	95 0b       	sbc	r25, r21
     f32:	39 f4       	brne	.+14     	; 0xf42 <__fp_cmp+0x38>
     f34:	0a 26       	eor	r0, r26
     f36:	61 f0       	breq	.+24     	; 0xf50 <__fp_cmp+0x46>
     f38:	23 2b       	or	r18, r19
     f3a:	24 2b       	or	r18, r20
     f3c:	25 2b       	or	r18, r21
     f3e:	21 f4       	brne	.+8      	; 0xf48 <__fp_cmp+0x3e>
     f40:	08 95       	ret
     f42:	0a 26       	eor	r0, r26
     f44:	09 f4       	brne	.+2      	; 0xf48 <__fp_cmp+0x3e>
     f46:	a1 40       	sbci	r26, 0x01	; 1
     f48:	a6 95       	lsr	r26
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	81 1d       	adc	r24, r1
     f4e:	81 1d       	adc	r24, r1
     f50:	08 95       	ret

00000f52 <__fp_inf>:
     f52:	97 f9       	bld	r25, 7
     f54:	9f 67       	ori	r25, 0x7F	; 127
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	08 95       	ret

00000f5e <__fp_nan>:
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	80 ec       	ldi	r24, 0xC0	; 192
     f62:	08 95       	ret

00000f64 <__fp_pscA>:
     f64:	00 24       	eor	r0, r0
     f66:	0a 94       	dec	r0
     f68:	16 16       	cp	r1, r22
     f6a:	17 06       	cpc	r1, r23
     f6c:	18 06       	cpc	r1, r24
     f6e:	09 06       	cpc	r0, r25
     f70:	08 95       	ret

00000f72 <__fp_pscB>:
     f72:	00 24       	eor	r0, r0
     f74:	0a 94       	dec	r0
     f76:	12 16       	cp	r1, r18
     f78:	13 06       	cpc	r1, r19
     f7a:	14 06       	cpc	r1, r20
     f7c:	05 06       	cpc	r0, r21
     f7e:	08 95       	ret

00000f80 <__fp_round>:
     f80:	09 2e       	mov	r0, r25
     f82:	03 94       	inc	r0
     f84:	00 0c       	add	r0, r0
     f86:	11 f4       	brne	.+4      	; 0xf8c <__fp_round+0xc>
     f88:	88 23       	and	r24, r24
     f8a:	52 f0       	brmi	.+20     	; 0xfa0 <__fp_round+0x20>
     f8c:	bb 0f       	add	r27, r27
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fp_round+0x20>
     f90:	bf 2b       	or	r27, r31
     f92:	11 f4       	brne	.+4      	; 0xf98 <__fp_round+0x18>
     f94:	60 ff       	sbrs	r22, 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__fp_round+0x20>
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	08 95       	ret

00000fa2 <__fp_split3>:
     fa2:	57 fd       	sbrc	r21, 7
     fa4:	90 58       	subi	r25, 0x80	; 128
     fa6:	44 0f       	add	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	59 f0       	breq	.+22     	; 0xfc2 <__fp_splitA+0x10>
     fac:	5f 3f       	cpi	r21, 0xFF	; 255
     fae:	71 f0       	breq	.+28     	; 0xfcc <__fp_splitA+0x1a>
     fb0:	47 95       	ror	r20

00000fb2 <__fp_splitA>:
     fb2:	88 0f       	add	r24, r24
     fb4:	97 fb       	bst	r25, 7
     fb6:	99 1f       	adc	r25, r25
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <__fp_splitA+0x20>
     fba:	9f 3f       	cpi	r25, 0xFF	; 255
     fbc:	79 f0       	breq	.+30     	; 0xfdc <__fp_splitA+0x2a>
     fbe:	87 95       	ror	r24
     fc0:	08 95       	ret
     fc2:	12 16       	cp	r1, r18
     fc4:	13 06       	cpc	r1, r19
     fc6:	14 06       	cpc	r1, r20
     fc8:	55 1f       	adc	r21, r21
     fca:	f2 cf       	rjmp	.-28     	; 0xfb0 <__fp_split3+0xe>
     fcc:	46 95       	lsr	r20
     fce:	f1 df       	rcall	.-30     	; 0xfb2 <__fp_splitA>
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <__fp_splitA+0x30>
     fd2:	16 16       	cp	r1, r22
     fd4:	17 06       	cpc	r1, r23
     fd6:	18 06       	cpc	r1, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	f1 cf       	rjmp	.-30     	; 0xfbe <__fp_splitA+0xc>
     fdc:	86 95       	lsr	r24
     fde:	71 05       	cpc	r23, r1
     fe0:	61 05       	cpc	r22, r1
     fe2:	08 94       	sec
     fe4:	08 95       	ret

00000fe6 <__fp_zero>:
     fe6:	e8 94       	clt

00000fe8 <__fp_szero>:
     fe8:	bb 27       	eor	r27, r27
     fea:	66 27       	eor	r22, r22
     fec:	77 27       	eor	r23, r23
     fee:	cb 01       	movw	r24, r22
     ff0:	97 f9       	bld	r25, 7
     ff2:	08 95       	ret

00000ff4 <__gesf2>:
     ff4:	8a df       	rcall	.-236    	; 0xf0a <__fp_cmp>
     ff6:	08 f4       	brcc	.+2      	; 0xffa <__gesf2+0x6>
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	08 95       	ret

00000ffc <__mulsf3>:
     ffc:	0b d0       	rcall	.+22     	; 0x1014 <__mulsf3x>
     ffe:	c0 cf       	rjmp	.-128    	; 0xf80 <__fp_round>
    1000:	b1 df       	rcall	.-158    	; 0xf64 <__fp_pscA>
    1002:	28 f0       	brcs	.+10     	; 0x100e <__mulsf3+0x12>
    1004:	b6 df       	rcall	.-148    	; 0xf72 <__fp_pscB>
    1006:	18 f0       	brcs	.+6      	; 0x100e <__mulsf3+0x12>
    1008:	95 23       	and	r25, r21
    100a:	09 f0       	breq	.+2      	; 0x100e <__mulsf3+0x12>
    100c:	a2 cf       	rjmp	.-188    	; 0xf52 <__fp_inf>
    100e:	a7 cf       	rjmp	.-178    	; 0xf5e <__fp_nan>
    1010:	11 24       	eor	r1, r1
    1012:	ea cf       	rjmp	.-44     	; 0xfe8 <__fp_szero>

00001014 <__mulsf3x>:
    1014:	c6 df       	rcall	.-116    	; 0xfa2 <__fp_split3>
    1016:	a0 f3       	brcs	.-24     	; 0x1000 <__mulsf3+0x4>

00001018 <__mulsf3_pse>:
    1018:	95 9f       	mul	r25, r21
    101a:	d1 f3       	breq	.-12     	; 0x1010 <__mulsf3+0x14>
    101c:	95 0f       	add	r25, r21
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	55 1f       	adc	r21, r21
    1022:	62 9f       	mul	r22, r18
    1024:	f0 01       	movw	r30, r0
    1026:	72 9f       	mul	r23, r18
    1028:	bb 27       	eor	r27, r27
    102a:	f0 0d       	add	r31, r0
    102c:	b1 1d       	adc	r27, r1
    102e:	63 9f       	mul	r22, r19
    1030:	aa 27       	eor	r26, r26
    1032:	f0 0d       	add	r31, r0
    1034:	b1 1d       	adc	r27, r1
    1036:	aa 1f       	adc	r26, r26
    1038:	64 9f       	mul	r22, r20
    103a:	66 27       	eor	r22, r22
    103c:	b0 0d       	add	r27, r0
    103e:	a1 1d       	adc	r26, r1
    1040:	66 1f       	adc	r22, r22
    1042:	82 9f       	mul	r24, r18
    1044:	22 27       	eor	r18, r18
    1046:	b0 0d       	add	r27, r0
    1048:	a1 1d       	adc	r26, r1
    104a:	62 1f       	adc	r22, r18
    104c:	73 9f       	mul	r23, r19
    104e:	b0 0d       	add	r27, r0
    1050:	a1 1d       	adc	r26, r1
    1052:	62 1f       	adc	r22, r18
    1054:	83 9f       	mul	r24, r19
    1056:	a0 0d       	add	r26, r0
    1058:	61 1d       	adc	r22, r1
    105a:	22 1f       	adc	r18, r18
    105c:	74 9f       	mul	r23, r20
    105e:	33 27       	eor	r19, r19
    1060:	a0 0d       	add	r26, r0
    1062:	61 1d       	adc	r22, r1
    1064:	23 1f       	adc	r18, r19
    1066:	84 9f       	mul	r24, r20
    1068:	60 0d       	add	r22, r0
    106a:	21 1d       	adc	r18, r1
    106c:	82 2f       	mov	r24, r18
    106e:	76 2f       	mov	r23, r22
    1070:	6a 2f       	mov	r22, r26
    1072:	11 24       	eor	r1, r1
    1074:	9f 57       	subi	r25, 0x7F	; 127
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	8a f0       	brmi	.+34     	; 0x109c <__mulsf3_pse+0x84>
    107a:	e1 f0       	breq	.+56     	; 0x10b4 <__mulsf3_pse+0x9c>
    107c:	88 23       	and	r24, r24
    107e:	4a f0       	brmi	.+18     	; 0x1092 <__mulsf3_pse+0x7a>
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	bb 1f       	adc	r27, r27
    1086:	66 1f       	adc	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	50 40       	sbci	r21, 0x00	; 0
    1090:	a9 f7       	brne	.-22     	; 0x107c <__mulsf3_pse+0x64>
    1092:	9e 3f       	cpi	r25, 0xFE	; 254
    1094:	51 05       	cpc	r21, r1
    1096:	70 f0       	brcs	.+28     	; 0x10b4 <__mulsf3_pse+0x9c>
    1098:	5c cf       	rjmp	.-328    	; 0xf52 <__fp_inf>
    109a:	a6 cf       	rjmp	.-180    	; 0xfe8 <__fp_szero>
    109c:	5f 3f       	cpi	r21, 0xFF	; 255
    109e:	ec f3       	brlt	.-6      	; 0x109a <__mulsf3_pse+0x82>
    10a0:	98 3e       	cpi	r25, 0xE8	; 232
    10a2:	dc f3       	brlt	.-10     	; 0x109a <__mulsf3_pse+0x82>
    10a4:	86 95       	lsr	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f7 95       	ror	r31
    10ae:	e7 95       	ror	r30
    10b0:	9f 5f       	subi	r25, 0xFF	; 255
    10b2:	c1 f7       	brne	.-16     	; 0x10a4 <__mulsf3_pse+0x8c>
    10b4:	fe 2b       	or	r31, r30
    10b6:	88 0f       	add	r24, r24
    10b8:	91 1d       	adc	r25, r1
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__udivmodsi4>:
    10c2:	a1 e2       	ldi	r26, 0x21	; 33
    10c4:	1a 2e       	mov	r1, r26
    10c6:	aa 1b       	sub	r26, r26
    10c8:	bb 1b       	sub	r27, r27
    10ca:	fd 01       	movw	r30, r26
    10cc:	0d c0       	rjmp	.+26     	; 0x10e8 <__udivmodsi4_ep>

000010ce <__udivmodsi4_loop>:
    10ce:	aa 1f       	adc	r26, r26
    10d0:	bb 1f       	adc	r27, r27
    10d2:	ee 1f       	adc	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	a2 17       	cp	r26, r18
    10d8:	b3 07       	cpc	r27, r19
    10da:	e4 07       	cpc	r30, r20
    10dc:	f5 07       	cpc	r31, r21
    10de:	20 f0       	brcs	.+8      	; 0x10e8 <__udivmodsi4_ep>
    10e0:	a2 1b       	sub	r26, r18
    10e2:	b3 0b       	sbc	r27, r19
    10e4:	e4 0b       	sbc	r30, r20
    10e6:	f5 0b       	sbc	r31, r21

000010e8 <__udivmodsi4_ep>:
    10e8:	66 1f       	adc	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	1a 94       	dec	r1
    10f2:	69 f7       	brne	.-38     	; 0x10ce <__udivmodsi4_loop>
    10f4:	60 95       	com	r22
    10f6:	70 95       	com	r23
    10f8:	80 95       	com	r24
    10fa:	90 95       	com	r25
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	bd 01       	movw	r22, r26
    1102:	cf 01       	movw	r24, r30
    1104:	08 95       	ret

00001106 <_exit>:
    1106:	f8 94       	cli

00001108 <__stop_program>:
    1108:	ff cf       	rjmp	.-2      	; 0x1108 <__stop_program>
